{"version":3,"sources":["map-with-zones/utils/constants.js","map-with-zones/componets/input-radius.jsx","map-with-zones/componets/popup.jsx","map-with-zones/componets/popup-button.jsx","map-with-zones/componets/radius-mode.jsx","map-with-zones/componets/input-time.jsx","map-with-zones/componets/radius-popup.jsx","map-with-zones/layers/marker-layer.js","map-with-zones/utils/zone-helpers.js","map-with-zones/utils/map-helpers.js","map-with-zones/layers/radius-stroke-layer.js","map-with-zones/layers/radius-layer.js","map-with-zones/utils/api-helpers.js","map-with-zones/api/user-api.js","map-with-zones/componets/zone-table.jsx","map-with-zones/api/mapbox-api.js","map-with-zones/layers/isochrone-stroke-layer.js","map-with-zones/layers/isochrone-layer.js","map-with-zones/controls/user-controll.js","map-with-zones/layers/zone-stroke-layer.js","map-with-zones/layers/zone-name-layer.js","map-with-zones/layers/zone-layer.js","map-with-zones/utils/dom-helpers.js","map-with-zones/api/zone-api.js","map-with-zones/componets/input-name.jsx","map-with-zones/componets/input-color.jsx","map-with-zones/componets/edit-popup.jsx","map-with-zones/componets/create-popup.jsx","map-with-zones/componets/popup-title.jsx","map-with-zones/componets/delete-popup.jsx","map-with-zones/layers/draw-layer.js","map-with-zones/controls/admin-controll.js","map-with-zones/utils/svg-helpers.js","map-with-zones/controls/zone-controll.js","map-with-zones/index.jsx","map-with-zones/componets/zones-list.jsx","App.js","serviceWorker.js","index.js"],"names":["RadiusModes","DEFAULT_MODE","MAP_ID","CONTROL_BUTTON_CLASS_NAME","CONTROL_BUTTON_ACTIVE_CLASS_NAME","POPUP_BUTTON_CLASS_NAME","POPUP_INPUT_CLASS_NAME","POPUP_LABEL_CLASS_NAME","POPUP_TITLE_CLASS_NAME","POPUP_COLOR_CLASS_NAME","POPUP_RADIUS_MODE_CLASS_NAME","POPUP_CONTROLS_CLASS_NAME","TABLE_TITLE_CLASS_NAME","TABLE_ZONES_CLASS_NAME","InputRadius","radius","onChange","htmlFor","className","type","id","defaultValue","Popup","children","PopupButton","text","onClick","RadiusMode","mode","onChangeMode","value","name","checked","InputTime","time","max","RadiusPopup","onChangeRadius","onClickSelect","onChangeTime","useState","stateMode","setMode","handleChangeMode","useCallback","e","target","stateRadius","setRadius","handleChangeRadius","MarkerLayerEvents","MarkerLayer","map","radiusInputId","radiusButtonId","fire","onTimeChange","Number","onRadiusChange","onDragEnd","lngLat","marker","getLngLat","onButtonClick","mapboxgl","Marker","draggable","popupContainer","document","createElement","popup","closeButton","closeOnClick","closeOnMove","setDOMContent","this","remove","coor","initData","setLngLat","toArray","setPopup","addTo","togglePopup","on","ReactDOM","render","Evented","getDefaultUserData","zones","getCenterZoneByCoordinates","coordinates","simlified","getDrawingLine","turf","getCenterZoneCoorByCoordinates","center","getZoneLineByCoordinates","geometry","length","polygon","line","tolerance","highQuality","getLineByPolygonData","polygonData","coords","enableMapInteraction","dragPan","enable","boxZoom","scrollZoom","dragRotate","doubleClickZoom","touchZoomRotate","touchPitch","disableMapInteraction","disable","setDefaultCursor","getCanvas","style","cursor","resetCursor","getZoneLinePaint","color","RadiusStrokeLayer","layerId","sourceId","addSource","addLayer","data","circle","getLineByRadius","source","getSource","setData","gerLayer","layout","paint","removeLayer","removeSource","getLayer","RadiusLayer","strokeLayer","update","getCircleByRadius","delay","a","Promise","resolve","setTimeout","UserApi","info","console","log","ZoneTable","itHasPoint","zone","key","CancelToken","axios","cancelFetch","MapboxApi","minutes","cancelIsochroneFetch","url","lng","lat","accessToken","get","cancelToken","c","error","IsochroneStrokeLayer","IsochroneLayer","mapboxApi","getIsochrone","UserControll","zoneControll","radiusMode","onTimeChanged","updateRadiusLayer","onModeChanged","userApi","sendInfoAboutIncludedZones","onRadiusChanged","onDragEndMarker","onMapClick","markerLayer","init","updateUserTable","container","table","mapElement","getElementById","appendChild","enableUserMode","disableUserMode","parentNode","removeChild","undefined","radiusLayer","isochroneLayer","off","removeUserTable","unmountComponentAtNode","once","isTimeMode","isDistanceMode","hasRadius","hasTime","getZoneList","getFeatureCollection","intersectedZones","filter","zoneCoordinates","point","isZoneIntersectedRadius","timePolygon","zoneLine","timeLine","points","features","isZoneIntersectedTime","el","findZonesInRadius","ZoneStrokeLayer","options","setPaintProperty","ZoneNameLayer","setLayoutProperty","minzoom","ZoneLayer","nameLayer","isEdit","updateName","setColor","getZonePolygonByCoordinates","createControllButton","content","callback","button","innerHTML","addEventListener","removeActiveClassForButton","classList","contains","addActiveClassForButton","add","ZoneApi","localStoragekey","localStorage","getItem","JSON","parse","newZones","push","string","stringify","setItem","InputName","InputColor","EditPopup","onChangeName","onChangeColor","onClickEdit","onClickSave","onClickCancel","CreatePopup","PopupTitle","title","DeletePopup","onClickDelete","DrawLayer","AdminControll","isCreateMode","isEditMode","isDeleteMode","deleteZoneId","editZoneId","cacheZone","newZone","zoneLayerPatternId","onClickEditButton","disableEditMode","disableAllModes","enableEditMode","editButton","addCursorPointerListener","removeCursorPointerListener","cancelEditZone","editZone","onMouseUpEdit","onMouseMoveEdit","showEditPopup","drawEditLayer","updateZoneCoordinates","updateEditZoneLayer","onMouseDownEdit","onGeometryEdit","editPopup","removeZoneLayer","drawZones","onSaveEdit","updateZone","editZoneColor","updateZoneColor","editZoneName","feature","getZoneFeatureByEvent","zoneId","properties","getZoneById","_","cloneDeep","onClickCreateButton","disableCreateMode","enableCreateMode","createPopup","newZonelayer","drawlayer","createButton","setNewZoneName","setNewZoneColor","updateColorInNewZone","createZone","onMouseUpCreate","onMouseMoveCreate","showCreatePopup","updateNewZoneLayer","onMouseDownCreate","onClickDeleteButton","disableDeleteMode","enableDeletetingMode","cancelDeleteZone","deletePopup","deleteZone","onClickDeleteZone","showDeletePopup","cursorListener","zoneApi","deleteButton","Date","now","toString","Math","random","substr","getNewZoneName","queryRenderedFeatures","shift","layer","match","ZoneControll","selectedZones","layers","Map","delete","addZone","find","forEach","existLayer","includes","addHighlight","removeHighlight","set","Cities","Bengaluru","LngLat","MapWithZones","props","mapStyle","mapToken","isAdmin","cityCoor","zoom","addControl","userControll","adminControll","prevProps","removeControl","isEqual","updateSelectedZones","React","Component","defaultProps","ZonesList","setSelectedZones","setZones","useEffect","getZones","newSelected","App","process","Boolean","window","location","hostname","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.07022b0a.chunk.js","sourcesContent":["export const RadiusModes = {\r\n    time: \"time\",\r\n    distance: \"distance\",\r\n};\r\nexport const DEFAULT_ZONE_LAYER_OPACITY = 0.3;\r\nexport const HIGHLIGHTED_ZONE_LAYER_OPACITY = 0.8;\r\nexport const DEFAULT_ZONE_LAYER_COLOR = \"#008888\";\r\nexport const DEFAULT_RADIUS_LAYER_COLOR = \"#292828\";\r\nexport const DEFAULT_RADIUS = 1;\r\nexport const DEFAULT_TIME = 10;\r\nexport const DEFAULT_MODE = RadiusModes.time;\r\nexport const MAP_ID = \"mapbox-container-element-id\";\r\nexport const CONTROL_BASE_CLASS_NAME = \"map-controll\";\r\nexport const CONTROL_BUTTON_CLASS_NAME = `${CONTROL_BASE_CLASS_NAME}__button`;\r\nexport const CONTROL_BUTTON_ACTIVE_CLASS_NAME = `${CONTROL_BUTTON_CLASS_NAME}_active`;\r\nexport const POPUP_BASE_CLASS_NAME = \"map-popup\";\r\nexport const POPUP_BUTTON_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__button`;\r\nexport const POPUP_INPUT_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__input`;\r\nexport const POPUP_LABEL_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__label`;\r\nexport const POPUP_TITLE_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__title`;\r\nexport const POPUP_COLOR_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__color`;\r\nexport const POPUP_RADIUS_MODE_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__radius-mode`;\r\nexport const POPUP_CONTROLS_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__controls`;\r\nexport const TABLE_BASE_CLASS_NAME = \"map-table\";\r\nexport const TABLE_TITLE_CLASS_NAME = `${TABLE_BASE_CLASS_NAME}__title`;\r\nexport const TABLE_ZONES_CLASS_NAME = `${TABLE_BASE_CLASS_NAME}__zones`;\r\n","import React from \"react\";\r\nimport { POPUP_LABEL_CLASS_NAME, POPUP_INPUT_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const InputRadius = ({ radius, onChange }) => {\r\n    return (\r\n        <>\r\n            <label htmlFor=\"popup-input-radius\" className={POPUP_LABEL_CLASS_NAME}>\r\n                Enter radius (km):\r\n            </label>\r\n            <br />\r\n            <input\r\n                type=\"number\"\r\n                id=\"popup-input-radius\"\r\n                defaultValue={radius || 0}\r\n                className={POPUP_INPUT_CLASS_NAME}\r\n                onChange={onChange}\r\n            />\r\n            <br />\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_BASE_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const Popup = ({ children }) => {\r\n    return <div className={POPUP_BASE_CLASS_NAME}>{children}</div>;\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_BUTTON_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const PopupButton = ({ text, onClick }) => {\r\n    return (\r\n        <button className={POPUP_BUTTON_CLASS_NAME} onClick={onClick} type=\"button\">\r\n            {text || \" \"}\r\n        </button>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_RADIUS_MODE_CLASS_NAME, RadiusModes } from \"../utils/constants\";\r\n\r\nexport const RadiusMode = ({ mode, onChangeMode }) => {\r\n    return (\r\n        <div className={POPUP_RADIUS_MODE_CLASS_NAME}>\r\n            <label htmlFor=\"radius-mode-time\">Time</label>\r\n            <input\r\n                type=\"radio\"\r\n                id=\"radius-mode-time\"\r\n                value={RadiusModes.time}\r\n                name=\"radius-mode\"\r\n                checked={mode === RadiusModes.time}\r\n                onChange={onChangeMode}\r\n            />\r\n            <label htmlFor=\"radius-mode-distance\">Distance</label>\r\n            <input\r\n                type=\"radio\"\r\n                id=\"radius-mode-distance\"\r\n                value={RadiusModes.distance}\r\n                name=\"radius-mode\"\r\n                checked={mode === RadiusModes.distance}\r\n                onChange={onChangeMode}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_LABEL_CLASS_NAME, POPUP_INPUT_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const InputTime = ({ time, onChange }) => {\r\n    return (\r\n        <>\r\n            <label htmlFor=\"popup-input-time\" className={POPUP_LABEL_CLASS_NAME}>\r\n                Enter time (min):\r\n            </label>\r\n            <br />\r\n            <input\r\n                type=\"number\"\r\n                id=\"popup-input-time\"\r\n                defaultValue={time || 0}\r\n                className={POPUP_INPUT_CLASS_NAME}\r\n                onChange={onChange}\r\n                max={60}\r\n            />\r\n            <br />\r\n        </>\r\n    );\r\n};\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { InputRadius } from \"./input-radius\";\r\nimport { Popup } from \"./popup\";\r\nimport { PopupButton } from \"./popup-button\";\r\nimport { POPUP_CONTROLS_CLASS_NAME, RadiusModes } from \"../utils/constants\";\r\nimport { RadiusMode } from \"./radius-mode\";\r\nimport { InputTime } from \"./input-time\";\r\n\r\nexport const RadiusPopup = ({ radius, onChangeRadius, onClickSelect, onChangeMode, time, onChangeTime, mode }) => {\r\n    const [stateMode, setMode] = useState(mode);\r\n    const handleChangeMode = useCallback(\r\n        (e) => {\r\n            setMode(e.target.value);\r\n            onChangeMode(e);\r\n        },\r\n        [onChangeMode],\r\n    );\r\n    const [stateRadius, setRadius] = useState(radius);\r\n    const handleChangeRadius = useCallback(\r\n        (e) => {\r\n            setRadius(e.target.value);\r\n            onChangeRadius(e);\r\n        },\r\n        [onChangeRadius],\r\n    );\r\n    return (\r\n        <Popup>\r\n            <RadiusMode mode={stateMode} onChangeMode={handleChangeMode} />\r\n            {stateMode === RadiusModes.time && <InputTime time={time} onChange={onChangeTime} />}\r\n            {stateMode === RadiusModes.distance && <InputRadius radius={stateRadius} onChange={handleChangeRadius} />}\r\n            <div className={POPUP_CONTROLS_CLASS_NAME}>\r\n                <PopupButton text=\"Select\" onClick={onClickSelect} />\r\n            </div>\r\n        </Popup>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RadiusPopup } from \"../componets/radius-popup\";\r\n\r\nexport const MarkerLayerEvents = {\r\n    dragend: \"dragend\",\r\n    radiusChanged: \"radiusChanged\",\r\n    buttonClick: \"buttonClick\",\r\n    modeChanged: \"modeChanged\",\r\n    timeChanged: \"timeChanged\",\r\n};\r\n\r\nexport class MarkerLayer extends mapboxgl.Evented {\r\n    radiusInputId = \"marker-input-radius\";\r\n    radiusButtonId = \"marker-button-radius\";\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    constructor(map) {\r\n        super();\r\n        this.map = map;\r\n\r\n        this.marker = new mapboxgl.Marker({\r\n            draggable: true,\r\n        });\r\n\r\n        this.popupContainer = document.createElement(\"div\");\r\n        this.popup = new mapboxgl.Popup({ closeButton: false, closeOnClick: false, closeOnMove: false }).setDOMContent(\r\n            this.popupContainer,\r\n        );\r\n    }\r\n\r\n    remove() {\r\n        if (this.marker) this.marker.remove();\r\n        if (this.popup) this.popup.remove();\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.LngLat} coor\r\n     */\r\n    init(coor, initData) {\r\n        this.marker.setLngLat(coor.toArray());\r\n        this.marker.setPopup(this.popup);\r\n        this.marker.addTo(this.map);\r\n        this.marker.togglePopup();\r\n        this.marker.on(\"dragend\", this.onDragEnd);\r\n        ReactDOM.render(\r\n            <RadiusPopup\r\n                radius={initData.radius}\r\n                time={initData.time}\r\n                mode={initData.mode}\r\n                onChangeRadius={this.onRadiusChange}\r\n                onClickSelect={this.onButtonClick}\r\n                onChangeMode={this.onChangeMode}\r\n                onChangeTime={this.onTimeChange}\r\n            />,\r\n            this.popupContainer,\r\n        );\r\n    }\r\n\r\n    onChangeMode = (e) => {\r\n        this.fire(MarkerLayerEvents.modeChanged, { mode: e.target.value });\r\n    };\r\n\r\n    onTimeChange = (e) => {\r\n        this.fire(MarkerLayerEvents.timeChanged, { time: Number(e.target.value) });\r\n    };\r\n\r\n    onRadiusChange = (e) => {\r\n        this.fire(MarkerLayerEvents.radiusChanged, { radius: Number(e.target.value) });\r\n    };\r\n\r\n    onDragEnd = () => {\r\n        const lngLat = this.marker.getLngLat();\r\n        this.fire(MarkerLayerEvents.dragend, { lngLat });\r\n    };\r\n\r\n    onButtonClick = () => {\r\n        this.fire(MarkerLayerEvents.buttonClick);\r\n    };\r\n}\r\n","import * as turf from \"@turf/turf\";\r\nimport { DEFAULT_ZONE_LAYER_COLOR, DEFAULT_RADIUS, DEFAULT_TIME, DEFAULT_MODE } from \"./constants\";\r\n\r\nexport function generateUniqueId() {\r\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\r\n}\r\n\r\nexport function getDefaultZone() {\r\n    return {\r\n        name: \"\",\r\n        color: DEFAULT_ZONE_LAYER_COLOR,\r\n        id: null,\r\n        coordinates: [],\r\n    };\r\n}\r\n\r\nexport function getDefaultUserData() {\r\n    return {\r\n        lngLat: null,\r\n        radius: DEFAULT_RADIUS,\r\n        time: DEFAULT_TIME,\r\n        mode: DEFAULT_MODE,\r\n        zones: [],\r\n    };\r\n}\r\n\r\nexport function getCenterZoneByCoordinates(coordinates) {\r\n    const simlified = getDrawingLine(coordinates);\r\n    if (!simlified) return;\r\n    const center = turf.center(simlified);\r\n    return center;\r\n}\r\n\r\nexport function getCenterZoneCoorByCoordinates(coordinates) {\r\n    const center = getCenterZoneByCoordinates(coordinates);\r\n    if (!center) return;\r\n    const coor = turf.getCoord(center);\r\n    return coor;\r\n}\r\n\r\nexport function getZonePolygonByCoordinates(coordinates, id) {\r\n    const line = getDrawingLine(coordinates, id);\r\n    if (!line || line.geometry.coordinates.length < 4) return;\r\n    let polygon = turf.lineToPolygon(line);\r\n    const kinks = turf.kinks(polygon);\r\n    if (kinks.features.length) {\r\n        polygon = turf.unkinkPolygon(polygon);\r\n    }\r\n    return polygon;\r\n}\r\n\r\nexport function getZoneLineByCoordinates(coordinates, id) {\r\n    const simlified = getDrawingLine(coordinates, id);\r\n    if (!simlified || simlified.geometry.coordinates.length < 4) return;\r\n    const polygon = turf.lineToPolygon(simlified);\r\n    const polygonedLine = turf.polygonToLine(polygon);\r\n    return polygonedLine;\r\n}\r\n\r\nexport function getDrawingLine(coordinates, id) {\r\n    if (coordinates.length < 2) return;\r\n    const line = turf.lineString(coordinates, { id });\r\n    const simlified = turf.cleanCoords(turf.simplify(line, { tolerance: 0.00001, highQuality: true }));\r\n    return simlified;\r\n}\r\n\r\nexport function getCircleByRadius(center, radius) {\r\n    return turf.circle(center.toArray(), radius);\r\n}\r\n\r\nexport function getLineByRadius(center, radius) {\r\n    if (!center || !radius) return;\r\n    const circle = turf.circle(center.toArray(), radius);\r\n    return turf.polygonToLine(circle);\r\n}\r\n\r\nexport function getLineByPolygonData(polygonData) {\r\n    const coords = turf.coordAll(polygonData);\r\n    return turf.lineString(coords);\r\n}\r\n\r\nexport function isZoneIntersectedRadius(radius, center, zoneCoordinates) {\r\n    if (zoneCoordinates.length < 2) return;\r\n    const line = turf.lineString(zoneCoordinates);\r\n    const point = turf.point(center.toArray());\r\n    const distance = turf.pointToLineDistance(point, line);\r\n    return distance <= radius;\r\n}\r\n\r\nexport function isZoneIntersectedTime(timePolygon, zoneCoordinates) {\r\n    if (!timePolygon || !zoneCoordinates) return;\r\n    const zoneLine = getZoneLineByCoordinates(zoneCoordinates);\r\n    const timeLine = getLineByPolygonData(timePolygon);\r\n    const points = turf.lineIntersect(zoneLine, timeLine);\r\n    const intersectedPoints = points && points.features.length;\r\n    return !!intersectedPoints;\r\n}\r\n","import { DEFAULT_RADIUS_LAYER_COLOR, DEFAULT_ZONE_LAYER_OPACITY } from \"./constants\";\r\n\r\nexport function enableMapInteraction(map) {\r\n    if (!map) return;\r\n    map.dragPan.enable();\r\n    map.boxZoom.enable();\r\n    map.scrollZoom.enable();\r\n    map.dragRotate.enable();\r\n    map.doubleClickZoom.enable();\r\n    map.touchZoomRotate.enable();\r\n    map.touchPitch.enable();\r\n}\r\n\r\nexport function disableMapInteraction(map) {\r\n    if (!map) return;\r\n    map.dragPan.disable();\r\n    map.boxZoom.disable();\r\n    map.scrollZoom.disable();\r\n    map.dragRotate.disable();\r\n    map.doubleClickZoom.disable();\r\n    map.touchZoomRotate.disable();\r\n    map.touchPitch.disable();\r\n}\r\n\r\nexport function setDefaultCursor(map) {\r\n    if (!map) return;\r\n    map.getCanvas().style.cursor = \"default\";\r\n}\r\n\r\nexport function resetCursor(map) {\r\n    if (!map) return;\r\n    map.getCanvas().style.cursor = \"\";\r\n}\r\n\r\nexport function getZoneLineLayout() {\r\n    return {\r\n        \"line-join\": \"round\",\r\n        \"line-cap\": \"round\",\r\n    };\r\n}\r\n\r\nexport function getZoneLinePaint(color) {\r\n    return {\r\n        \"line-color\": color,\r\n        \"line-width\": [\"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 5, 1, 16, 6],\r\n    };\r\n}\r\n\r\nexport function getZonePolygonPaint(color) {\r\n    return {\r\n        \"fill-color\": color,\r\n        \"fill-opacity\": DEFAULT_ZONE_LAYER_OPACITY,\r\n        \"fill-outline-color\": \"transparent\",\r\n    };\r\n}\r\n\r\nexport function getRadiusPolygonPaint() {\r\n    return {\r\n        \"fill-color\": DEFAULT_RADIUS_LAYER_COLOR,\r\n        \"fill-opacity\": 0.3,\r\n    };\r\n}\r\n\r\nexport function getRadiusLineLayout() {\r\n    return {\r\n        \"line-join\": \"round\",\r\n        \"line-cap\": \"round\",\r\n    };\r\n}\r\n\r\nexport function getRadiusLinePaint() {\r\n    return {\r\n        \"line-color\": DEFAULT_RADIUS_LAYER_COLOR,\r\n        \"line-width\": [\"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 5, 1, 16, 6],\r\n        \"line-dasharray\": [5, 3],\r\n    };\r\n}\r\n","import { getLineByRadius } from \"../utils/zone-helpers\";\r\nimport { getRadiusLineLayout, getRadiusLinePaint } from \"../utils/map-helpers\";\r\n\r\nexport class RadiusStrokeLayer {\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map) {\r\n        this.map = map;\r\n        this.layerId = `radius-stroke-layer`;\r\n        this.sourceId = `radius-stroke-source`;\r\n    }\r\n\r\n    update(radius, coor) {\r\n        this.addSource(radius, coor);\r\n        this.addLayer();\r\n    }\r\n\r\n    addSource(radius, coor) {\r\n        const data = getLineByRadius(coor, radius);\r\n        if (!data) return;\r\n\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"line\",\r\n            layout: getRadiusLineLayout(),\r\n            paint: getRadiusLinePaint(),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import { getCircleByRadius } from \"../utils/zone-helpers\";\r\nimport { RadiusStrokeLayer } from \"./radius-stroke-layer\";\r\nimport { getRadiusPolygonPaint } from \"../utils/map-helpers\";\r\n\r\nexport class RadiusLayer {\r\n    layerId = \"radius-layer\";\r\n    sourceId = \"radius-source\";\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    constructor(map) {\r\n        this.map = map;\r\n        this.strokeLayer = new RadiusStrokeLayer(map);\r\n    }\r\n\r\n    update(radius, coor) {\r\n        if (radius > 0) {\r\n            this.addSource(radius, coor);\r\n            this.addLayer();\r\n            this.strokeLayer.update(radius, coor);\r\n        } else {\r\n            this.remove();\r\n        }\r\n    }\r\n\r\n    addSource(radius, coor) {\r\n        const source = this.getSource();\r\n        const data = getCircleByRadius(coor, radius);\r\n        if (source) {\r\n            source.setData(data);\r\n        } else {\r\n            this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n        }\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"fill\",\r\n            paint: getRadiusPolygonPaint(),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n        this.strokeLayer.remove();\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","/** This is dummy function to simulate a delay in response from api  */\r\nexport async function delay() {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve();\r\n        }, 100);\r\n    });\r\n}\r\n","import { delay } from \"../utils/api-helpers\";\r\n\r\nexport class UserApi {\r\n    async sendInfoAboutIncludedZones(info) {\r\n        await delay();\r\n        console.log(info);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { TABLE_BASE_CLASS_NAME, TABLE_TITLE_CLASS_NAME, TABLE_ZONES_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const ZoneTable = ({ zones, itHasPoint }) => {\r\n    const getContent = () => {\r\n        if (!itHasPoint) {\r\n            return <span className={TABLE_TITLE_CLASS_NAME}>Set point on the map</span>;\r\n        }\r\n        if (!zones.length) {\r\n            return <span className={TABLE_TITLE_CLASS_NAME}>No zones in the radius</span>;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <span className={TABLE_TITLE_CLASS_NAME}>You have selected the following zones:</span>\r\n                <div className={TABLE_ZONES_CLASS_NAME}>\r\n                    {zones.map((zone) => (\r\n                        <span key={zone.id}>{zone.name}</span>\r\n                    ))}\r\n                </div>\r\n            </>\r\n        );\r\n    };\r\n\r\n    return <div className={TABLE_BASE_CLASS_NAME}>{getContent()}</div>;\r\n};\r\n","import mapboxgl from \"mapbox-gl\";\r\nimport axios from \"axios\";\r\n\r\nconst CancelToken = axios.CancelToken;\r\nlet cancelFetch = null;\r\n\r\nexport class MapboxApi {\r\n    cancelIsochroneFetch() {\r\n        if (cancelFetch) cancelFetch();\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.LngLat} coor\r\n     * @param {number} minutes\r\n     */\r\n    async getIsochrone(coor, minutes) {\r\n        this.cancelIsochroneFetch();\r\n        const url = `https://api.mapbox.com/isochrone/v1/mapbox/driving/${coor.lng},${coor.lat}?contours_minutes=${minutes}&polygons=true&access_token=${mapboxgl.accessToken}`;\r\n        try {\r\n            const { data } = await axios.get(url, {\r\n                cancelToken: new CancelToken((c) => {\r\n                    cancelFetch = c;\r\n                }),\r\n            });\r\n            return data;\r\n        } catch (error) {\r\n            console.error(error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n","import { getLineByPolygonData } from \"../utils/zone-helpers\";\r\nimport { getRadiusLineLayout, getRadiusLinePaint } from \"../utils/map-helpers\";\r\n\r\nexport class IsochroneStrokeLayer {\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map) {\r\n        this.map = map;\r\n        this.layerId = `isochrone-stroke-layer`;\r\n        this.sourceId = `isochrone-stroke-source`;\r\n    }\r\n\r\n    update(polygonData) {\r\n        this.addSource(polygonData);\r\n        this.addLayer();\r\n    }\r\n\r\n    addSource(polygonData) {\r\n        if (!polygonData) return;\r\n        const data = getLineByPolygonData(polygonData);\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"line\",\r\n            layout: getRadiusLineLayout(),\r\n            paint: getRadiusLinePaint(),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import { MapboxApi } from \"../api/mapbox-api\";\r\nimport { IsochroneStrokeLayer } from \"./isochrone-stroke-layer\";\r\nimport { getRadiusPolygonPaint } from \"../utils/map-helpers\";\r\n\r\nexport class IsochroneLayer {\r\n    layerId = \"isochrone-layer\";\r\n    sourceId = \"isochrone-source\";\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    constructor(map) {\r\n        this.map = map;\r\n        this.strokeLayer = new IsochroneStrokeLayer(map);\r\n        this.mapboxApi = new MapboxApi();\r\n    }\r\n\r\n    async update(time, coor) {\r\n        if (time > 0) {\r\n            await this.addSource(time, coor);\r\n            this.addLayer();\r\n            this.strokeLayer.update(this.data);\r\n        } else {\r\n            this.remove();\r\n        }\r\n    }\r\n\r\n    async addSource(time, coor) {\r\n        const source = this.getSource();\r\n        try {\r\n            this.data = await this.mapboxApi.getIsochrone(coor, time);\r\n            if (source) {\r\n                source.setData(this.data);\r\n            } else {\r\n                this.map.addSource(this.sourceId, { type: \"geojson\", data: this.data });\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    getFeatureCollection() {\r\n        return this.data;\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"fill\",\r\n            paint: getRadiusPolygonPaint(),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        this.mapboxApi.cancelIsochroneFetch();\r\n        this.data = null;\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n        if (this.strokeLayer) this.strokeLayer.remove();\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { MarkerLayer, MarkerLayerEvents } from \"../layers/marker-layer\";\r\nimport { RadiusLayer } from \"../layers/radius-layer\";\r\nimport { getDefaultUserData, isZoneIntersectedRadius, isZoneIntersectedTime } from \"../utils/zone-helpers\";\r\nimport { UserApi } from \"../api/user-api\";\r\nimport { MAP_ID, RadiusModes } from \"../utils/constants\";\r\nimport { ZoneTable } from \"../componets/zone-table\";\r\nimport { IsochroneLayer } from \"../layers/isochrone-layer\";\r\n\r\nexport class UserControll {\r\n    data = getDefaultUserData();\r\n    radiusMode = RadiusModes.time;\r\n    itHasPoint = false;\r\n\r\n    /**\r\n     * @param {import('./zone-controll').ZoneControll} zoneControll\r\n     */\r\n    constructor(zoneControll) {\r\n        this.zoneControll = zoneControll;\r\n        this.userApi = new UserApi();\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    onAdd(map) {\r\n        this.map = map;\r\n        this.container = document.createElement(\"div\");\r\n        this.container.className = \"mapboxgl-ctrl\";\r\n        this.table = document.createElement(\"div\");\r\n        const mapElement = document.getElementById(MAP_ID);\r\n        if (mapElement) mapElement.appendChild(this.table);\r\n        this.enableUserMode();\r\n        return this.container;\r\n    }\r\n\r\n    onRemove() {\r\n        this.disableUserMode();\r\n        if (this.table) this.table.parentNode.removeChild(this.table);\r\n        if (this.container) this.container.parentNode.removeChild(this.container);\r\n        this.data = getDefaultUserData();\r\n        this.itHasPoint = false;\r\n        this.map = undefined;\r\n    }\r\n\r\n    disableUserMode() {\r\n        if (this.markerLayer) this.markerLayer.remove();\r\n        if (this.radiusLayer) this.radiusLayer.remove();\r\n        if (this.isochroneLayer) this.isochroneLayer.remove();\r\n        if (this.map) this.map.off(\"click\", this.onMapClick);\r\n        this.removeUserTable();\r\n    }\r\n\r\n    updateUserTable() {\r\n        ReactDOM.render(<ZoneTable itHasPoint={this.itHasPoint} zones={this.data.zones} />, this.table);\r\n    }\r\n\r\n    removeUserTable() {\r\n        if (this.table) ReactDOM.unmountComponentAtNode(this.table);\r\n    }\r\n\r\n    enableUserMode() {\r\n        this.markerLayer = new MarkerLayer(this.map);\r\n        this.radiusLayer = new RadiusLayer(this.map);\r\n        this.isochroneLayer = new IsochroneLayer(this.map);\r\n        this.markerLayer.on(MarkerLayerEvents.dragend, this.onDragEndMarker);\r\n        this.markerLayer.on(MarkerLayerEvents.radiusChanged, this.onRadiusChanged);\r\n        this.markerLayer.on(MarkerLayerEvents.buttonClick, this.onButtonClick);\r\n        this.markerLayer.on(MarkerLayerEvents.modeChanged, this.onModeChanged);\r\n        this.markerLayer.on(MarkerLayerEvents.timeChanged, this.onTimeChanged);\r\n        this.map.once(\"click\", this.onMapClick);\r\n        this.updateUserTable();\r\n    }\r\n\r\n    onTimeChanged = ({ time }) => {\r\n        this.data.time = time;\r\n        this.updateRadiusLayer();\r\n    };\r\n\r\n    onModeChanged = ({ mode }) => {\r\n        this.data.mode = mode;\r\n        this.updateRadiusLayer();\r\n    };\r\n\r\n    onButtonClick = async () => {\r\n        await this.userApi.sendInfoAboutIncludedZones(this.data);\r\n    };\r\n\r\n    onRadiusChanged = ({ radius }) => {\r\n        this.data.radius = radius;\r\n        this.updateRadiusLayer();\r\n    };\r\n\r\n    onDragEndMarker = ({ lngLat }) => {\r\n        this.data.lngLat = lngLat;\r\n        this.updateRadiusLayer();\r\n    };\r\n\r\n    findZonesInRadius() {\r\n        const isTimeMode = this.data.mode === RadiusModes.time;\r\n        const isDistanceMode = this.data.mode === RadiusModes.distance;\r\n        const hasRadius = isDistanceMode && this.data.radius > 0;\r\n        const hasTime = isTimeMode && this.data.time > 0;\r\n\r\n        if (!this.data.lngLat || (!hasRadius && !hasTime)) {\r\n            this.data.zones = [];\r\n            this.updateUserTable();\r\n            return;\r\n        }\r\n\r\n        const zones = this.zoneControll.getZoneList();\r\n        const polygonData = this.isochroneLayer.getFeatureCollection();\r\n\r\n        const intersectedZones = zones.filter((zone) => {\r\n            if (isDistanceMode) return isZoneIntersectedRadius(this.data.radius, this.data.lngLat, zone.coordinates);\r\n            return isZoneIntersectedTime(polygonData, zone.coordinates);\r\n        });\r\n\r\n        this.data.zones = intersectedZones.map((el) => ({ name: el.name, id: el.id }));\r\n\r\n        this.updateUserTable();\r\n    }\r\n\r\n    async updateRadiusLayer() {\r\n        if (!this.data.lngLat) return;\r\n\r\n        if (this.data.mode === RadiusModes.time) {\r\n            if (this.radiusLayer) this.radiusLayer.remove();\r\n            await this.isochroneLayer.update(this.data.time, this.data.lngLat);\r\n        } else {\r\n            if (this.isochroneLayer) this.isochroneLayer.remove();\r\n            this.radiusLayer.update(this.data.radius, this.data.lngLat);\r\n        }\r\n\r\n        this.findZonesInRadius();\r\n    }\r\n\r\n    onMapClick = (e) => {\r\n        this.markerLayer.init(e.lngLat, this.data);\r\n        this.data.lngLat = e.lngLat;\r\n        this.itHasPoint = true;\r\n        this.updateRadiusLayer();\r\n        this.updateUserTable();\r\n    };\r\n}\r\n","import { DEFAULT_ZONE_LAYER_COLOR } from \"../utils/constants\";\r\nimport { getZoneLineByCoordinates } from \"../utils/zone-helpers\";\r\nimport { getZoneLineLayout, getZoneLinePaint } from \"../utils/map-helpers\";\r\n\r\nexport class ZoneStrokeLayer {\r\n    /**\r\n     *\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map, id, options) {\r\n        const color = (options && options.color) || DEFAULT_ZONE_LAYER_COLOR;\r\n        this.map = map;\r\n        this.layerId = `zone-stroke-layer-${id}`;\r\n        this.sourceId = `zone-stroke-source-${id}`;\r\n        this.id = id;\r\n        this.color = color;\r\n    }\r\n\r\n    update(coordinates) {\r\n        this.addSource(coordinates);\r\n        this.addLayer();\r\n    }\r\n\r\n    setColor(color) {\r\n        this.color = color;\r\n        this.map.setPaintProperty(this.layerId, \"line-color\", color);\r\n    }\r\n\r\n    addSource(coordinates) {\r\n        const data = getZoneLineByCoordinates(coordinates, this.id);\r\n        if (!data) return;\r\n\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"line\",\r\n            layout: getZoneLineLayout(),\r\n            paint: getZoneLinePaint(this.color),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import { getCenterZoneByCoordinates } from \"../utils/zone-helpers\";\r\n\r\nexport class ZoneNameLayer {\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map, id, options) {\r\n        this.name = options && options.name ? options.name : \" \";\r\n        this.map = map;\r\n        this.layerId = `zone-name-layer-${id}`;\r\n        this.sourceId = `zone-name-source-${id}`;\r\n        this.id = id;\r\n    }\r\n\r\n    updateName(name) {\r\n        this.name = name;\r\n        this.map.setLayoutProperty(this.layerId, \"text-field\", name);\r\n    }\r\n\r\n    update(coordinates) {\r\n        this.addSource(coordinates);\r\n        this.addLayer();\r\n    }\r\n\r\n    addSource(coordinates) {\r\n        const data = getCenterZoneByCoordinates(coordinates);\r\n        if (!data) return;\r\n\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            minzoom: 12,\r\n            type: \"symbol\",\r\n            layout: {\r\n                \"text-field\": this.name,\r\n                \"text-size\": [\"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 12, 12, 18, 46],\r\n            },\r\n            paint: {\r\n                \"text-color\": \"white\",\r\n            },\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import { getZonePolygonByCoordinates } from \"../utils/zone-helpers\";\r\nimport {\r\n    DEFAULT_ZONE_LAYER_COLOR,\r\n    HIGHLIGHTED_ZONE_LAYER_OPACITY,\r\n    DEFAULT_ZONE_LAYER_OPACITY,\r\n} from \"../utils/constants\";\r\nimport { ZoneStrokeLayer } from \"./zone-stroke-layer\";\r\nimport { ZoneNameLayer } from \"./zone-name-layer\";\r\nimport { getZonePolygonPaint } from \"../utils/map-helpers\";\r\n\r\nexport class ZoneLayer {\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map, id, options) {\r\n        this.map = map;\r\n        this.layerId = `zone-layer-${id}`;\r\n        this.sourceId = `zone-source-${id}`;\r\n        this.id = id;\r\n        this.color = (options && options.color) || DEFAULT_ZONE_LAYER_COLOR;\r\n        this.strokeLayer = new ZoneStrokeLayer(map, id, options);\r\n        this.nameLayer = new ZoneNameLayer(map, id, options);\r\n    }\r\n\r\n    update(coordinates, isEdit = false) {\r\n        this.addSource(coordinates);\r\n        this.addLayer();\r\n        this.strokeLayer.update(coordinates);\r\n        if (!isEdit) this.nameLayer.update(coordinates);\r\n    }\r\n\r\n    updateName(name) {\r\n        this.nameLayer.updateName(name);\r\n    }\r\n\r\n    setColor(color) {\r\n        this.color = color;\r\n        this.map.setPaintProperty(this.layerId, \"fill-color\", color);\r\n        this.strokeLayer.setColor(color);\r\n    }\r\n\r\n    addHighlight() {\r\n        this.map.setPaintProperty(this.layerId, \"fill-opacity\", HIGHLIGHTED_ZONE_LAYER_OPACITY);\r\n    }\r\n\r\n    removeHighlight() {\r\n        this.map.setPaintProperty(this.layerId, \"fill-opacity\", DEFAULT_ZONE_LAYER_OPACITY);\r\n    }\r\n\r\n    addSource(coordinates) {\r\n        const data = getZonePolygonByCoordinates(coordinates, this.id);\r\n        if (!data) return;\r\n\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"fill\",\r\n            paint: getZonePolygonPaint(this.color),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n        this.strokeLayer.remove();\r\n        this.nameLayer.remove();\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import { CONTROL_BUTTON_CLASS_NAME, CONTROL_BUTTON_ACTIVE_CLASS_NAME } from \"./constants\";\r\n\r\nexport function createControllButton(content, callback) {\r\n    const button = document.createElement(\"button\");\r\n    button.className = CONTROL_BUTTON_CLASS_NAME;\r\n    button.innerHTML = content;\r\n    button.addEventListener(\"click\", callback);\r\n    return button;\r\n}\r\n\r\nexport function removeActiveClassForButton(button) {\r\n    if (button.classList.contains(CONTROL_BUTTON_ACTIVE_CLASS_NAME)) {\r\n        button.classList.remove(CONTROL_BUTTON_ACTIVE_CLASS_NAME);\r\n    }\r\n}\r\n\r\nexport function addActiveClassForButton(button) {\r\n    if (!button.classList.contains(CONTROL_BUTTON_ACTIVE_CLASS_NAME)) {\r\n        button.classList.add(CONTROL_BUTTON_ACTIVE_CLASS_NAME);\r\n    }\r\n}\r\n","import { delay } from \"../utils/api-helpers\";\r\n\r\nexport class ZoneApi {\r\n    localStoragekey = \"mapZones\";\r\n\r\n    async getZoneList() {\r\n        await delay();\r\n        const zones = localStorage.getItem(this.localStoragekey);\r\n        if (!zones) return;\r\n        return JSON.parse(zones);\r\n    }\r\n\r\n    async addZone(zone) {\r\n        await delay();\r\n        let newZones = [];\r\n        const zones = await this.getZoneList();\r\n        if (zones) newZones = [...zones];\r\n        newZones.push(zone);\r\n        const string = JSON.stringify(newZones);\r\n        localStorage.setItem(this.localStoragekey, string);\r\n    }\r\n\r\n    async updateZone(zone) {\r\n        await delay();\r\n        const zones = await this.getZoneList();\r\n        if (!zones) return;\r\n        const newZones = zones.map((el) => {\r\n            if (el.id === zone.id) return zone;\r\n            return el;\r\n        });\r\n        const string = JSON.stringify(newZones);\r\n        localStorage.setItem(this.localStoragekey, string);\r\n    }\r\n\r\n    async deleteZone(id) {\r\n        await delay();\r\n        const zones = await this.getZoneList();\r\n        if (!zones) return;\r\n        const newZones = zones.filter((el) => el.id !== id);\r\n        const string = JSON.stringify(newZones);\r\n        localStorage.setItem(this.localStoragekey, string);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { POPUP_LABEL_CLASS_NAME, POPUP_INPUT_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const InputName = ({ name, onChange }) => {\r\n    return (\r\n        <>\r\n            <label htmlFor=\"popup-input-name\" className={POPUP_LABEL_CLASS_NAME}>\r\n                Enter zone name:\r\n            </label>\r\n            <br />\r\n            <input\r\n                type=\"text\"\r\n                id=\"popup-input-name\"\r\n                defaultValue={name || \" \"}\r\n                className={POPUP_INPUT_CLASS_NAME}\r\n                onChange={onChange}\r\n            />\r\n            <br />\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_COLOR_CLASS_NAME, POPUP_LABEL_CLASS_NAME, DEFAULT_ZONE_LAYER_COLOR } from \"../utils/constants\";\r\n\r\nexport const InputColor = ({ color, onChange }) => {\r\n    return (\r\n        <div className={POPUP_COLOR_CLASS_NAME}>\r\n            <label htmlFor=\"popup-input-color\" className={POPUP_LABEL_CLASS_NAME}>\r\n                Select zone color:\r\n            </label>\r\n            <input\r\n                type=\"color\"\r\n                id=\"popup-input-color\"\r\n                defaultValue={color || DEFAULT_ZONE_LAYER_COLOR}\r\n                onChange={onChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Popup } from \"./popup\";\r\nimport { InputName } from \"./input-name\";\r\nimport { InputColor } from \"./input-color\";\r\nimport { POPUP_CONTROLS_CLASS_NAME } from \"../utils/constants\";\r\nimport { PopupButton } from \"./popup-button\";\r\n\r\nexport const EditPopup = ({ name, onChangeName, color, onChangeColor, onClickEdit, onClickSave, onClickCancel }) => {\r\n    return (\r\n        <Popup>\r\n            <InputName name={name} onChange={onChangeName} />\r\n            <InputColor color={color} onChange={onChangeColor} />\r\n            <PopupButton text=\"Edit Geometry\" onClick={onClickEdit} />\r\n            <div className={POPUP_CONTROLS_CLASS_NAME}>\r\n                <PopupButton text=\"Cancel\" onClick={onClickCancel} />\r\n                <PopupButton text=\"Save\" onClick={onClickSave} />\r\n            </div>\r\n        </Popup>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Popup } from \"./popup\";\r\nimport { InputName } from \"./input-name\";\r\nimport { InputColor } from \"./input-color\";\r\nimport { POPUP_CONTROLS_CLASS_NAME } from \"../utils/constants\";\r\nimport { PopupButton } from \"./popup-button\";\r\n\r\nexport const CreatePopup = ({ name, color, onChangeName, onChangeColor, onClickCancel, onClickSave }) => {\r\n    return (\r\n        <Popup>\r\n            <InputName name={name} onChange={onChangeName} />\r\n            <InputColor color={color} onChange={onChangeColor} />\r\n            <div className={POPUP_CONTROLS_CLASS_NAME}>\r\n                <PopupButton text=\"Cancel\" onClick={onClickCancel} />\r\n                <PopupButton text=\"Save\" onClick={onClickSave} />\r\n            </div>\r\n        </Popup>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_TITLE_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const PopupTitle = ({ title }) => {\r\n    return <span className={POPUP_TITLE_CLASS_NAME}>{title || \" \"}</span>;\r\n};\r\n","import React from \"react\";\r\nimport { PopupTitle } from \"./popup-title\";\r\nimport { POPUP_CONTROLS_CLASS_NAME } from \"../utils/constants\";\r\nimport { Popup } from \"./popup\";\r\nimport { PopupButton } from \"./popup-button\";\r\n\r\nexport const DeletePopup = ({ name, onClickDelete, onClickCancel }) => {\r\n    return (\r\n        <Popup>\r\n            <PopupTitle title={`Do you want to delete a zone ${name}?`} />\r\n            <div className={POPUP_CONTROLS_CLASS_NAME}>\r\n                <PopupButton text=\"Cancel\" onClick={onClickCancel} />\r\n                <PopupButton text=\"Delete\" onClick={onClickDelete} />\r\n            </div>\r\n        </Popup>\r\n    );\r\n};\r\n","import { DEFAULT_ZONE_LAYER_COLOR } from \"../utils/constants\";\r\nimport { getDrawingLine } from \"../utils/zone-helpers\";\r\nimport { getZoneLineLayout, getZoneLinePaint } from \"../utils/map-helpers\";\r\n\r\nexport class DrawLayer {\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map, id, options) {\r\n        const color = (options && options.color) || DEFAULT_ZONE_LAYER_COLOR;\r\n        this.map = map;\r\n        this.layerId = `zone-stroke-layer-${id}`;\r\n        this.sourceId = `zone-stroke-source-${id}`;\r\n        this.id = id;\r\n        this.color = color;\r\n    }\r\n\r\n    update(coordinates) {\r\n        this.addSource(coordinates);\r\n        this.addLayer();\r\n    }\r\n\r\n    addSource(coordinates) {\r\n        const data = getDrawingLine(coordinates, this.id);\r\n        if (!data) return;\r\n\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"line\",\r\n            layout: getZoneLineLayout(),\r\n            paint: getZoneLinePaint(this.color),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import mapboxgl from \"mapbox-gl\";\r\nimport ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { ZoneLayer } from \"../layers/zone-layer\";\r\nimport { generateUniqueId, getDefaultZone, getCenterZoneCoorByCoordinates } from \"../utils/zone-helpers\";\r\nimport { getPlusIconSvg, getEditIconSvg, getDeleteIconSvg } from \"../utils/svg-helpers\";\r\nimport { enableMapInteraction, disableMapInteraction, setDefaultCursor, resetCursor } from \"../utils/map-helpers\";\r\nimport { createControllButton, removeActiveClassForButton, addActiveClassForButton } from \"../utils/dom-helpers\";\r\nimport { ZoneApi } from \"../api/zone-api\";\r\nimport { EditPopup } from \"../componets/edit-popup\";\r\nimport { CreatePopup } from \"../componets/create-popup\";\r\nimport { DeletePopup } from \"../componets/delete-popup\";\r\nimport { DrawLayer } from \"../layers/draw-layer\";\r\n\r\nexport class AdminControll {\r\n    isCreateMode = false;\r\n    isEditMode = false;\r\n    isDeleteMode = false;\r\n    deleteZoneId = null;\r\n    editZoneId = null;\r\n    cacheZone = null;\r\n    newZone = getDefaultZone();\r\n    zoneLayerPatternId = /zone-layer-\\w/i;\r\n\r\n    /**\r\n     * @param {import('./zone-controll').ZoneControll} zoneControll\r\n     */\r\n    constructor(zoneControll) {\r\n        this.zoneControll = zoneControll;\r\n        this.zoneApi = new ZoneApi();\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    onAdd(map) {\r\n        this.map = map;\r\n        this.container = document.createElement(\"div\");\r\n        this.container.className = \"mapboxgl-ctrl mapboxgl-ctrl-group\";\r\n        this.createButton = createControllButton(getPlusIconSvg(), this.onClickCreateButton);\r\n        this.deleteButton = createControllButton(getDeleteIconSvg(), this.onClickDeleteButton);\r\n        this.editButton = createControllButton(getEditIconSvg(), this.onClickEditButton);\r\n        this.container.appendChild(this.createButton);\r\n        this.container.appendChild(this.deleteButton);\r\n        this.container.appendChild(this.editButton);\r\n        return this.container;\r\n    }\r\n\r\n    onRemove() {\r\n        this.container.parentNode.removeChild(this.container);\r\n        this.disableAllModes();\r\n        this.map = undefined;\r\n    }\r\n\r\n    //#region Edit zone\r\n\r\n    onClickEditButton = () => {\r\n        if (this.isEditMode) return this.disableEditMode();\r\n        this.disableAllModes();\r\n        this.enableEditMode();\r\n    };\r\n\r\n    enableEditMode = () => {\r\n        addActiveClassForButton(this.editButton);\r\n        this.addCursorPointerListener();\r\n        if (this.map) this.map.on(\"click\", this.onClickEdit);\r\n        this.isEditMode = true;\r\n    };\r\n\r\n    disableEditMode = () => {\r\n        removeActiveClassForButton(this.editButton);\r\n        this.removeCursorPointerListener();\r\n        if (this.map) this.map.off(\"click\", this.onClickEdit);\r\n        this.cancelEditZone();\r\n        this.editZone = null;\r\n        this.isEditMode = false;\r\n    };\r\n\r\n    updateEditZoneLayer() {\r\n        if (!this.editZone || this.editZone.coordinates.length < 4) return;\r\n        this.drawEditLayer.update(this.editZone.coordinates);\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.MapMouseEvent & mapboxgl.EventData} e\r\n     */\r\n    onMouseUpEdit = (e) => {\r\n        if (this.map) this.map.off(\"mousemove\", this.onMouseMoveEdit);\r\n        if (this.editZone) this.showEditPopup(this.editZone.id);\r\n        this.drawEditLayer.remove();\r\n        if (this.editZone && this.editZone.coordinates.length > 4) {\r\n            this.zoneControll.updateZoneCoordinates(this.editZone.id, this.editZone.coordinates);\r\n        }\r\n        enableMapInteraction(this.map);\r\n        resetCursor(this.map);\r\n        this.addCursorPointerListener();\r\n\r\n    };\r\n\r\n    /**\r\n     * @param {mapboxgl.MapMouseEvent & mapboxgl.EventData} e\r\n     */\r\n    onMouseMoveEdit = (e) => {\r\n        if (!this.editZone) return;\r\n        this.editZone.coordinates.push(e.lngLat.toArray());\r\n        this.updateEditZoneLayer();\r\n    };\r\n\r\n    /**\r\n     * @param {mapboxgl.MapMouseEvent & mapboxgl.EventData} e\r\n     */\r\n    onMouseDownEdit = (e) => {\r\n        if (this.map) this.map.on(\"mousemove\", this.onMouseMoveEdit);\r\n        if (this.map) this.map.once(\"mouseup\", this.onMouseUpEdit);\r\n    };\r\n\r\n    onGeometryEdit = () => {\r\n        if (this.editPopup) this.editPopup.remove();\r\n        disableMapInteraction(this.map);\r\n        this.removeCursorPointerListener();\r\n        setDefaultCursor(this.map);\r\n        this.drawEditLayer = new DrawLayer(this.map, this.editZone.id, { color: this.editZone.color });\r\n        this.zoneControll.removeZoneLayer(this.editZone.id);\r\n        this.editZone.coordinates = [];\r\n        if (this.map) this.map.once(\"mousedown\", this.onMouseDownEdit);\r\n    };\r\n\r\n    cancelEditZone = () => {\r\n        this.zoneControll.drawZones();\r\n        if (this.editPopup) this.editPopup.remove();\r\n        this.editZone = null;\r\n    };\r\n\r\n    onSaveEdit = async () => {\r\n        await this.zoneControll.updateZone(this.editZone);\r\n\r\n        if (this.editPopup) this.editPopup.remove();\r\n        this.editZone = null;\r\n    };\r\n\r\n    editZoneColor = (e) => {\r\n        const color = e.target.value;\r\n        this.editZone.color = color;\r\n        this.zoneControll.updateZoneColor(this.editZone.id, color);\r\n    };\r\n\r\n    editZoneName = (e) => {\r\n        this.editZone.name = e.target.value;\r\n    };\r\n\r\n    showEditPopup() {\r\n        const coor = getCenterZoneCoorByCoordinates(this.editZone.coordinates);\r\n        if (!coor) return;\r\n\r\n        const popupContainer = document.createElement(\"div\");\r\n\r\n        this.editPopup = new mapboxgl.Popup({\r\n            closeButton: false,\r\n            closeOnClick: false,\r\n            closeOnMove: false,\r\n        })\r\n            .setLngLat(coor)\r\n            .setDOMContent(popupContainer)\r\n            .addTo(this.map);\r\n\r\n        ReactDOM.render(\r\n            <EditPopup\r\n                color={this.editZone.color}\r\n                name={this.editZone.name}\r\n                onChangeName={this.editZoneName}\r\n                onChangeColor={this.editZoneColor}\r\n                onClickCancel={this.cancelEditZone}\r\n                onClickSave={this.onSaveEdit}\r\n                onClickEdit={this.onGeometryEdit}\r\n            />,\r\n            popupContainer,\r\n        );\r\n    }\r\n\r\n    onClickEdit = (e) => {\r\n        const feature = this.getZoneFeatureByEvent(e);\r\n        if (!feature) return;\r\n        const zoneId = feature.properties.id;\r\n        if (this.editZone && zoneId === this.editZone.id) return;\r\n        if (this.editPopup) this.editPopup.remove();\r\n        const zone = this.zoneControll.getZoneById(zoneId);\r\n        this.editZone = _.cloneDeep(zone);\r\n        this.showEditPopup();\r\n    };\r\n\r\n    //#endregion\r\n\r\n    //#region Create zone\r\n\r\n    onClickCreateButton = () => {\r\n        if (this.isCreateMode) return this.disableCreateMode();\r\n        this.disableAllModes();\r\n        this.enableCreateMode();\r\n    };\r\n\r\n    enableCreateMode() {\r\n        this.newZone = getDefaultZone();\r\n        const id = generateUniqueId();\r\n        this.newZone.id = id;\r\n        if (this.map) this.drawlayer = new DrawLayer(this.map, id);\r\n        this.newZonelayer = new ZoneLayer(this.map, id);\r\n        if (this.map) this.map.once(\"mousedown\", this.onMouseDownCreate);\r\n        addActiveClassForButton(this.createButton);\r\n        disableMapInteraction(this.map);\r\n        setDefaultCursor(this.map);\r\n        this.isCreateMode = true;\r\n    }\r\n\r\n    disableCreateMode = () => {\r\n        this.newZone = getDefaultZone();\r\n        if (this.createPopup) this.createPopup.remove();\r\n        if (this.newZonelayer) this.newZonelayer.remove();\r\n        if (this.drawlayer) this.drawlayer.remove();\r\n        removeActiveClassForButton(this.createButton);\r\n        enableMapInteraction(this.map);\r\n        resetCursor(this.map);\r\n        this.isCreateMode = false;\r\n    };\r\n\r\n    setNewZoneName = (e) => {\r\n        this.newZone.name = e.target.value;\r\n    };\r\n\r\n    setNewZoneColor = (e) => {\r\n        this.newZone.color = e.target.value;\r\n        this.updateColorInNewZone();\r\n    };\r\n\r\n    createZone = () => {\r\n        const zone = _.cloneDeep(this.newZone);\r\n        this.zoneControll.createZone(zone);\r\n        this.onClickCreateButton();\r\n        this.createPopup.remove();\r\n        this.newZonelayer.remove();\r\n        this.drawlayer.remove();\r\n        this.newZone = getDefaultZone();\r\n    };\r\n\r\n    updateColorInNewZone() {\r\n        this.newZonelayer.setColor(this.newZone.color);\r\n    }\r\n\r\n    showCreatePopup() {\r\n        const coor = getCenterZoneCoorByCoordinates(this.newZone.coordinates);\r\n        if (!coor) return;\r\n        const popupContainer = document.createElement(\"div\");\r\n        this.createPopup = new mapboxgl.Popup({\r\n            closeButton: false,\r\n            closeOnClick: false,\r\n            closeOnMove: false,\r\n        })\r\n            .setLngLat(coor)\r\n            .setDOMContent(popupContainer)\r\n            .addTo(this.map);\r\n\r\n        const name = this.zoneControll.getNewZoneName();\r\n        this.newZone.name = name;\r\n        ReactDOM.render(\r\n            <CreatePopup\r\n                name={name}\r\n                color={null}\r\n                onChangeName={this.setNewZoneName}\r\n                onChangeColor={this.setNewZoneColor}\r\n                onClickCancel={this.disableCreateMode}\r\n                onClickSave={this.createZone}\r\n            />,\r\n            popupContainer,\r\n        );\r\n    }\r\n\r\n    updateNewZoneLayer() {\r\n        if (this.newZone.coordinates.length < 4) return;\r\n        this.drawlayer.update(this.newZone.coordinates, true);\r\n    }\r\n\r\n    onMouseUpCreate = (e) => {\r\n        this.map.off(\"mousemove\", this.onMouseMoveCreate);\r\n        this.showCreatePopup();\r\n        if (this.drawlayer) this.drawlayer.remove();\r\n        if (this.newZonelayer) this.newZonelayer.update(this.newZone.coordinates, true);\r\n    };\r\n\r\n    onMouseMoveCreate = (e) => {\r\n        this.newZone.coordinates.push(e.lngLat.toArray());\r\n        this.updateNewZoneLayer();\r\n    };\r\n\r\n    onMouseDownCreate = (e) => {\r\n        this.newZone.coordinates.push(e.lngLat.toArray());\r\n        if (this.map) this.map.on(\"mousemove\", this.onMouseMoveCreate);\r\n        if (this.map) this.map.once(\"mouseup\", this.onMouseUpCreate);\r\n    };\r\n\r\n    //#endregion\r\n\r\n    //#region Delete zone\r\n\r\n    onClickDeleteButton = () => {\r\n        if (this.isDeleteMode) return this.disableDeleteMode();\r\n        this.disableAllModes();\r\n        this.enableDeletetingMode();\r\n    };\r\n\r\n    enableDeletetingMode() {\r\n        if (this.map) this.map.on(\"click\", this.onClickDeleteZone);\r\n        addActiveClassForButton(this.deleteButton);\r\n        this.addCursorPointerListener();\r\n        this.isDeleteMode = true;\r\n    }\r\n\r\n    disableDeleteMode() {\r\n        if (this.map) this.map.off(\"click\", this.onClickDeleteZone);\r\n        removeActiveClassForButton(this.deleteButton);\r\n\r\n        if (this.deletePopup) {\r\n            this.deletePopup.remove();\r\n            this.deletePopup = null;\r\n        }\r\n\r\n        this.removeCursorPointerListener();\r\n        this.isDeleteMode = false;\r\n        this.deleteZoneId = null;\r\n    }\r\n\r\n    cancelDeleteZone = () => {\r\n        this.deletePopup.remove();\r\n        this.deleteZoneId = null;\r\n    };\r\n\r\n    deleteZone = async () => {\r\n        await this.zoneControll.deleteZone(this.deleteZoneId);\r\n        this.deletePopup.remove();\r\n        this.deleteZoneId = null;\r\n    };\r\n\r\n    showDeletePopup(zoneId) {\r\n        const zone = this.zoneControll.getZoneById(zoneId);\r\n        if (!zone) return;\r\n        const coor = getCenterZoneCoorByCoordinates(zone.coordinates);\r\n        if (!coor) return;\r\n        const popupContainer = document.createElement(\"div\");\r\n        this.deletePopup = new mapboxgl.Popup({\r\n            closeButton: false,\r\n            closeOnClick: false,\r\n            closeOnMove: false,\r\n        })\r\n            .setLngLat(coor)\r\n            .setDOMContent(popupContainer)\r\n            .addTo(this.map);\r\n\r\n        ReactDOM.render(\r\n            <DeletePopup name={zone.name} onClickCancel={this.cancelDeleteZone} onClickDelete={this.deleteZone} />,\r\n            popupContainer,\r\n        );\r\n    }\r\n\r\n    onClickDeleteZone = (e) => {\r\n        const feature = this.getZoneFeatureByEvent(e);\r\n        if (!feature) return;\r\n        const zoneId = feature.properties.id;\r\n        if (zoneId === this.deleteZoneId) return;\r\n        if (this.deletePopup) this.deletePopup.remove();\r\n        this.showDeletePopup(zoneId);\r\n        this.deleteZoneId = zoneId;\r\n    };\r\n\r\n    //#endregion\r\n\r\n    //#region Utils\r\n\r\n    cursorListener = (e) => {\r\n        const feature = this.getZoneFeatureByEvent(e);\r\n        if (feature) {\r\n            this.map.getCanvas().style.cursor = \"pointer\";\r\n        } else {\r\n            this.map.getCanvas().style.cursor = \"\";\r\n        }\r\n    };\r\n\r\n    addCursorPointerListener() {\r\n        this.map.on(\"mousemove\", this.cursorListener);\r\n    }\r\n\r\n    removeCursorPointerListener() {\r\n        this.map.off(\"mousemove\", this.cursorListener);\r\n    }\r\n\r\n    disableAllModes() {\r\n        if (this.isEditMode) this.disableEditMode();\r\n        if (this.isDeleteMode) this.disableDeleteMode();\r\n        if (this.isCreateMode) this.disableCreateMode();\r\n    }\r\n\r\n    getZoneFeatureByEvent(e) {\r\n        const features = this.map.queryRenderedFeatures(e.point);\r\n        if (!features.length) return;\r\n        const feature = features.shift();\r\n        if (!feature) return;\r\n        if (feature.layer.id.match(this.zoneLayerPatternId)) return feature;\r\n    }\r\n\r\n    //#endregion\r\n}\r\n","export function getDeleteIconSvg() {\r\n    return `\r\n\t<svg version=\"1.1\" viewBox=\"0 0 384 384\">\r\n\t\t<path\r\n\t\td=\"M64,341.333C64,364.907,83.093,384,106.667,384h170.667C300.907,384,320,364.907,320,341.333v-256H64V341.333z\" />\r\n\t\t<polygon\r\n\t\tpoints=\"266.667,21.333 245.333,0 138.667,0 117.333,21.333 42.667,21.333 42.667,64 341.333,64 341.333,21.333 \t\t\t\" />\r\n\t</svg>\r\n\t`;\r\n}\r\n\r\nexport function getEditIconSvg() {\r\n    return `\r\n\t<svg version=\"1.1\" viewBox=\"0 0 383.947 383.947\">\r\n\t\t<polygon points=\"0,303.947 0,383.947 80,383.947 316.053,147.893 236.053,67.893\" />\r\n\t\t<path\r\n\t\td=\"M377.707,56.053L327.893,6.24c-8.32-8.32-21.867-8.32-30.187,0l-39.04,39.04l80,80l39.04-39.04C386.027,77.92,386.027,64.373,377.707,56.053z\" />\r\n\t</svg>\r\n\t`;\r\n}\r\n\r\nexport function getPlusIconSvg() {\r\n    return `\r\n\t<svg version=\"1.1\" viewBox=\"0 0 42 42\">\r\n\t\t<path d=\"M37.059,16H26V4.941C26,2.224,23.718,0,21,0s-5,2.224-5,4.941V16H4.941C2.224,16,0,18.282,0,21s2.224,5,4.941,5H16v11.059\r\n\t\tC16,39.776,18.282,42,21,42s5-2.224,5-4.941V26h11.059C39.776,26,42,23.718,42,21S39.776,16,37.059,16z\" />\r\n\t</svg>\r\n\t`;\r\n}\r\n","import { ZoneApi } from \"../api/zone-api\";\r\nimport { ZoneLayer } from \"../layers/zone-layer\";\r\n\r\nexport class ZoneControll {\r\n    zones = [];\r\n    selectedZones = [];\r\n    zoneApi = new ZoneApi();\r\n    layers = new Map();\r\n\r\n    constructor(selectedZones) {\r\n        this.selectedZones = selectedZones;\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    onAdd(map) {\r\n        this.map = map;\r\n        this.container = document.createElement(\"div\");\r\n        this.container.className = \"mapboxgl-ctrl\";\r\n        map.on(\"load\", this.init);\r\n        return this.container;\r\n    }\r\n\r\n    onRemove() {\r\n        this.container.parentNode.removeChild(this.container);\r\n        this.map = undefined;\r\n    }\r\n\r\n    init = async () => {\r\n        const zones = await this.zoneApi.getZoneList();\r\n        if (!zones) return;\r\n        this.zones = zones;\r\n        this.drawZones();\r\n    };\r\n\r\n    updateSelectedZones(selectedZones) {\r\n        this.selectedZones = selectedZones;\r\n        this.drawZones();\r\n    }\r\n\r\n    async deleteZone(zoneId) {\r\n        await this.zoneApi.deleteZone(zoneId);\r\n        this.zones = this.zones.filter((zone) => zone.id !== zoneId);\r\n        const layer = this.layers.get(zoneId);\r\n        if (!layer) return;\r\n        layer.remove();\r\n        this.layers.delete(zoneId);\r\n    }\r\n\r\n    async updateZone(newZone) {\r\n        await this.zoneApi.updateZone(newZone);\r\n\r\n        this.zones = this.zones.map((el) => {\r\n            if (el.id === newZone.id) return newZone;\r\n            return el;\r\n        });\r\n\r\n        this.drawZones();\r\n    }\r\n\r\n    async createZone(newZone) {\r\n        await this.zoneApi.addZone(newZone);\r\n        this.zones.push(newZone);\r\n        this.drawZones();\r\n    }\r\n\r\n    getZoneList() {\r\n        return this.zones;\r\n    }\r\n\r\n    getZoneById(zoneId) {\r\n        return this.zones.find((el) => el.id === zoneId);\r\n    }\r\n\r\n    updateZoneColor(zoneId, color) {\r\n        const layer = this.layers.get(zoneId);\r\n        if (!layer) return;\r\n        layer.setColor(color);\r\n    }\r\n\r\n    updateZoneCoordinates(zoneId, coordinates) {\r\n        const layer = this.layers.get(zoneId);\r\n        if (!layer) return;\r\n        layer.update(coordinates, true);\r\n    }\r\n\r\n    removeZoneLayer(zoneId) {\r\n        const layer = this.layers.get(zoneId);\r\n        if (layer) layer.remove();\r\n    }\r\n\r\n    getNewZoneName() {\r\n        return `Zone ${this.zones.length + 1}`;\r\n    }\r\n\r\n    drawZones() {\r\n        this.zones.forEach((zone) => {\r\n            const existLayer = this.layers.get(zone.id);\r\n            if (existLayer) {\r\n                existLayer.update(zone.coordinates);\r\n                existLayer.setColor(zone.color);\r\n                existLayer.updateName(zone.name);\r\n                if (this.selectedZones.includes(zone.id)) {\r\n                    existLayer.addHighlight();\r\n                } else {\r\n                    existLayer.removeHighlight();\r\n                }\r\n            } else {\r\n                const layer = new ZoneLayer(this.map, zone.id, { color: zone.color, name: zone.name });\r\n                layer.update(zone.coordinates);\r\n                if (this.selectedZones.includes(zone.id)) layer.addHighlight();\r\n                this.layers.set(zone.id, layer);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport _ from \"lodash\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport { UserControll } from \"./controls/user-controll\";\r\nimport { AdminControll } from \"./controls/admin-controll\";\r\nimport { ZoneControll } from \"./controls/zone-controll\";\r\nimport { MAP_ID } from \"./utils/constants\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport \"./index.scss\";\r\n\r\n/** Collection of cities coordinates */\r\nexport const Cities = {\r\n    Bengaluru: new mapboxgl.LngLat(77.59094323372614, 12.975557791300176),\r\n};\r\n\r\n/**\r\n * Map with Zones Component\r\n *\r\n * @typedef {object} Props\r\n * @property {string} mapToken - Mapbox token (https://docs.mapbox.com/help/how-mapbox-works/access-tokens/)\r\n * @property {string} mapStyle - Mapbox map style (https://docs.mapbox.com/vector-tiles/reference/)\r\n * @property {boolean} isAdmin - Selecting the use mode Admin or User\r\n * @property {mapboxgl.LngLat} cityCoor - Сity coordinates\r\n * @property {Array<string>} selectedZones - Selected zones ID which will be highlighted on the map\r\n *\r\n * @extends {React.Component<Props>}\r\n */\r\nexport class MapWithZones extends React.Component {\r\n    componentDidMount() {\r\n        const { mapStyle, mapToken, isAdmin, cityCoor, selectedZones } = this.props;\r\n\r\n        mapboxgl.accessToken = mapToken;\r\n\r\n        this.map = new mapboxgl.Map({\r\n            container: MAP_ID,\r\n            style: mapStyle,\r\n            center: cityCoor,\r\n            zoom: 12,\r\n        });\r\n\r\n        this.zoneControll = new ZoneControll(selectedZones);\r\n        this.map.addControl(this.zoneControll);\r\n        this.userControll = new UserControll(this.zoneControll);\r\n        this.adminControll = new AdminControll(this.zoneControll);\r\n\r\n        if (isAdmin) {\r\n            this.map.addControl(this.adminControll);\r\n        } else {\r\n            this.map.addControl(this.userControll);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { isAdmin, selectedZones } = this.props;\r\n\r\n        if (isAdmin !== prevProps.isAdmin) {\r\n            if (!this.map) return;\r\n            if (isAdmin) {\r\n                this.map.removeControl(this.userControll);\r\n                this.map.addControl(this.adminControll);\r\n            } else {\r\n                this.map.removeControl(this.adminControll);\r\n                this.map.addControl(this.userControll);\r\n            }\r\n        }\r\n\r\n        if (!_.isEqual(selectedZones, prevProps.selectedZones)) {\r\n            this.zoneControll.updateSelectedZones(selectedZones);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div id={MAP_ID} />;\r\n    }\r\n}\r\n\r\nMapWithZones.defaultProps = {\r\n    mapStyle: \"mapbox://styles/mapbox/streets-v11\",\r\n    isAdmin: false,\r\n    cityCoor: Cities.Bengaluru,\r\n    selectedZones: [],\r\n};\r\n\r\nMapWithZones.propTypes = {\r\n    mapToken: PropTypes.string.isRequired,\r\n    mapStyle: PropTypes.string,\r\n    isAdmin: PropTypes.bool,\r\n    cityCoor: PropTypes.instanceOf(mapboxgl.LngLat),\r\n    selectedZones: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { ZoneApi } from \"../api/zone-api\";\r\n\r\nexport const ZonesList = ({ selectedZones, setSelectedZones }) => {\r\n    const [zones, setZones] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const zoneApi = new ZoneApi();\r\n        const getZones = async () => {\r\n            const zones = await zoneApi.getZoneList();\r\n            if (zones) setZones(zones);\r\n        };\r\n        getZones();\r\n    }, []);\r\n\r\n    const onChange = (e) => {\r\n        const id = e.target.value;\r\n        let newSelected = [];\r\n        if (selectedZones.includes(id)) {\r\n            newSelected = selectedZones.filter((el) => el !== id);\r\n        } else {\r\n            newSelected = [...selectedZones, id];\r\n        }\r\n        setSelectedZones(newSelected);\r\n    };\r\n\r\n    return (\r\n        <div className=\"test-zone-list\">\r\n            Zones list:\r\n            {zones.map((zone) => {\r\n                return (\r\n                    <label key={zone.id}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={selectedZones.includes(zone.id)}\r\n                            value={zone.id}\r\n                            onChange={onChange}\r\n                        ></input>\r\n                        {zone.name}\r\n                    </label>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\nimport { MapWithZones } from \"./map-with-zones\";\nimport \"./App.scss\";\nimport { ZonesList } from \"./map-with-zones/componets/zones-list\";\n\nconst App = () => {\n    const [mode, setMode] = useState(\"user\");\n    const [selectedZones, setSelectedZones] = useState([]);\n\n    return (\n        <div className=\"App\">\n            <div className=\"test-panel\">\n                <button\n                    onClick={() => setMode(\"admin\")}\n                    className={mode === \"admin\" ? \"test-panel__button-active\" : \"\"}\n                >\n                    ADMIN MODE\n                </button>\n                <button onClick={() => setMode(\"user\")} className={mode === \"user\" ? \"test-panel__button-active\" : \"\"}>\n                    USER MODE\n                </button>\n                <button\n                    onClick={() => setMode(\"highlight\")}\n                    className={mode === \"highlight\" ? \"test-panel__button-active\" : \"\"}\n                >\n                    HIGHLIGHT ZONE\n                </button>\n            </div>\n            {mode === \"highlight\" && <ZonesList selectedZones={selectedZones} setSelectedZones={setSelectedZones} />}\n            <MapWithZones\n                mapToken={process.env.REACT_APP_MAPBOX_TOKEN}\n                isAdmin={mode === \"admin\"}\n                selectedZones={selectedZones}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}