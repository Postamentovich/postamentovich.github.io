{"version":3,"sources":["map-with-zones/utils/constants.js","map-with-zones/componets/input-radius.jsx","map-with-zones/componets/popup.jsx","map-with-zones/componets/popup-button.jsx","map-with-zones/componets/radius-mode.jsx","map-with-zones/componets/input-time.jsx","map-with-zones/componets/radius-popup.jsx","map-with-zones/layers/marker-layer.js","map-with-zones/utils/zone-helpers.js","map-with-zones/utils/map-helpers.js","map-with-zones/layers/radius-stroke-layer.js","map-with-zones/layers/radius-layer.js","map-with-zones/utils/api-helpers.js","map-with-zones/api/user-api.js","map-with-zones/componets/zone-table.jsx","map-with-zones/api/mapbox-api.js","map-with-zones/layers/isochrone-stroke-layer.js","map-with-zones/layers/isochrone-layer.js","map-with-zones/controls/user-controll.js","map-with-zones/layers/zone-stroke-layer.js","map-with-zones/layers/zone-name-layer.js","map-with-zones/layers/zone-layer.js","map-with-zones/utils/dom-helpers.js","map-with-zones/api/zone-api.js","map-with-zones/componets/input-name.jsx","map-with-zones/componets/color-picker.jsx","map-with-zones/componets/input-color.jsx","map-with-zones/componets/edit-popup.jsx","map-with-zones/componets/create-popup.jsx","map-with-zones/componets/popup-title.jsx","map-with-zones/componets/delete-popup.jsx","map-with-zones/layers/draw-layer.js","map-with-zones/controls/admin-controll.js","map-with-zones/utils/svg-helpers.js","map-with-zones/controls/zone-controll.js","map-with-zones/index.jsx","map-with-zones/componets/zones-list.jsx","App.js","serviceWorker.js","index.js"],"names":["RadiusModes","DEFAULT_MODE","MAP_ID","CONTROL_BUTTON_CLASS_NAME","CONTROL_BUTTON_ACTIVE_CLASS_NAME","POPUP_BUTTON_CLASS_NAME","POPUP_INPUT_CLASS_NAME","POPUP_LABEL_CLASS_NAME","POPUP_TITLE_CLASS_NAME","POPUP_COLOR_CLASS_NAME","POPUP_RADIUS_MODE_CLASS_NAME","POPUP_CONTROLS_CLASS_NAME","TABLE_TITLE_CLASS_NAME","TABLE_ZONES_CLASS_NAME","InputRadius","radius","onChange","htmlFor","className","type","id","defaultValue","Popup","children","PopupButton","text","onClick","RadiusMode","mode","onChangeMode","value","name","checked","InputTime","time","max","RadiusPopup","onChangeRadius","onClickSelect","onChangeTime","useState","stateMode","setMode","handleChangeMode","useCallback","e","target","stateRadius","setRadius","handleChangeRadius","stateTime","setTime","handleChangeTime","MarkerLayerEvents","MarkerLayer","map","radiusInputId","radiusButtonId","fire","onTimeChange","Number","onRadiusChange","onDragEnd","lngLat","marker","getLngLat","onButtonClick","mapboxgl","Marker","draggable","popupContainer","document","createElement","popup","closeButton","closeOnClick","closeOnMove","setDOMContent","this","remove","coor","initData","setLngLat","toArray","setPopup","addTo","togglePopup","on","ReactDOM","render","Evented","getDefaultUserData","zones","getCenterZoneByCoordinates","coordinates","simlified","getDrawingLine","turf","getCenterZoneCoorByCoordinates","center","length","line","tolerance","highQuality","enableMapInteraction","dragPan","enable","boxZoom","scrollZoom","dragRotate","doubleClickZoom","touchZoomRotate","touchPitch","disableMapInteraction","disable","setDefaultCursor","getCanvas","style","cursor","resetCursor","getZoneLinePaint","color","RadiusStrokeLayer","layerId","sourceId","addSource","addLayer","data","circle","getLineByRadius","source","getSource","setData","gerLayer","layout","paint","removeLayer","removeSource","getLayer","RadiusLayer","strokeLayer","update","getCircleByRadius","delay","a","Promise","resolve","setTimeout","UserApi","info","console","log","ZoneTable","itHasPoint","zone","key","CancelToken","axios","cancelFetch","MapboxApi","minutes","cancelIsochroneFetch","url","lng","lat","accessToken","get","cancelToken","c","error","IsochroneStrokeLayer","polygonData","coords","getLineByPolygonData","IsochroneLayer","mapboxApi","getIsochrone","UserControll","zoneControll","radiusMode","onTimeChanged","updateRadiusLayer","onModeChanged","userApi","sendInfoAboutIncludedZones","onRadiusChanged","onDragEndMarker","onMapClick","markerLayer","init","updateUserTable","container","table","mapElement","getElementById","appendChild","enableUserMode","disableUserMode","parentNode","removeChild","undefined","radiusLayer","isochroneLayer","off","removeUserTable","unmountComponentAtNode","once","isTimeMode","isDistanceMode","hasRadius","hasTime","getZoneList","getFeatureCollection","intersectedZones","filter","zoneCoordinates","point","isZoneIntersectedRadius","timePolygon","timeFeature","features","nearestPoint","pointsInPolygon","isZoneIntersectedTime","el","findZonesInRadius","ZoneStrokeLayer","options","setPaintProperty","geometry","polygon","getZoneLineByCoordinates","ZoneNameLayer","setLayoutProperty","minzoom","ZoneLayer","nameLayer","isEdit","updateName","setColor","getZonePolygonByCoordinates","createControllButton","content","callback","button","innerHTML","addEventListener","removeActiveClassForButton","classList","contains","addActiveClassForButton","add","ZoneApi","localStoragekey","localStorage","getItem","JSON","parse","newZones","push","string","stringify","setItem","InputName","ColorPicker","props","handleClick","setState","displayColorPicker","state","handleClose","handleChange","hex","backgroundColor","React","Component","InputColor","EditPopup","onChangeName","onChangeColor","onClickEdit","onClickSave","onClickCancel","CreatePopup","PopupTitle","title","DeletePopup","onClickDelete","DrawLayer","AdminControll","isCreateMode","isEditMode","isDeleteMode","deleteZoneId","editZoneId","cacheZone","newZone","zoneLayerPatternId","onClickEditButton","disableEditMode","disableAllModes","enableEditMode","editButton","addCursorPointerListener","removeCursorPointerListener","cancelEditZone","editZone","onMouseUpEdit","onMouseMoveEdit","showEditPopup","drawEditLayer","updateZoneCoordinates","updateEditZoneLayer","onMouseDownEdit","onGeometryEdit","editPopup","removeZoneLayer","drawZones","onSaveEdit","updateZone","editZoneColor","updateZoneColor","editZoneName","feature","getZoneFeatureByEvent","zoneId","properties","getZoneById","_","cloneDeep","onClickCreateButton","disableCreateMode","enableCreateMode","createPopup","newZonelayer","drawlayer","createButton","setNewZoneName","setNewZoneColor","updateColorInNewZone","createZone","onMouseUpCreate","onMouseMoveCreate","showCreatePopup","updateNewZoneLayer","onMouseDownCreate","onClickDeleteButton","disableDeleteMode","enableDeletetingMode","cancelDeleteZone","deletePopup","deleteZone","onClickDeleteZone","showDeletePopup","cursorListener","zoneApi","deleteButton","Date","now","toString","Math","random","substr","getNewZoneName","queryRenderedFeatures","shift","layer","match","ZoneControll","selectedZones","layers","Map","delete","addZone","find","forEach","existLayer","includes","addHighlight","removeHighlight","set","Cities","Bengaluru","LngLat","MapWithZones","mapStyle","mapToken","isAdmin","cityCoor","zoom","addControl","userControll","adminControll","prevProps","removeControl","isEqual","updateSelectedZones","defaultProps","ZonesList","setSelectedZones","setZones","useEffect","getZones","newSelected","App","process","Boolean","window","location","hostname","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.01203c54.chunk.js","sourcesContent":["export const RadiusModes = {\r\n    time: \"time\",\r\n    distance: \"distance\",\r\n};\r\nexport const DEFAULT_ZONE_LAYER_OPACITY = 0.3;\r\nexport const HIGHLIGHTED_ZONE_LAYER_OPACITY = 0.8;\r\nexport const DEFAULT_ZONE_LAYER_COLOR = \"#008888\";\r\nexport const DEFAULT_RADIUS_LAYER_COLOR = \"#292828\";\r\nexport const DEFAULT_RADIUS = 1;\r\nexport const DEFAULT_TIME = 10;\r\nexport const DEFAULT_MODE = RadiusModes.time;\r\nexport const MAP_ID = \"mapbox-container-element-id\";\r\nexport const CONTROL_BASE_CLASS_NAME = \"map-controll\";\r\nexport const CONTROL_BUTTON_CLASS_NAME = `${CONTROL_BASE_CLASS_NAME}__button`;\r\nexport const CONTROL_BUTTON_ACTIVE_CLASS_NAME = `${CONTROL_BUTTON_CLASS_NAME}_active`;\r\nexport const POPUP_BASE_CLASS_NAME = \"map-popup\";\r\nexport const POPUP_BUTTON_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__button`;\r\nexport const POPUP_INPUT_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__input`;\r\nexport const POPUP_LABEL_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__label`;\r\nexport const POPUP_TITLE_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__title`;\r\nexport const POPUP_COLOR_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__color`;\r\nexport const POPUP_RADIUS_MODE_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__radius-mode`;\r\nexport const POPUP_CONTROLS_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__controls`;\r\nexport const TABLE_BASE_CLASS_NAME = \"map-table\";\r\nexport const TABLE_TITLE_CLASS_NAME = `${TABLE_BASE_CLASS_NAME}__title`;\r\nexport const TABLE_ZONES_CLASS_NAME = `${TABLE_BASE_CLASS_NAME}__zones`;\r\n","import React from \"react\";\r\nimport { POPUP_LABEL_CLASS_NAME, POPUP_INPUT_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const InputRadius = ({ radius, onChange }) => {\r\n    return (\r\n        <>\r\n            <label htmlFor=\"popup-input-radius\" className={POPUP_LABEL_CLASS_NAME}>\r\n                Enter radius (km):\r\n            </label>\r\n            <br />\r\n            <input\r\n                type=\"number\"\r\n                id=\"popup-input-radius\"\r\n                defaultValue={radius || 0}\r\n                className={POPUP_INPUT_CLASS_NAME}\r\n                onChange={onChange}\r\n            />\r\n            <br />\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_BASE_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const Popup = ({ children }) => {\r\n    return <div className={POPUP_BASE_CLASS_NAME}>{children}</div>;\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_BUTTON_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const PopupButton = ({ text, onClick }) => {\r\n    return (\r\n        <button className={POPUP_BUTTON_CLASS_NAME} onClick={onClick} type=\"button\">\r\n            {text || \" \"}\r\n        </button>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_RADIUS_MODE_CLASS_NAME, RadiusModes } from \"../utils/constants\";\r\n\r\nexport const RadiusMode = ({ mode, onChangeMode }) => {\r\n    return (\r\n        <div className={POPUP_RADIUS_MODE_CLASS_NAME}>\r\n            <label htmlFor=\"radius-mode-time\">Time</label>\r\n            <input\r\n                type=\"radio\"\r\n                id=\"radius-mode-time\"\r\n                value={RadiusModes.time}\r\n                name=\"radius-mode\"\r\n                checked={mode === RadiusModes.time}\r\n                onChange={onChangeMode}\r\n            />\r\n            <label htmlFor=\"radius-mode-distance\">Distance</label>\r\n            <input\r\n                type=\"radio\"\r\n                id=\"radius-mode-distance\"\r\n                value={RadiusModes.distance}\r\n                name=\"radius-mode\"\r\n                checked={mode === RadiusModes.distance}\r\n                onChange={onChangeMode}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_LABEL_CLASS_NAME, POPUP_INPUT_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const InputTime = ({ time, onChange }) => {\r\n    return (\r\n        <>\r\n            <label htmlFor=\"popup-input-time\" className={POPUP_LABEL_CLASS_NAME}>\r\n                Enter time (min):\r\n            </label>\r\n            <br />\r\n            <input\r\n                type=\"number\"\r\n                id=\"popup-input-time\"\r\n                defaultValue={time || 0}\r\n                className={POPUP_INPUT_CLASS_NAME}\r\n                onChange={onChange}\r\n                max={60}\r\n            />\r\n            <br />\r\n        </>\r\n    );\r\n};\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { InputRadius } from \"./input-radius\";\r\nimport { Popup } from \"./popup\";\r\nimport { PopupButton } from \"./popup-button\";\r\nimport { POPUP_CONTROLS_CLASS_NAME, RadiusModes } from \"../utils/constants\";\r\nimport { RadiusMode } from \"./radius-mode\";\r\nimport { InputTime } from \"./input-time\";\r\n\r\nexport const RadiusPopup = ({ radius, onChangeRadius, onClickSelect, onChangeMode, time, onChangeTime, mode }) => {\r\n    const [stateMode, setMode] = useState(mode);\r\n    const handleChangeMode = useCallback(\r\n        (e) => {\r\n            setMode(e.target.value);\r\n            onChangeMode(e);\r\n        },\r\n        [onChangeMode],\r\n    );\r\n    const [stateRadius, setRadius] = useState(radius);\r\n    const handleChangeRadius = useCallback(\r\n        (e) => {\r\n            setRadius(e.target.value);\r\n            onChangeRadius(e);\r\n        },\r\n        [onChangeRadius],\r\n    );\r\n    const [stateTime, setTime] = useState(time);\r\n    const handleChangeTime = useCallback(\r\n        (e) => {\r\n            setTime(e.target.value);\r\n            onChangeTime(e);\r\n        },\r\n        [onChangeTime],\r\n    );\r\n    return (\r\n        <Popup>\r\n            <RadiusMode mode={stateMode} onChangeMode={handleChangeMode} />\r\n            {stateMode === RadiusModes.time && <InputTime time={stateTime} onChange={handleChangeTime} />}\r\n            {stateMode === RadiusModes.distance && <InputRadius radius={stateRadius} onChange={handleChangeRadius} />}\r\n            <div className={POPUP_CONTROLS_CLASS_NAME}>\r\n                <PopupButton text=\"Select\" onClick={onClickSelect} />\r\n            </div>\r\n        </Popup>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RadiusPopup } from \"../componets/radius-popup\";\r\n\r\nexport const MarkerLayerEvents = {\r\n    dragend: \"dragend\",\r\n    radiusChanged: \"radiusChanged\",\r\n    buttonClick: \"buttonClick\",\r\n    modeChanged: \"modeChanged\",\r\n    timeChanged: \"timeChanged\",\r\n};\r\n\r\nexport class MarkerLayer extends mapboxgl.Evented {\r\n    radiusInputId = \"marker-input-radius\";\r\n    radiusButtonId = \"marker-button-radius\";\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    constructor(map) {\r\n        super();\r\n        this.map = map;\r\n\r\n        this.marker = new mapboxgl.Marker({\r\n            draggable: true,\r\n        });\r\n\r\n        this.popupContainer = document.createElement(\"div\");\r\n        this.popup = new mapboxgl.Popup({ closeButton: false, closeOnClick: false, closeOnMove: false }).setDOMContent(\r\n            this.popupContainer,\r\n        );\r\n    }\r\n\r\n    remove() {\r\n        if (this.marker) this.marker.remove();\r\n        if (this.popup) this.popup.remove();\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.LngLat} coor\r\n     */\r\n    init(coor, initData) {\r\n        this.marker.setLngLat(coor.toArray());\r\n        this.marker.setPopup(this.popup);\r\n        this.marker.addTo(this.map);\r\n        this.marker.togglePopup();\r\n        this.marker.on(\"dragend\", this.onDragEnd);\r\n        ReactDOM.render(\r\n            <RadiusPopup\r\n                radius={initData.radius}\r\n                time={initData.time}\r\n                mode={initData.mode}\r\n                onChangeRadius={this.onRadiusChange}\r\n                onClickSelect={this.onButtonClick}\r\n                onChangeMode={this.onChangeMode}\r\n                onChangeTime={this.onTimeChange}\r\n            />,\r\n            this.popupContainer,\r\n        );\r\n    }\r\n\r\n    onChangeMode = (e) => {\r\n        this.fire(MarkerLayerEvents.modeChanged, { mode: e.target.value });\r\n    };\r\n\r\n    onTimeChange = (e) => {\r\n        this.fire(MarkerLayerEvents.timeChanged, { time: Number(e.target.value) });\r\n    };\r\n\r\n    onRadiusChange = (e) => {\r\n        this.fire(MarkerLayerEvents.radiusChanged, { radius: Number(e.target.value) });\r\n    };\r\n\r\n    onDragEnd = () => {\r\n        const lngLat = this.marker.getLngLat();\r\n        this.fire(MarkerLayerEvents.dragend, { lngLat });\r\n    };\r\n\r\n    onButtonClick = () => {\r\n        this.fire(MarkerLayerEvents.buttonClick);\r\n    };\r\n}\r\n","import * as turf from \"@turf/turf\";\r\nimport { DEFAULT_ZONE_LAYER_COLOR, DEFAULT_RADIUS, DEFAULT_TIME, DEFAULT_MODE } from \"./constants\";\r\n\r\nexport function generateUniqueId() {\r\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\r\n}\r\n\r\nexport function getDefaultZone() {\r\n    return {\r\n        name: \"\",\r\n        color: DEFAULT_ZONE_LAYER_COLOR,\r\n        id: null,\r\n        coordinates: [],\r\n    };\r\n}\r\n\r\nexport function getDefaultUserData() {\r\n    return {\r\n        lngLat: null,\r\n        radius: DEFAULT_RADIUS,\r\n        time: DEFAULT_TIME,\r\n        mode: DEFAULT_MODE,\r\n        zones: [],\r\n    };\r\n}\r\n\r\nexport function getCenterZoneByCoordinates(coordinates) {\r\n    const simlified = getDrawingLine(coordinates);\r\n    if (!simlified) return;\r\n    const center = turf.center(simlified);\r\n    return center;\r\n}\r\n\r\nexport function getCenterZoneCoorByCoordinates(coordinates) {\r\n    const center = getCenterZoneByCoordinates(coordinates);\r\n    if (!center) return;\r\n    const coor = turf.getCoord(center);\r\n    return coor;\r\n}\r\n\r\nexport function getZonePolygonByCoordinates(coordinates, id) {\r\n    const line = getDrawingLine(coordinates, id);\r\n    if (!line || line.geometry.coordinates.length < 4) return;\r\n    let polygon = turf.lineToPolygon(line);\r\n    const kinks = turf.kinks(polygon);\r\n    if (kinks.features.length) {\r\n        polygon = turf.unkinkPolygon(polygon);\r\n    }\r\n    return polygon;\r\n}\r\n\r\nexport function getZoneLineByCoordinates(coordinates, id) {\r\n    const simlified = getDrawingLine(coordinates, id);\r\n    if (!simlified || simlified.geometry.coordinates.length < 4) return;\r\n    const polygon = turf.lineToPolygon(simlified);\r\n    const polygonedLine = turf.polygonToLine(polygon);\r\n    return polygonedLine;\r\n}\r\n\r\nexport function getDrawingLine(coordinates, id) {\r\n    if (coordinates.length < 2) return;\r\n    const line = turf.lineString(coordinates, { id });\r\n    const simlified = turf.cleanCoords(turf.simplify(line, { tolerance: 0.00001, highQuality: true }));\r\n    return simlified;\r\n}\r\n\r\nexport function getCircleByRadius(center, radius) {\r\n    return turf.circle(center.toArray(), radius);\r\n}\r\n\r\nexport function getLineByRadius(center, radius) {\r\n    if (!center || !radius) return;\r\n    const circle = turf.circle(center.toArray(), radius);\r\n    return turf.polygonToLine(circle);\r\n}\r\n\r\nexport function getLineByPolygonData(polygonData) {\r\n    const coords = turf.coordAll(polygonData);\r\n    return turf.lineString(coords);\r\n}\r\n\r\nexport function isZoneIntersectedRadius(radius, center, zoneCoordinates) {\r\n    if (zoneCoordinates.length < 2) return;\r\n    const line = turf.lineString(zoneCoordinates);\r\n    const point = turf.point(center.toArray());\r\n    const distance = turf.pointToLineDistance(point, line);\r\n    return distance <= radius;\r\n}\r\n\r\nexport function isZoneIntersectedTime(timePolygon, zoneCoordinates, center) {\r\n    if (!timePolygon || !zoneCoordinates) return;\r\n    const line = turf.lineString(zoneCoordinates);\r\n    const timeFeature = timePolygon.features[0];\r\n    const point = turf.point(center.toArray());\r\n    const nearestPoint = turf.nearestPointOnLine(line, point);\r\n    const pointsInPolygon = turf.pointsWithinPolygon(nearestPoint, timeFeature);\r\n    const intersectedPoints = pointsInPolygon && pointsInPolygon.features.length;\r\n    return !!intersectedPoints;\r\n}\r\n","import { DEFAULT_RADIUS_LAYER_COLOR, DEFAULT_ZONE_LAYER_OPACITY } from \"./constants\";\r\n\r\nexport function enableMapInteraction(map) {\r\n    if (!map) return;\r\n    map.dragPan.enable();\r\n    map.boxZoom.enable();\r\n    map.scrollZoom.enable();\r\n    map.dragRotate.enable();\r\n    map.doubleClickZoom.enable();\r\n    map.touchZoomRotate.enable();\r\n    map.touchPitch.enable();\r\n}\r\n\r\nexport function disableMapInteraction(map) {\r\n    if (!map) return;\r\n    map.dragPan.disable();\r\n    map.boxZoom.disable();\r\n    map.scrollZoom.disable();\r\n    map.dragRotate.disable();\r\n    map.doubleClickZoom.disable();\r\n    map.touchZoomRotate.disable();\r\n    map.touchPitch.disable();\r\n}\r\n\r\nexport function setDefaultCursor(map) {\r\n    if (!map) return;\r\n    map.getCanvas().style.cursor = \"default\";\r\n}\r\n\r\nexport function resetCursor(map) {\r\n    if (!map) return;\r\n    map.getCanvas().style.cursor = \"\";\r\n}\r\n\r\nexport function getZoneLineLayout() {\r\n    return {\r\n        \"line-join\": \"round\",\r\n        \"line-cap\": \"round\",\r\n    };\r\n}\r\n\r\nexport function getZoneLinePaint(color) {\r\n    return {\r\n        \"line-color\": color,\r\n        \"line-width\": [\"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 5, 1, 16, 6],\r\n    };\r\n}\r\n\r\nexport function getZonePolygonPaint(color) {\r\n    return {\r\n        \"fill-color\": color,\r\n        \"fill-opacity\": DEFAULT_ZONE_LAYER_OPACITY,\r\n        \"fill-outline-color\": \"transparent\",\r\n    };\r\n}\r\n\r\nexport function getRadiusPolygonPaint() {\r\n    return {\r\n        \"fill-color\": DEFAULT_RADIUS_LAYER_COLOR,\r\n        \"fill-opacity\": 0.3,\r\n    };\r\n}\r\n\r\nexport function getRadiusLineLayout() {\r\n    return {\r\n        \"line-join\": \"round\",\r\n        \"line-cap\": \"round\",\r\n    };\r\n}\r\n\r\nexport function getRadiusLinePaint() {\r\n    return {\r\n        \"line-color\": DEFAULT_RADIUS_LAYER_COLOR,\r\n        \"line-width\": [\"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 5, 1, 16, 6],\r\n        \"line-dasharray\": [5, 3],\r\n    };\r\n}\r\n","import { getLineByRadius } from \"../utils/zone-helpers\";\r\nimport { getRadiusLineLayout, getRadiusLinePaint } from \"../utils/map-helpers\";\r\n\r\nexport class RadiusStrokeLayer {\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map) {\r\n        this.map = map;\r\n        this.layerId = `radius-stroke-layer`;\r\n        this.sourceId = `radius-stroke-source`;\r\n    }\r\n\r\n    update(radius, coor) {\r\n        this.addSource(radius, coor);\r\n        this.addLayer();\r\n    }\r\n\r\n    addSource(radius, coor) {\r\n        const data = getLineByRadius(coor, radius);\r\n        if (!data) return;\r\n\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"line\",\r\n            layout: getRadiusLineLayout(),\r\n            paint: getRadiusLinePaint(),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import { getCircleByRadius } from \"../utils/zone-helpers\";\r\nimport { RadiusStrokeLayer } from \"./radius-stroke-layer\";\r\nimport { getRadiusPolygonPaint } from \"../utils/map-helpers\";\r\n\r\nexport class RadiusLayer {\r\n    layerId = \"radius-layer\";\r\n    sourceId = \"radius-source\";\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    constructor(map) {\r\n        this.map = map;\r\n        this.strokeLayer = new RadiusStrokeLayer(map);\r\n    }\r\n\r\n    update(radius, coor) {\r\n        if (radius > 0) {\r\n            this.addSource(radius, coor);\r\n            this.addLayer();\r\n            this.strokeLayer.update(radius, coor);\r\n        } else {\r\n            this.remove();\r\n        }\r\n    }\r\n\r\n    addSource(radius, coor) {\r\n        const source = this.getSource();\r\n        const data = getCircleByRadius(coor, radius);\r\n        if (source) {\r\n            source.setData(data);\r\n        } else {\r\n            this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n        }\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"fill\",\r\n            paint: getRadiusPolygonPaint(),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n        this.strokeLayer.remove();\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","/** This is dummy function to simulate a delay in response from api  */\r\nexport async function delay() {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve();\r\n        }, 100);\r\n    });\r\n}\r\n","import { delay } from \"../utils/api-helpers\";\r\n\r\nexport class UserApi {\r\n    async sendInfoAboutIncludedZones(info) {\r\n        await delay();\r\n        console.log(info);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { TABLE_BASE_CLASS_NAME, TABLE_TITLE_CLASS_NAME, TABLE_ZONES_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const ZoneTable = ({ zones, itHasPoint }) => {\r\n    const getContent = () => {\r\n        if (!itHasPoint) {\r\n            return <span className={TABLE_TITLE_CLASS_NAME}>Set point on the map</span>;\r\n        }\r\n        if (!zones.length) {\r\n            return <span className={TABLE_TITLE_CLASS_NAME}>No zones in the radius</span>;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <span className={TABLE_TITLE_CLASS_NAME}>You have selected the following zones:</span>\r\n                <div className={TABLE_ZONES_CLASS_NAME}>\r\n                    {zones.map((zone) => (\r\n                        <span key={zone.id}>{zone.name}</span>\r\n                    ))}\r\n                </div>\r\n            </>\r\n        );\r\n    };\r\n\r\n    return <div className={TABLE_BASE_CLASS_NAME}>{getContent()}</div>;\r\n};\r\n","import mapboxgl from \"mapbox-gl\";\r\nimport axios from \"axios\";\r\n\r\nconst CancelToken = axios.CancelToken;\r\nlet cancelFetch = null;\r\n\r\nexport class MapboxApi {\r\n    cancelIsochroneFetch() {\r\n        if (cancelFetch) cancelFetch();\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.LngLat} coor\r\n     * @param {number} minutes\r\n     */\r\n    async getIsochrone(coor, minutes) {\r\n        this.cancelIsochroneFetch();\r\n        const url = `https://api.mapbox.com/isochrone/v1/mapbox/driving/${coor.lng},${coor.lat}?contours_minutes=${minutes}&polygons=true&access_token=${mapboxgl.accessToken}`;\r\n        try {\r\n            const { data } = await axios.get(url, {\r\n                cancelToken: new CancelToken((c) => {\r\n                    cancelFetch = c;\r\n                }),\r\n            });\r\n            return data;\r\n        } catch (error) {\r\n            console.error(error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n","import { getLineByPolygonData } from \"../utils/zone-helpers\";\r\nimport { getRadiusLineLayout, getRadiusLinePaint } from \"../utils/map-helpers\";\r\n\r\nexport class IsochroneStrokeLayer {\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map) {\r\n        this.map = map;\r\n        this.layerId = `isochrone-stroke-layer`;\r\n        this.sourceId = `isochrone-stroke-source`;\r\n    }\r\n\r\n    update(polygonData) {\r\n        this.addSource(polygonData);\r\n        this.addLayer();\r\n    }\r\n\r\n    addSource(polygonData) {\r\n        if (!polygonData) return;\r\n        const data = getLineByPolygonData(polygonData);\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"line\",\r\n            layout: getRadiusLineLayout(),\r\n            paint: getRadiusLinePaint(),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import { MapboxApi } from \"../api/mapbox-api\";\r\nimport { IsochroneStrokeLayer } from \"./isochrone-stroke-layer\";\r\nimport { getRadiusPolygonPaint } from \"../utils/map-helpers\";\r\n\r\nexport class IsochroneLayer {\r\n    layerId = \"isochrone-layer\";\r\n    sourceId = \"isochrone-source\";\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    constructor(map) {\r\n        this.map = map;\r\n        this.strokeLayer = new IsochroneStrokeLayer(map);\r\n        this.mapboxApi = new MapboxApi();\r\n    }\r\n\r\n    async update(time, coor) {\r\n        if (time > 0) {\r\n            await this.addSource(time, coor);\r\n            this.addLayer();\r\n            this.strokeLayer.update(this.data);\r\n        } else {\r\n            this.remove();\r\n        }\r\n    }\r\n\r\n    async addSource(time, coor) {\r\n        const source = this.getSource();\r\n        try {\r\n            this.data = await this.mapboxApi.getIsochrone(coor, time);\r\n            if (source) {\r\n                source.setData(this.data);\r\n            } else {\r\n                this.map.addSource(this.sourceId, { type: \"geojson\", data: this.data });\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    getFeatureCollection() {\r\n        return this.data;\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"fill\",\r\n            paint: getRadiusPolygonPaint(),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        this.mapboxApi.cancelIsochroneFetch();\r\n        this.data = null;\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n        if (this.strokeLayer) this.strokeLayer.remove();\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { MarkerLayer, MarkerLayerEvents } from \"../layers/marker-layer\";\r\nimport { RadiusLayer } from \"../layers/radius-layer\";\r\nimport { getDefaultUserData, isZoneIntersectedRadius, isZoneIntersectedTime } from \"../utils/zone-helpers\";\r\nimport { UserApi } from \"../api/user-api\";\r\nimport { MAP_ID, RadiusModes } from \"../utils/constants\";\r\nimport { ZoneTable } from \"../componets/zone-table\";\r\nimport { IsochroneLayer } from \"../layers/isochrone-layer\";\r\n\r\nexport class UserControll {\r\n    data = getDefaultUserData();\r\n    radiusMode = RadiusModes.time;\r\n    itHasPoint = false;\r\n\r\n    /**\r\n     * @param {import('./zone-controll').ZoneControll} zoneControll\r\n     */\r\n    constructor(zoneControll) {\r\n        this.zoneControll = zoneControll;\r\n        this.userApi = new UserApi();\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    onAdd(map) {\r\n        this.map = map;\r\n        this.container = document.createElement(\"div\");\r\n        this.container.className = \"mapboxgl-ctrl\";\r\n        this.table = document.createElement(\"div\");\r\n        const mapElement = document.getElementById(MAP_ID);\r\n        if (mapElement) mapElement.appendChild(this.table);\r\n        this.enableUserMode();\r\n        return this.container;\r\n    }\r\n\r\n    onRemove() {\r\n        this.disableUserMode();\r\n        if (this.table) this.table.parentNode.removeChild(this.table);\r\n        if (this.container) this.container.parentNode.removeChild(this.container);\r\n        this.data = getDefaultUserData();\r\n        this.itHasPoint = false;\r\n        this.map = undefined;\r\n    }\r\n\r\n    disableUserMode() {\r\n        if (this.markerLayer) this.markerLayer.remove();\r\n        if (this.radiusLayer) this.radiusLayer.remove();\r\n        if (this.isochroneLayer) this.isochroneLayer.remove();\r\n        if (this.map) this.map.off(\"click\", this.onMapClick);\r\n        this.removeUserTable();\r\n    }\r\n\r\n    updateUserTable() {\r\n        ReactDOM.render(<ZoneTable itHasPoint={this.itHasPoint} zones={this.data.zones} />, this.table);\r\n    }\r\n\r\n    removeUserTable() {\r\n        if (this.table) ReactDOM.unmountComponentAtNode(this.table);\r\n    }\r\n\r\n    enableUserMode() {\r\n        this.markerLayer = new MarkerLayer(this.map);\r\n        this.radiusLayer = new RadiusLayer(this.map);\r\n        this.isochroneLayer = new IsochroneLayer(this.map);\r\n        this.markerLayer.on(MarkerLayerEvents.dragend, this.onDragEndMarker);\r\n        this.markerLayer.on(MarkerLayerEvents.radiusChanged, this.onRadiusChanged);\r\n        this.markerLayer.on(MarkerLayerEvents.buttonClick, this.onButtonClick);\r\n        this.markerLayer.on(MarkerLayerEvents.modeChanged, this.onModeChanged);\r\n        this.markerLayer.on(MarkerLayerEvents.timeChanged, this.onTimeChanged);\r\n        this.map.once(\"click\", this.onMapClick);\r\n        this.updateUserTable();\r\n    }\r\n\r\n    onTimeChanged = ({ time }) => {\r\n        this.data.time = time;\r\n        this.updateRadiusLayer();\r\n    };\r\n\r\n    onModeChanged = ({ mode }) => {\r\n        this.data.mode = mode;\r\n        this.updateRadiusLayer();\r\n    };\r\n\r\n    onButtonClick = async () => {\r\n        await this.userApi.sendInfoAboutIncludedZones(this.data);\r\n    };\r\n\r\n    onRadiusChanged = ({ radius }) => {\r\n        this.data.radius = radius;\r\n        this.updateRadiusLayer();\r\n    };\r\n\r\n    onDragEndMarker = ({ lngLat }) => {\r\n        this.data.lngLat = lngLat;\r\n        this.updateRadiusLayer();\r\n    };\r\n\r\n    findZonesInRadius() {\r\n        const isTimeMode = this.data.mode === RadiusModes.time;\r\n        const isDistanceMode = this.data.mode === RadiusModes.distance;\r\n        const hasRadius = isDistanceMode && this.data.radius > 0;\r\n        const hasTime = isTimeMode && this.data.time > 0;\r\n\r\n        if (!this.data.lngLat || (!hasRadius && !hasTime)) {\r\n            this.data.zones = [];\r\n            this.updateUserTable();\r\n            return;\r\n        }\r\n\r\n        const zones = this.zoneControll.getZoneList();\r\n        const polygonData = this.isochroneLayer.getFeatureCollection();\r\n\r\n        const intersectedZones = zones.filter((zone) => {\r\n            if (isDistanceMode) return isZoneIntersectedRadius(this.data.radius, this.data.lngLat, zone.coordinates);\r\n            return isZoneIntersectedTime(polygonData, zone.coordinates, this.data.lngLat);\r\n        });\r\n\r\n        this.data.zones = intersectedZones.map((el) => ({ name: el.name, id: el.id }));\r\n\r\n        this.updateUserTable();\r\n    }\r\n\r\n    async updateRadiusLayer() {\r\n        if (!this.data.lngLat) return;\r\n\r\n        if (this.data.mode === RadiusModes.time) {\r\n            if (this.radiusLayer) this.radiusLayer.remove();\r\n            await this.isochroneLayer.update(this.data.time, this.data.lngLat);\r\n        } else {\r\n            if (this.isochroneLayer) this.isochroneLayer.remove();\r\n            this.radiusLayer.update(this.data.radius, this.data.lngLat);\r\n        }\r\n\r\n        this.findZonesInRadius();\r\n    }\r\n\r\n    onMapClick = (e) => {\r\n        this.markerLayer.init(e.lngLat, this.data);\r\n        this.data.lngLat = e.lngLat;\r\n        this.itHasPoint = true;\r\n        this.updateRadiusLayer();\r\n        this.updateUserTable();\r\n    };\r\n}\r\n","import { DEFAULT_ZONE_LAYER_COLOR } from \"../utils/constants\";\r\nimport { getZoneLineByCoordinates } from \"../utils/zone-helpers\";\r\nimport { getZoneLineLayout, getZoneLinePaint } from \"../utils/map-helpers\";\r\n\r\nexport class ZoneStrokeLayer {\r\n    /**\r\n     *\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map, id, options) {\r\n        const color = (options && options.color) || DEFAULT_ZONE_LAYER_COLOR;\r\n        this.map = map;\r\n        this.layerId = `zone-stroke-layer-${id}`;\r\n        this.sourceId = `zone-stroke-source-${id}`;\r\n        this.id = id;\r\n        this.color = color;\r\n    }\r\n\r\n    update(coordinates) {\r\n        this.addSource(coordinates);\r\n        this.addLayer();\r\n    }\r\n\r\n    setColor(color) {\r\n        this.color = color;\r\n        this.map.setPaintProperty(this.layerId, \"line-color\", color);\r\n    }\r\n\r\n    addSource(coordinates) {\r\n        const data = getZoneLineByCoordinates(coordinates, this.id);\r\n        if (!data) return;\r\n\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"line\",\r\n            layout: getZoneLineLayout(),\r\n            paint: getZoneLinePaint(this.color),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import { getCenterZoneByCoordinates } from \"../utils/zone-helpers\";\r\n\r\nexport class ZoneNameLayer {\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map, id, options) {\r\n        this.name = options && options.name ? options.name : \" \";\r\n        this.map = map;\r\n        this.layerId = `zone-name-layer-${id}`;\r\n        this.sourceId = `zone-name-source-${id}`;\r\n        this.id = id;\r\n    }\r\n\r\n    updateName(name) {\r\n        this.name = name;\r\n        this.map.setLayoutProperty(this.layerId, \"text-field\", name);\r\n    }\r\n\r\n    update(coordinates) {\r\n        this.addSource(coordinates);\r\n        this.addLayer();\r\n    }\r\n\r\n    addSource(coordinates) {\r\n        const data = getCenterZoneByCoordinates(coordinates);\r\n        if (!data) return;\r\n\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            minzoom: 12,\r\n            type: \"symbol\",\r\n            layout: {\r\n                \"text-field\": this.name,\r\n                \"text-size\": [\"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 12, 12, 18, 46],\r\n            },\r\n            paint: {\r\n                \"text-color\": \"white\",\r\n            },\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import { getZonePolygonByCoordinates } from \"../utils/zone-helpers\";\r\nimport {\r\n    DEFAULT_ZONE_LAYER_COLOR,\r\n    HIGHLIGHTED_ZONE_LAYER_OPACITY,\r\n    DEFAULT_ZONE_LAYER_OPACITY,\r\n} from \"../utils/constants\";\r\nimport { ZoneStrokeLayer } from \"./zone-stroke-layer\";\r\nimport { ZoneNameLayer } from \"./zone-name-layer\";\r\nimport { getZonePolygonPaint } from \"../utils/map-helpers\";\r\n\r\nexport class ZoneLayer {\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map, id, options) {\r\n        this.map = map;\r\n        this.layerId = `zone-layer-${id}`;\r\n        this.sourceId = `zone-source-${id}`;\r\n        this.id = id;\r\n        this.color = (options && options.color) || DEFAULT_ZONE_LAYER_COLOR;\r\n        this.strokeLayer = new ZoneStrokeLayer(map, id, options);\r\n        this.nameLayer = new ZoneNameLayer(map, id, options);\r\n    }\r\n\r\n    update(coordinates, isEdit = false) {\r\n        this.addSource(coordinates);\r\n        this.addLayer();\r\n        this.strokeLayer.update(coordinates);\r\n        if (!isEdit) this.nameLayer.update(coordinates);\r\n    }\r\n\r\n    updateName(name) {\r\n        this.nameLayer.updateName(name);\r\n    }\r\n\r\n    setColor(color) {\r\n        this.color = color;\r\n        this.map.setPaintProperty(this.layerId, \"fill-color\", color);\r\n        this.strokeLayer.setColor(color);\r\n    }\r\n\r\n    addHighlight() {\r\n        this.map.setPaintProperty(this.layerId, \"fill-opacity\", HIGHLIGHTED_ZONE_LAYER_OPACITY);\r\n    }\r\n\r\n    removeHighlight() {\r\n        this.map.setPaintProperty(this.layerId, \"fill-opacity\", DEFAULT_ZONE_LAYER_OPACITY);\r\n    }\r\n\r\n    addSource(coordinates) {\r\n        const data = getZonePolygonByCoordinates(coordinates, this.id);\r\n        if (!data) return;\r\n\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"fill\",\r\n            paint: getZonePolygonPaint(this.color),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n        this.strokeLayer.remove();\r\n        this.nameLayer.remove();\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import { CONTROL_BUTTON_CLASS_NAME, CONTROL_BUTTON_ACTIVE_CLASS_NAME } from \"./constants\";\r\n\r\nexport function createControllButton(content, callback) {\r\n    const button = document.createElement(\"button\");\r\n    button.className = CONTROL_BUTTON_CLASS_NAME;\r\n    button.innerHTML = content;\r\n    button.addEventListener(\"click\", callback);\r\n    return button;\r\n}\r\n\r\nexport function removeActiveClassForButton(button) {\r\n    if (button.classList.contains(CONTROL_BUTTON_ACTIVE_CLASS_NAME)) {\r\n        button.classList.remove(CONTROL_BUTTON_ACTIVE_CLASS_NAME);\r\n    }\r\n}\r\n\r\nexport function addActiveClassForButton(button) {\r\n    if (!button.classList.contains(CONTROL_BUTTON_ACTIVE_CLASS_NAME)) {\r\n        button.classList.add(CONTROL_BUTTON_ACTIVE_CLASS_NAME);\r\n    }\r\n}\r\n","import { delay } from \"../utils/api-helpers\";\r\n\r\nexport class ZoneApi {\r\n    localStoragekey = \"mapZones\";\r\n\r\n    async getZoneList() {\r\n        await delay();\r\n        const zones = localStorage.getItem(this.localStoragekey);\r\n        if (!zones) return;\r\n        return JSON.parse(zones);\r\n    }\r\n\r\n    async addZone(zone) {\r\n        await delay();\r\n        let newZones = [];\r\n        const zones = await this.getZoneList();\r\n        if (zones) newZones = [...zones];\r\n        newZones.push(zone);\r\n        const string = JSON.stringify(newZones);\r\n        localStorage.setItem(this.localStoragekey, string);\r\n    }\r\n\r\n    async updateZone(zone) {\r\n        await delay();\r\n        const zones = await this.getZoneList();\r\n        if (!zones) return;\r\n        const newZones = zones.map((el) => {\r\n            if (el.id === zone.id) return zone;\r\n            return el;\r\n        });\r\n        const string = JSON.stringify(newZones);\r\n        localStorage.setItem(this.localStoragekey, string);\r\n    }\r\n\r\n    async deleteZone(id) {\r\n        await delay();\r\n        const zones = await this.getZoneList();\r\n        if (!zones) return;\r\n        const newZones = zones.filter((el) => el.id !== id);\r\n        const string = JSON.stringify(newZones);\r\n        localStorage.setItem(this.localStoragekey, string);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { POPUP_LABEL_CLASS_NAME, POPUP_INPUT_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const InputName = ({ name, onChange }) => {\r\n    return (\r\n        <>\r\n            <label htmlFor=\"popup-input-name\" className={POPUP_LABEL_CLASS_NAME}>\r\n                Enter zone name:\r\n            </label>\r\n            <br />\r\n            <input\r\n                type=\"text\"\r\n                id=\"popup-input-name\"\r\n                defaultValue={name || \" \"}\r\n                className={POPUP_INPUT_CLASS_NAME}\r\n                onChange={onChange}\r\n            />\r\n            <br />\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { POPUP_COLOR_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport class ColorPicker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            displayColorPicker: false,\r\n            color: props.color,\r\n        };\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.setState({ displayColorPicker: !this.state.displayColorPicker });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ displayColorPicker: false });\r\n    };\r\n\r\n    handleChange = (color) => {\r\n        const { onChange } = this.props;\r\n        this.setState({ color: color.hex });\r\n        onChange(color);\r\n    };\r\n\r\n    render() {\r\n        const { color } = this.state;\r\n\r\n        return (\r\n            <div className={`${POPUP_COLOR_CLASS_NAME}__picker`}>\r\n                <div className={`${POPUP_COLOR_CLASS_NAME}__swatch`} onClick={this.handleClick}>\r\n                    <div className={`${POPUP_COLOR_CLASS_NAME}__select`} style={{ backgroundColor: color }} />\r\n                </div>\r\n                {this.state.displayColorPicker ? (\r\n                    <div className={`${POPUP_COLOR_CLASS_NAME}__popover`}>\r\n                        <div className={`${POPUP_COLOR_CLASS_NAME}__cover`} onClick={this.handleClose} />\r\n                        <SketchPicker color={color} onChange={this.handleChange} />\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { POPUP_COLOR_CLASS_NAME, POPUP_LABEL_CLASS_NAME, DEFAULT_ZONE_LAYER_COLOR } from \"../utils/constants\";\r\nimport { ColorPicker } from \"./color-picker\";\r\n\r\nexport const InputColor = ({ color, onChange }) => {\r\n    return (\r\n        <div className={POPUP_COLOR_CLASS_NAME}>\r\n            <label htmlFor=\"popup-input-color\" className={POPUP_LABEL_CLASS_NAME}>\r\n                Select zone color:\r\n            </label>\r\n            <ColorPicker color={color || DEFAULT_ZONE_LAYER_COLOR} onChange={onChange} />\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Popup } from \"./popup\";\r\nimport { InputName } from \"./input-name\";\r\nimport { InputColor } from \"./input-color\";\r\nimport { POPUP_CONTROLS_CLASS_NAME } from \"../utils/constants\";\r\nimport { PopupButton } from \"./popup-button\";\r\n\r\nexport const EditPopup = ({ name, onChangeName, color, onChangeColor, onClickEdit, onClickSave, onClickCancel }) => {\r\n    return (\r\n        <Popup>\r\n            <InputName name={name} onChange={onChangeName} />\r\n            <InputColor color={color} onChange={onChangeColor} />\r\n            <PopupButton text=\"Edit Geometry\" onClick={onClickEdit} />\r\n            <div className={POPUP_CONTROLS_CLASS_NAME}>\r\n                <PopupButton text=\"Cancel\" onClick={onClickCancel} />\r\n                <PopupButton text=\"Save\" onClick={onClickSave} />\r\n            </div>\r\n        </Popup>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Popup } from \"./popup\";\r\nimport { InputName } from \"./input-name\";\r\nimport { InputColor } from \"./input-color\";\r\nimport { POPUP_CONTROLS_CLASS_NAME } from \"../utils/constants\";\r\nimport { PopupButton } from \"./popup-button\";\r\n\r\nexport const CreatePopup = ({ name, color, onChangeName, onChangeColor, onClickCancel, onClickSave }) => {\r\n    return (\r\n        <Popup>\r\n            <InputName name={name} onChange={onChangeName} />\r\n            <InputColor color={color} onChange={onChangeColor} />\r\n            <div className={POPUP_CONTROLS_CLASS_NAME}>\r\n                <PopupButton text=\"Cancel\" onClick={onClickCancel} />\r\n                <PopupButton text=\"Save\" onClick={onClickSave} />\r\n            </div>\r\n        </Popup>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_TITLE_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const PopupTitle = ({ title }) => {\r\n    return <span className={POPUP_TITLE_CLASS_NAME}>{title || \" \"}</span>;\r\n};\r\n","import React from \"react\";\r\nimport { PopupTitle } from \"./popup-title\";\r\nimport { POPUP_CONTROLS_CLASS_NAME } from \"../utils/constants\";\r\nimport { Popup } from \"./popup\";\r\nimport { PopupButton } from \"./popup-button\";\r\n\r\nexport const DeletePopup = ({ name, onClickDelete, onClickCancel }) => {\r\n    return (\r\n        <Popup>\r\n            <PopupTitle title={`Do you want to delete a zone ${name}?`} />\r\n            <div className={POPUP_CONTROLS_CLASS_NAME}>\r\n                <PopupButton text=\"Cancel\" onClick={onClickCancel} />\r\n                <PopupButton text=\"Delete\" onClick={onClickDelete} />\r\n            </div>\r\n        </Popup>\r\n    );\r\n};\r\n","import { DEFAULT_ZONE_LAYER_COLOR } from \"../utils/constants\";\r\nimport { getDrawingLine } from \"../utils/zone-helpers\";\r\nimport { getZoneLineLayout, getZoneLinePaint } from \"../utils/map-helpers\";\r\n\r\nexport class DrawLayer {\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map, id, options) {\r\n        const color = (options && options.color) || DEFAULT_ZONE_LAYER_COLOR;\r\n        this.map = map;\r\n        this.layerId = `zone-stroke-layer-${id}`;\r\n        this.sourceId = `zone-stroke-source-${id}`;\r\n        this.id = id;\r\n        this.color = color;\r\n    }\r\n\r\n    update(coordinates) {\r\n        this.addSource(coordinates);\r\n        this.addLayer();\r\n    }\r\n\r\n    addSource(coordinates) {\r\n        const data = getDrawingLine(coordinates, this.id);\r\n        if (!data) return;\r\n\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"line\",\r\n            layout: getZoneLineLayout(),\r\n            paint: getZoneLinePaint(this.color),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import mapboxgl from \"mapbox-gl\";\r\nimport ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { ZoneLayer } from \"../layers/zone-layer\";\r\nimport { generateUniqueId, getDefaultZone, getCenterZoneCoorByCoordinates } from \"../utils/zone-helpers\";\r\nimport { getPlusIconSvg, getEditIconSvg, getDeleteIconSvg } from \"../utils/svg-helpers\";\r\nimport { enableMapInteraction, disableMapInteraction, setDefaultCursor, resetCursor } from \"../utils/map-helpers\";\r\nimport { createControllButton, removeActiveClassForButton, addActiveClassForButton } from \"../utils/dom-helpers\";\r\nimport { ZoneApi } from \"../api/zone-api\";\r\nimport { EditPopup } from \"../componets/edit-popup\";\r\nimport { CreatePopup } from \"../componets/create-popup\";\r\nimport { DeletePopup } from \"../componets/delete-popup\";\r\nimport { DrawLayer } from \"../layers/draw-layer\";\r\n\r\nexport class AdminControll {\r\n    isCreateMode = false;\r\n    isEditMode = false;\r\n    isDeleteMode = false;\r\n    deleteZoneId = null;\r\n    editZoneId = null;\r\n    cacheZone = null;\r\n    newZone = getDefaultZone();\r\n    zoneLayerPatternId = /zone-layer-\\w/i;\r\n\r\n    /**\r\n     * @param {import('./zone-controll').ZoneControll} zoneControll\r\n     */\r\n    constructor(zoneControll) {\r\n        this.zoneControll = zoneControll;\r\n        this.zoneApi = new ZoneApi();\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    onAdd(map) {\r\n        this.map = map;\r\n        this.container = document.createElement(\"div\");\r\n        this.container.className = \"mapboxgl-ctrl mapboxgl-ctrl-group\";\r\n        this.createButton = createControllButton(getPlusIconSvg(), this.onClickCreateButton);\r\n        this.deleteButton = createControllButton(getDeleteIconSvg(), this.onClickDeleteButton);\r\n        this.editButton = createControllButton(getEditIconSvg(), this.onClickEditButton);\r\n        this.container.appendChild(this.createButton);\r\n        this.container.appendChild(this.deleteButton);\r\n        this.container.appendChild(this.editButton);\r\n        return this.container;\r\n    }\r\n\r\n    onRemove() {\r\n        this.container.parentNode.removeChild(this.container);\r\n        this.disableAllModes();\r\n        this.map = undefined;\r\n    }\r\n\r\n    //#region Edit zone\r\n\r\n    onClickEditButton = () => {\r\n        if (this.isEditMode) return this.disableEditMode();\r\n        this.disableAllModes();\r\n        this.enableEditMode();\r\n    };\r\n\r\n    enableEditMode = () => {\r\n        addActiveClassForButton(this.editButton);\r\n        this.addCursorPointerListener();\r\n        if (this.map) this.map.on(\"click\", this.onClickEdit);\r\n        this.isEditMode = true;\r\n    };\r\n\r\n    disableEditMode = () => {\r\n        removeActiveClassForButton(this.editButton);\r\n        this.removeCursorPointerListener();\r\n        if (this.map) this.map.off(\"click\", this.onClickEdit);\r\n        this.cancelEditZone();\r\n        this.editZone = null;\r\n        this.isEditMode = false;\r\n    };\r\n\r\n    updateEditZoneLayer() {\r\n        if (!this.editZone || this.editZone.coordinates.length < 4) return;\r\n        this.drawEditLayer.update(this.editZone.coordinates);\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.MapMouseEvent & mapboxgl.EventData} e\r\n     */\r\n    onMouseUpEdit = (e) => {\r\n        if (this.map) this.map.off(\"mousemove\", this.onMouseMoveEdit);\r\n        if (this.editZone) this.showEditPopup(this.editZone.id);\r\n        this.drawEditLayer.remove();\r\n        if (this.editZone && this.editZone.coordinates.length > 4) {\r\n            this.zoneControll.updateZoneCoordinates(this.editZone.id, this.editZone.coordinates);\r\n        }\r\n        enableMapInteraction(this.map);\r\n        resetCursor(this.map);\r\n        this.addCursorPointerListener();\r\n    };\r\n\r\n    /**\r\n     * @param {mapboxgl.MapMouseEvent & mapboxgl.EventData} e\r\n     */\r\n    onMouseMoveEdit = (e) => {\r\n        if (!this.editZone) return;\r\n        this.editZone.coordinates.push(e.lngLat.toArray());\r\n        this.updateEditZoneLayer();\r\n    };\r\n\r\n    /**\r\n     * @param {mapboxgl.MapMouseEvent & mapboxgl.EventData} e\r\n     */\r\n    onMouseDownEdit = (e) => {\r\n        if (this.map) this.map.on(\"mousemove\", this.onMouseMoveEdit);\r\n        if (this.map) this.map.once(\"mouseup\", this.onMouseUpEdit);\r\n    };\r\n\r\n    onGeometryEdit = () => {\r\n        if (this.editPopup) this.editPopup.remove();\r\n        disableMapInteraction(this.map);\r\n        this.removeCursorPointerListener();\r\n        setDefaultCursor(this.map);\r\n        this.drawEditLayer = new DrawLayer(this.map, this.editZone.id, { color: this.editZone.color });\r\n        this.zoneControll.removeZoneLayer(this.editZone.id);\r\n        this.editZone.coordinates = [];\r\n        if (this.map) this.map.once(\"mousedown\", this.onMouseDownEdit);\r\n    };\r\n\r\n    cancelEditZone = () => {\r\n        this.zoneControll.drawZones();\r\n        if (this.editPopup) this.editPopup.remove();\r\n        this.editZone = null;\r\n    };\r\n\r\n    onSaveEdit = async () => {\r\n        await this.zoneControll.updateZone(this.editZone);\r\n\r\n        if (this.editPopup) this.editPopup.remove();\r\n        this.editZone = null;\r\n    };\r\n\r\n    editZoneColor = (color) => {\r\n        const hex = color.hex;\r\n        this.editZone.color = hex;\r\n        this.zoneControll.updateZoneColor(this.editZone.id, hex);\r\n    };\r\n\r\n    editZoneName = (e) => {\r\n        this.editZone.name = e.target.value;\r\n    };\r\n\r\n    showEditPopup() {\r\n        const coor = getCenterZoneCoorByCoordinates(this.editZone.coordinates);\r\n        if (!coor) return;\r\n\r\n        const popupContainer = document.createElement(\"div\");\r\n\r\n        this.editPopup = new mapboxgl.Popup({\r\n            closeButton: false,\r\n            closeOnClick: false,\r\n            closeOnMove: false,\r\n        })\r\n            .setLngLat(coor)\r\n            .setDOMContent(popupContainer)\r\n            .addTo(this.map);\r\n\r\n        ReactDOM.render(\r\n            <EditPopup\r\n                color={this.editZone.color}\r\n                name={this.editZone.name}\r\n                onChangeName={this.editZoneName}\r\n                onChangeColor={this.editZoneColor}\r\n                onClickCancel={this.cancelEditZone}\r\n                onClickSave={this.onSaveEdit}\r\n                onClickEdit={this.onGeometryEdit}\r\n            />,\r\n            popupContainer,\r\n        );\r\n    }\r\n\r\n    onClickEdit = (e) => {\r\n        const feature = this.getZoneFeatureByEvent(e);\r\n        if (!feature) return;\r\n        const zoneId = feature.properties.id;\r\n        if (this.editZone && zoneId === this.editZone.id) return;\r\n        if (this.editPopup) this.editPopup.remove();\r\n        const zone = this.zoneControll.getZoneById(zoneId);\r\n        this.editZone = _.cloneDeep(zone);\r\n        this.showEditPopup();\r\n    };\r\n\r\n    //#endregion\r\n\r\n    //#region Create zone\r\n\r\n    onClickCreateButton = () => {\r\n        if (this.isCreateMode) return this.disableCreateMode();\r\n        this.disableAllModes();\r\n        this.enableCreateMode();\r\n    };\r\n\r\n    enableCreateMode() {\r\n        this.newZone = getDefaultZone();\r\n        const id = generateUniqueId();\r\n        this.newZone.id = id;\r\n        if (this.map) this.drawlayer = new DrawLayer(this.map, id);\r\n        this.newZonelayer = new ZoneLayer(this.map, id);\r\n        if (this.map) this.map.once(\"mousedown\", this.onMouseDownCreate);\r\n        addActiveClassForButton(this.createButton);\r\n        disableMapInteraction(this.map);\r\n        setDefaultCursor(this.map);\r\n        this.isCreateMode = true;\r\n    }\r\n\r\n    disableCreateMode = () => {\r\n        this.newZone = getDefaultZone();\r\n        if (this.createPopup) this.createPopup.remove();\r\n        if (this.newZonelayer) this.newZonelayer.remove();\r\n        if (this.drawlayer) this.drawlayer.remove();\r\n        removeActiveClassForButton(this.createButton);\r\n        enableMapInteraction(this.map);\r\n        resetCursor(this.map);\r\n        this.isCreateMode = false;\r\n    };\r\n\r\n    setNewZoneName = (e) => {\r\n        this.newZone.name = e.target.value;\r\n    };\r\n\r\n    setNewZoneColor = (color) => {\r\n        const hex = color.hex;\r\n        this.newZone.color = hex;\r\n        this.updateColorInNewZone();\r\n    };\r\n\r\n    createZone = () => {\r\n        const zone = _.cloneDeep(this.newZone);\r\n        this.zoneControll.createZone(zone);\r\n        this.onClickCreateButton();\r\n        this.createPopup.remove();\r\n        this.newZonelayer.remove();\r\n        this.drawlayer.remove();\r\n        this.newZone = getDefaultZone();\r\n    };\r\n\r\n    updateColorInNewZone() {\r\n        this.newZonelayer.setColor(this.newZone.color);\r\n    }\r\n\r\n    showCreatePopup() {\r\n        const coor = getCenterZoneCoorByCoordinates(this.newZone.coordinates);\r\n        if (!coor) return;\r\n        const popupContainer = document.createElement(\"div\");\r\n        this.createPopup = new mapboxgl.Popup({\r\n            closeButton: false,\r\n            closeOnClick: false,\r\n            closeOnMove: false,\r\n        })\r\n            .setLngLat(coor)\r\n            .setDOMContent(popupContainer)\r\n            .addTo(this.map);\r\n\r\n        const name = this.zoneControll.getNewZoneName();\r\n        this.newZone.name = name;\r\n        ReactDOM.render(\r\n            <CreatePopup\r\n                name={name}\r\n                color={null}\r\n                onChangeName={this.setNewZoneName}\r\n                onChangeColor={this.setNewZoneColor}\r\n                onClickCancel={this.disableCreateMode}\r\n                onClickSave={this.createZone}\r\n            />,\r\n            popupContainer,\r\n        );\r\n    }\r\n\r\n    updateNewZoneLayer() {\r\n        if (this.newZone.coordinates.length < 4) return;\r\n        this.drawlayer.update(this.newZone.coordinates, true);\r\n    }\r\n\r\n    onMouseUpCreate = (e) => {\r\n        this.map.off(\"mousemove\", this.onMouseMoveCreate);\r\n        this.showCreatePopup();\r\n        if (this.drawlayer) this.drawlayer.remove();\r\n        if (this.newZonelayer) this.newZonelayer.update(this.newZone.coordinates, true);\r\n    };\r\n\r\n    onMouseMoveCreate = (e) => {\r\n        this.newZone.coordinates.push(e.lngLat.toArray());\r\n        this.updateNewZoneLayer();\r\n    };\r\n\r\n    onMouseDownCreate = (e) => {\r\n        this.newZone.coordinates.push(e.lngLat.toArray());\r\n        if (this.map) this.map.on(\"mousemove\", this.onMouseMoveCreate);\r\n        if (this.map) this.map.once(\"mouseup\", this.onMouseUpCreate);\r\n    };\r\n\r\n    //#endregion\r\n\r\n    //#region Delete zone\r\n\r\n    onClickDeleteButton = () => {\r\n        if (this.isDeleteMode) return this.disableDeleteMode();\r\n        this.disableAllModes();\r\n        this.enableDeletetingMode();\r\n    };\r\n\r\n    enableDeletetingMode() {\r\n        if (this.map) this.map.on(\"click\", this.onClickDeleteZone);\r\n        addActiveClassForButton(this.deleteButton);\r\n        this.addCursorPointerListener();\r\n        this.isDeleteMode = true;\r\n    }\r\n\r\n    disableDeleteMode() {\r\n        if (this.map) this.map.off(\"click\", this.onClickDeleteZone);\r\n        removeActiveClassForButton(this.deleteButton);\r\n\r\n        if (this.deletePopup) {\r\n            this.deletePopup.remove();\r\n            this.deletePopup = null;\r\n        }\r\n\r\n        this.removeCursorPointerListener();\r\n        this.isDeleteMode = false;\r\n        this.deleteZoneId = null;\r\n    }\r\n\r\n    cancelDeleteZone = () => {\r\n        this.deletePopup.remove();\r\n        this.deleteZoneId = null;\r\n    };\r\n\r\n    deleteZone = async () => {\r\n        await this.zoneControll.deleteZone(this.deleteZoneId);\r\n        this.deletePopup.remove();\r\n        this.deleteZoneId = null;\r\n    };\r\n\r\n    showDeletePopup(zoneId) {\r\n        const zone = this.zoneControll.getZoneById(zoneId);\r\n        if (!zone) return;\r\n        const coor = getCenterZoneCoorByCoordinates(zone.coordinates);\r\n        if (!coor) return;\r\n        const popupContainer = document.createElement(\"div\");\r\n        this.deletePopup = new mapboxgl.Popup({\r\n            closeButton: false,\r\n            closeOnClick: false,\r\n            closeOnMove: false,\r\n        })\r\n            .setLngLat(coor)\r\n            .setDOMContent(popupContainer)\r\n            .addTo(this.map);\r\n\r\n        ReactDOM.render(\r\n            <DeletePopup name={zone.name} onClickCancel={this.cancelDeleteZone} onClickDelete={this.deleteZone} />,\r\n            popupContainer,\r\n        );\r\n    }\r\n\r\n    onClickDeleteZone = (e) => {\r\n        const feature = this.getZoneFeatureByEvent(e);\r\n        if (!feature) return;\r\n        const zoneId = feature.properties.id;\r\n        if (zoneId === this.deleteZoneId) return;\r\n        if (this.deletePopup) this.deletePopup.remove();\r\n        this.showDeletePopup(zoneId);\r\n        this.deleteZoneId = zoneId;\r\n    };\r\n\r\n    //#endregion\r\n\r\n    //#region Utils\r\n\r\n    cursorListener = (e) => {\r\n        const feature = this.getZoneFeatureByEvent(e);\r\n        if (feature) {\r\n            this.map.getCanvas().style.cursor = \"pointer\";\r\n        } else {\r\n            this.map.getCanvas().style.cursor = \"\";\r\n        }\r\n    };\r\n\r\n    addCursorPointerListener() {\r\n        this.map.on(\"mousemove\", this.cursorListener);\r\n    }\r\n\r\n    removeCursorPointerListener() {\r\n        this.map.off(\"mousemove\", this.cursorListener);\r\n    }\r\n\r\n    disableAllModes() {\r\n        if (this.isEditMode) this.disableEditMode();\r\n        if (this.isDeleteMode) this.disableDeleteMode();\r\n        if (this.isCreateMode) this.disableCreateMode();\r\n    }\r\n\r\n    getZoneFeatureByEvent(e) {\r\n        const features = this.map.queryRenderedFeatures(e.point);\r\n        if (!features.length) return;\r\n        const feature = features.shift();\r\n        if (!feature) return;\r\n        if (feature.layer.id.match(this.zoneLayerPatternId)) return feature;\r\n    }\r\n\r\n    //#endregion\r\n}\r\n","export function getDeleteIconSvg() {\r\n    return `\r\n\t<svg version=\"1.1\" viewBox=\"0 0 384 384\">\r\n\t\t<path\r\n\t\td=\"M64,341.333C64,364.907,83.093,384,106.667,384h170.667C300.907,384,320,364.907,320,341.333v-256H64V341.333z\" />\r\n\t\t<polygon\r\n\t\tpoints=\"266.667,21.333 245.333,0 138.667,0 117.333,21.333 42.667,21.333 42.667,64 341.333,64 341.333,21.333 \t\t\t\" />\r\n\t</svg>\r\n\t`;\r\n}\r\n\r\nexport function getEditIconSvg() {\r\n    return `\r\n\t<svg version=\"1.1\" viewBox=\"0 0 383.947 383.947\">\r\n\t\t<polygon points=\"0,303.947 0,383.947 80,383.947 316.053,147.893 236.053,67.893\" />\r\n\t\t<path\r\n\t\td=\"M377.707,56.053L327.893,6.24c-8.32-8.32-21.867-8.32-30.187,0l-39.04,39.04l80,80l39.04-39.04C386.027,77.92,386.027,64.373,377.707,56.053z\" />\r\n\t</svg>\r\n\t`;\r\n}\r\n\r\nexport function getPlusIconSvg() {\r\n    return `\r\n\t<svg version=\"1.1\" viewBox=\"0 0 42 42\">\r\n\t\t<path d=\"M37.059,16H26V4.941C26,2.224,23.718,0,21,0s-5,2.224-5,4.941V16H4.941C2.224,16,0,18.282,0,21s2.224,5,4.941,5H16v11.059\r\n\t\tC16,39.776,18.282,42,21,42s5-2.224,5-4.941V26h11.059C39.776,26,42,23.718,42,21S39.776,16,37.059,16z\" />\r\n\t</svg>\r\n\t`;\r\n}\r\n","import { ZoneApi } from \"../api/zone-api\";\r\nimport { ZoneLayer } from \"../layers/zone-layer\";\r\n\r\nexport class ZoneControll {\r\n    zones = [];\r\n    selectedZones = [];\r\n    zoneApi = new ZoneApi();\r\n    layers = new Map();\r\n\r\n    constructor(selectedZones) {\r\n        this.selectedZones = selectedZones;\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    onAdd(map) {\r\n        this.map = map;\r\n        this.container = document.createElement(\"div\");\r\n        this.container.className = \"mapboxgl-ctrl\";\r\n        map.on(\"load\", this.init);\r\n        return this.container;\r\n    }\r\n\r\n    onRemove() {\r\n        this.container.parentNode.removeChild(this.container);\r\n        this.map = undefined;\r\n    }\r\n\r\n    init = async () => {\r\n        const zones = await this.zoneApi.getZoneList();\r\n        if (!zones) return;\r\n        this.zones = zones;\r\n        this.drawZones();\r\n    };\r\n\r\n    updateSelectedZones(selectedZones) {\r\n        this.selectedZones = selectedZones;\r\n        this.drawZones();\r\n    }\r\n\r\n    async deleteZone(zoneId) {\r\n        await this.zoneApi.deleteZone(zoneId);\r\n        this.zones = this.zones.filter((zone) => zone.id !== zoneId);\r\n        const layer = this.layers.get(zoneId);\r\n        if (!layer) return;\r\n        layer.remove();\r\n        this.layers.delete(zoneId);\r\n    }\r\n\r\n    async updateZone(newZone) {\r\n        await this.zoneApi.updateZone(newZone);\r\n\r\n        this.zones = this.zones.map((el) => {\r\n            if (el.id === newZone.id) return newZone;\r\n            return el;\r\n        });\r\n\r\n        this.drawZones();\r\n    }\r\n\r\n    async createZone(newZone) {\r\n        await this.zoneApi.addZone(newZone);\r\n        this.zones.push(newZone);\r\n        this.drawZones();\r\n    }\r\n\r\n    getZoneList() {\r\n        return this.zones;\r\n    }\r\n\r\n    getZoneById(zoneId) {\r\n        return this.zones.find((el) => el.id === zoneId);\r\n    }\r\n\r\n    updateZoneColor(zoneId, color) {\r\n        const layer = this.layers.get(zoneId);\r\n        if (!layer) return;\r\n        layer.setColor(color);\r\n    }\r\n\r\n    updateZoneCoordinates(zoneId, coordinates) {\r\n        const layer = this.layers.get(zoneId);\r\n        if (!layer) return;\r\n        layer.update(coordinates, true);\r\n    }\r\n\r\n    removeZoneLayer(zoneId) {\r\n        const layer = this.layers.get(zoneId);\r\n        if (layer) layer.remove();\r\n    }\r\n\r\n    getNewZoneName() {\r\n        return `Zone ${this.zones.length + 1}`;\r\n    }\r\n\r\n    drawZones() {\r\n        this.zones.forEach((zone) => {\r\n            const existLayer = this.layers.get(zone.id);\r\n            if (existLayer) {\r\n                existLayer.update(zone.coordinates);\r\n                existLayer.setColor(zone.color);\r\n                existLayer.updateName(zone.name);\r\n                if (this.selectedZones.includes(zone.id)) {\r\n                    existLayer.addHighlight();\r\n                } else {\r\n                    existLayer.removeHighlight();\r\n                }\r\n            } else {\r\n                const layer = new ZoneLayer(this.map, zone.id, { color: zone.color, name: zone.name });\r\n                layer.update(zone.coordinates);\r\n                if (this.selectedZones.includes(zone.id)) layer.addHighlight();\r\n                this.layers.set(zone.id, layer);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport _ from \"lodash\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport { UserControll } from \"./controls/user-controll\";\r\nimport { AdminControll } from \"./controls/admin-controll\";\r\nimport { ZoneControll } from \"./controls/zone-controll\";\r\nimport { MAP_ID } from \"./utils/constants\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport \"./index.scss\";\r\n\r\n/** Collection of cities coordinates */\r\nexport const Cities = {\r\n    Bengaluru: new mapboxgl.LngLat(77.59094323372614, 12.975557791300176),\r\n};\r\n\r\n/**\r\n * Map with Zones Component\r\n *\r\n * @typedef {object} Props\r\n * @property {string} mapToken - Mapbox token (https://docs.mapbox.com/help/how-mapbox-works/access-tokens/)\r\n * @property {string} mapStyle - Mapbox map style (https://docs.mapbox.com/vector-tiles/reference/)\r\n * @property {boolean} isAdmin - Selecting the use mode Admin or User\r\n * @property {mapboxgl.LngLat} cityCoor - Сity coordinates\r\n * @property {Array<string>} selectedZones - Selected zones ID which will be highlighted on the map\r\n *\r\n * @extends {React.Component<Props>}\r\n */\r\nexport class MapWithZones extends React.Component {\r\n    componentDidMount() {\r\n        const { mapStyle, mapToken, isAdmin, cityCoor, selectedZones } = this.props;\r\n\r\n        mapboxgl.accessToken = mapToken;\r\n\r\n        this.map = new mapboxgl.Map({\r\n            container: MAP_ID,\r\n            style: mapStyle,\r\n            center: cityCoor,\r\n            zoom: 12,\r\n        });\r\n\r\n        this.zoneControll = new ZoneControll(selectedZones);\r\n        this.map.addControl(this.zoneControll);\r\n        this.userControll = new UserControll(this.zoneControll);\r\n        this.adminControll = new AdminControll(this.zoneControll);\r\n\r\n        if (isAdmin) {\r\n            this.map.addControl(this.adminControll);\r\n        } else {\r\n            this.map.addControl(this.userControll);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { isAdmin, selectedZones } = this.props;\r\n\r\n        if (isAdmin !== prevProps.isAdmin) {\r\n            if (!this.map) return;\r\n            if (isAdmin) {\r\n                this.map.removeControl(this.userControll);\r\n                this.map.addControl(this.adminControll);\r\n            } else {\r\n                this.map.removeControl(this.adminControll);\r\n                this.map.addControl(this.userControll);\r\n            }\r\n        }\r\n\r\n        if (!_.isEqual(selectedZones, prevProps.selectedZones)) {\r\n            this.zoneControll.updateSelectedZones(selectedZones);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div id={MAP_ID} />;\r\n    }\r\n}\r\n\r\nMapWithZones.defaultProps = {\r\n    mapStyle: \"mapbox://styles/mapbox/streets-v11\",\r\n    isAdmin: false,\r\n    cityCoor: Cities.Bengaluru,\r\n    selectedZones: [],\r\n};\r\n\r\nMapWithZones.propTypes = {\r\n    mapToken: PropTypes.string.isRequired,\r\n    mapStyle: PropTypes.string,\r\n    isAdmin: PropTypes.bool,\r\n    cityCoor: PropTypes.instanceOf(mapboxgl.LngLat),\r\n    selectedZones: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { ZoneApi } from \"../api/zone-api\";\r\n\r\nexport const ZonesList = ({ selectedZones, setSelectedZones }) => {\r\n    const [zones, setZones] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const zoneApi = new ZoneApi();\r\n        const getZones = async () => {\r\n            const zones = await zoneApi.getZoneList();\r\n            if (zones) setZones(zones);\r\n        };\r\n        getZones();\r\n    }, []);\r\n\r\n    const onChange = (e) => {\r\n        const id = e.target.value;\r\n        let newSelected = [];\r\n        if (selectedZones.includes(id)) {\r\n            newSelected = selectedZones.filter((el) => el !== id);\r\n        } else {\r\n            newSelected = [...selectedZones, id];\r\n        }\r\n        setSelectedZones(newSelected);\r\n    };\r\n\r\n    return (\r\n        <div className=\"test-zone-list\">\r\n            Zones list:\r\n            {zones.map((zone) => {\r\n                return (\r\n                    <label key={zone.id}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={selectedZones.includes(zone.id)}\r\n                            value={zone.id}\r\n                            onChange={onChange}\r\n                        ></input>\r\n                        {zone.name}\r\n                    </label>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\nimport { MapWithZones } from \"./map-with-zones\";\nimport \"./App.scss\";\nimport { ZonesList } from \"./map-with-zones/componets/zones-list\";\n\nconst App = () => {\n    const [mode, setMode] = useState(\"user\");\n    const [selectedZones, setSelectedZones] = useState([]);\n\n    return (\n        <div className=\"App\">\n            <div className=\"test-panel\">\n                <button\n                    onClick={() => setMode(\"admin\")}\n                    className={mode === \"admin\" ? \"test-panel__button-active\" : \"\"}\n                >\n                    ADMIN MODE\n                </button>\n                <button onClick={() => setMode(\"user\")} className={mode === \"user\" ? \"test-panel__button-active\" : \"\"}>\n                    USER MODE\n                </button>\n                <button\n                    onClick={() => setMode(\"highlight\")}\n                    className={mode === \"highlight\" ? \"test-panel__button-active\" : \"\"}\n                >\n                    HIGHLIGHT ZONE\n                </button>\n            </div>\n            {mode === \"highlight\" && <ZonesList selectedZones={selectedZones} setSelectedZones={setSelectedZones} />}\n            <MapWithZones\n                mapToken={process.env.REACT_APP_MAPBOX_TOKEN}\n                isAdmin={mode === \"admin\"}\n                selectedZones={selectedZones}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}