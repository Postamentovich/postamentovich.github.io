{"version":3,"sources":["map-with-zones/utils/constants.js","map-with-zones/componets/input-radius.jsx","map-with-zones/componets/popup.jsx","map-with-zones/componets/popup-button.jsx","map-with-zones/componets/radius-mode.jsx","map-with-zones/componets/input-time.jsx","map-with-zones/componets/radius-popup.jsx","map-with-zones/layers/marker-layer.js","map-with-zones/utils/zone-helpers.js","map-with-zones/utils/map-helpers.js","map-with-zones/layers/radius-stroke-layer.js","map-with-zones/layers/radius-layer.js","map-with-zones/utils/api-helpers.js","map-with-zones/api/user-api.js","map-with-zones/componets/zone-table.jsx","map-with-zones/api/mapbox-api.js","map-with-zones/layers/isochrone-stroke-layer.js","map-with-zones/layers/isochrone-layer.js","map-with-zones/controls/user-controll.js","map-with-zones/layers/zone-stroke-layer.js","map-with-zones/layers/zone-name-layer.js","map-with-zones/layers/zone-layer.js","map-with-zones/utils/dom-helpers.js","map-with-zones/api/zone-api.js","map-with-zones/componets/input-name.jsx","map-with-zones/componets/color-picker.jsx","map-with-zones/componets/input-color.jsx","map-with-zones/componets/edit-popup.jsx","map-with-zones/componets/create-popup.jsx","map-with-zones/componets/popup-title.jsx","map-with-zones/componets/delete-popup.jsx","map-with-zones/layers/draw-layer.js","map-with-zones/controls/admin-controll.js","map-with-zones/utils/svg-helpers.js","map-with-zones/controls/zone-controll.js","map-with-zones/index.jsx","map-with-zones/componets/zones-list.jsx","App.js","serviceWorker.js","index.js"],"names":["RadiusModes","DEFAULT_MODE","MAP_ID","CONTROL_BUTTON_CLASS_NAME","CONTROL_BUTTON_ACTIVE_CLASS_NAME","POPUP_BUTTON_CLASS_NAME","POPUP_INPUT_CLASS_NAME","POPUP_LABEL_CLASS_NAME","POPUP_TITLE_CLASS_NAME","POPUP_COLOR_CLASS_NAME","POPUP_RADIUS_MODE_CLASS_NAME","POPUP_CONTROLS_CLASS_NAME","TABLE_TITLE_CLASS_NAME","TABLE_ZONES_CLASS_NAME","InputRadius","radius","onChange","htmlFor","className","type","id","defaultValue","Popup","children","PopupButton","text","onClick","RadiusMode","mode","onChangeMode","value","name","checked","InputTime","time","max","RadiusPopup","onChangeRadius","onClickSelect","onChangeTime","useState","stateMode","setMode","handleChangeMode","useCallback","e","target","stateRadius","setRadius","handleChangeRadius","stateTime","setTime","handleChangeTime","MarkerLayerEvents","MarkerLayer","map","radiusInputId","radiusButtonId","fire","onTimeChange","Number","onRadiusChange","onDragEnd","lngLat","marker","getLngLat","onButtonClick","mapboxgl","Marker","draggable","popupContainer","document","createElement","popup","closeButton","closeOnClick","closeOnMove","setDOMContent","this","remove","coor","initData","setLngLat","toArray","setPopup","addTo","togglePopup","on","ReactDOM","render","Evented","getDefaultUserData","zones","getCenterZoneByCoordinates","coordinates","simlified","getDrawingLine","turf","getCenterZoneCoorByCoordinates","center","getZonePolygonByCoordinates","line","geometry","length","polygon","features","tolerance","highQuality","enableMapInteraction","dragPan","enable","boxZoom","scrollZoom","dragRotate","doubleClickZoom","touchZoomRotate","touchPitch","disableMapInteraction","disable","setDefaultCursor","getCanvas","style","cursor","resetCursor","getZoneLinePaint","color","RadiusStrokeLayer","layerId","sourceId","addSource","addLayer","data","circle","getLineByRadius","source","getSource","setData","gerLayer","layout","paint","removeLayer","removeSource","getLayer","RadiusLayer","strokeLayer","update","getCircleByRadius","delay","a","Promise","resolve","setTimeout","UserApi","info","console","log","ZoneTable","itHasPoint","zone","key","CancelToken","axios","cancelFetch","MapboxApi","minutes","cancelIsochroneFetch","url","lng","lat","accessToken","get","cancelToken","c","error","IsochroneStrokeLayer","polygonData","coords","getLineByPolygonData","IsochroneLayer","mapboxApi","getIsochrone","UserControll","zoneControll","radiusMode","onTimeChanged","updateRadiusLayer","onModeChanged","userApi","sendInfoAboutIncludedZones","onRadiusChanged","onDragEndMarker","onMapClick","markerLayer","init","updateUserTable","container","table","mapElement","getElementById","appendChild","enableUserMode","disableUserMode","parentNode","removeChild","undefined","radiusLayer","isochroneLayer","off","removeUserTable","unmountComponentAtNode","once","isTimeMode","isDistanceMode","hasRadius","hasTime","getZoneList","getFeatureCollection","intersectedZones","filter","zoneCoordinates","point","isZoneIntersectedRadius","timePolygon","timeFeature","points","i","isZoneIntersectedTime","el","findZonesInRadius","ZoneStrokeLayer","options","setPaintProperty","getZoneLineByCoordinates","ZoneNameLayer","setLayoutProperty","minzoom","ZoneLayer","nameLayer","isEdit","updateName","setColor","createControllButton","content","callback","button","innerHTML","addEventListener","removeActiveClassForButton","classList","contains","addActiveClassForButton","add","ZoneApi","localStoragekey","localForage","config","driver","INDEXEDDB","version","storeName","getItem","newZones","push","setItem","InputName","ColorPicker","props","handleClick","setState","displayColorPicker","state","handleClose","handleChange","hex","backgroundColor","React","Component","InputColor","EditPopup","onChangeName","onChangeColor","onClickEdit","onClickSave","onClickCancel","CreatePopup","PopupTitle","title","DeletePopup","onClickDelete","DrawLayer","AdminControll","isCreateMode","isEditMode","isDeleteMode","isEditGeometryMode","deleteZoneId","editZoneId","cacheZone","newZone","zoneLayerPatternId","onClickEditButton","disableEditMode","disableAllModes","enableEditMode","editButton","addCursorPointerListener","removeCursorPointerListener","cancelEditZone","editZone","onMouseUpEdit","onMouseMoveEdit","showEditPopup","drawEditLayer","updateZoneCoordinates","updateEditZoneLayer","onMouseDownEdit","onGeometryEdit","editPopup","removeZoneLayer","onSaveEdit","updateZone","editZoneColor","updateZoneColor","editZoneName","onClosePopup","drawZones","feature","getZoneFeatureByEvent","zoneId","properties","getZoneById","_","cloneDeep","onClickCreateButton","disableCreateMode","enableCreateMode","isAutoClose","createPopup","newZonelayer","drawlayer","createButton","setNewZoneName","setNewZoneColor","updateColorInNewZone","createZone","onMouseUpCreate","onMouseMoveCreate","showCreatePopup","updateNewZoneLayer","onMouseDownCreate","onClickDeleteButton","disableDeleteMode","enableDeletetingMode","onDeletePopupClose","cancelDeleteZone","deletePopup","deleteZone","onClickDeleteZone","showDeletePopup","cursorListener","zoneApi","deleteButton","Date","now","toString","Math","random","substr","getNewZoneName","queryRenderedFeatures","shift","layer","match","ZoneControll","selectedZones","layers","Map","delete","addZone","find","forEach","existLayer","includes","addHighlight","removeHighlight","set","Cities","Bengaluru","LngLat","MapWithZones","mapStyle","mapToken","isAdmin","cityCoor","zoom","addControl","userControll","adminControll","prevProps","removeControl","isEqual","updateSelectedZones","defaultProps","ZonesList","setSelectedZones","setZones","useEffect","getZones","newSelected","App","process","Boolean","window","location","hostname","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bc12b86a.chunk.js","sourcesContent":["export const RadiusModes = {\r\n    time: \"time\",\r\n    distance: \"distance\",\r\n};\r\nexport const DEFAULT_ZONE_LAYER_OPACITY = 0.3;\r\nexport const HIGHLIGHTED_ZONE_LAYER_OPACITY = 0.8;\r\nexport const DEFAULT_ZONE_LAYER_COLOR = \"#008888\";\r\nexport const DEFAULT_RADIUS_LAYER_COLOR = \"#292828\";\r\nexport const DEFAULT_RADIUS = 1;\r\nexport const DEFAULT_TIME = 10;\r\nexport const DEFAULT_MODE = RadiusModes.time;\r\nexport const MAP_ID = \"mapbox-container-element-id\";\r\nexport const CONTROL_BASE_CLASS_NAME = \"map-controll\";\r\nexport const CONTROL_BUTTON_CLASS_NAME = `${CONTROL_BASE_CLASS_NAME}__button`;\r\nexport const CONTROL_BUTTON_ACTIVE_CLASS_NAME = `${CONTROL_BUTTON_CLASS_NAME}_active`;\r\nexport const POPUP_BASE_CLASS_NAME = \"map-popup\";\r\nexport const POPUP_BUTTON_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__button`;\r\nexport const POPUP_INPUT_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__input`;\r\nexport const POPUP_LABEL_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__label`;\r\nexport const POPUP_TITLE_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__title`;\r\nexport const POPUP_COLOR_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__color`;\r\nexport const POPUP_RADIUS_MODE_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__radius-mode`;\r\nexport const POPUP_CONTROLS_CLASS_NAME = `${POPUP_BASE_CLASS_NAME}__controls`;\r\nexport const TABLE_BASE_CLASS_NAME = \"map-table\";\r\nexport const TABLE_TITLE_CLASS_NAME = `${TABLE_BASE_CLASS_NAME}__title`;\r\nexport const TABLE_ZONES_CLASS_NAME = `${TABLE_BASE_CLASS_NAME}__zones`;\r\n","import React from \"react\";\r\nimport { POPUP_LABEL_CLASS_NAME, POPUP_INPUT_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const InputRadius = ({ radius, onChange }) => {\r\n    return (\r\n        <>\r\n            <label htmlFor=\"popup-input-radius\" className={POPUP_LABEL_CLASS_NAME}>\r\n                Enter radius (km):\r\n            </label>\r\n            <br />\r\n            <input\r\n                type=\"number\"\r\n                id=\"popup-input-radius\"\r\n                defaultValue={radius || 0}\r\n                className={POPUP_INPUT_CLASS_NAME}\r\n                onChange={onChange}\r\n            />\r\n            <br />\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_BASE_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const Popup = ({ children }) => {\r\n    return <div className={POPUP_BASE_CLASS_NAME}>{children}</div>;\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_BUTTON_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const PopupButton = ({ text, onClick }) => {\r\n    return (\r\n        <button className={POPUP_BUTTON_CLASS_NAME} onClick={onClick} type=\"button\">\r\n            {text || \" \"}\r\n        </button>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_RADIUS_MODE_CLASS_NAME, RadiusModes } from \"../utils/constants\";\r\n\r\nexport const RadiusMode = ({ mode, onChangeMode }) => {\r\n    return (\r\n        <div className={POPUP_RADIUS_MODE_CLASS_NAME}>\r\n            <label htmlFor=\"radius-mode-time\">Time</label>\r\n            <input\r\n                type=\"radio\"\r\n                id=\"radius-mode-time\"\r\n                value={RadiusModes.time}\r\n                name=\"radius-mode\"\r\n                checked={mode === RadiusModes.time}\r\n                onChange={onChangeMode}\r\n            />\r\n            <label htmlFor=\"radius-mode-distance\">Distance</label>\r\n            <input\r\n                type=\"radio\"\r\n                id=\"radius-mode-distance\"\r\n                value={RadiusModes.distance}\r\n                name=\"radius-mode\"\r\n                checked={mode === RadiusModes.distance}\r\n                onChange={onChangeMode}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_LABEL_CLASS_NAME, POPUP_INPUT_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const InputTime = ({ time, onChange }) => {\r\n    return (\r\n        <>\r\n            <label htmlFor=\"popup-input-time\" className={POPUP_LABEL_CLASS_NAME}>\r\n                Enter time (min):\r\n            </label>\r\n            <br />\r\n            <input\r\n                type=\"number\"\r\n                id=\"popup-input-time\"\r\n                defaultValue={time || 0}\r\n                className={POPUP_INPUT_CLASS_NAME}\r\n                onChange={onChange}\r\n                max={60}\r\n            />\r\n            <br />\r\n        </>\r\n    );\r\n};\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { InputRadius } from \"./input-radius\";\r\nimport { Popup } from \"./popup\";\r\nimport { PopupButton } from \"./popup-button\";\r\nimport { POPUP_CONTROLS_CLASS_NAME, RadiusModes } from \"../utils/constants\";\r\nimport { RadiusMode } from \"./radius-mode\";\r\nimport { InputTime } from \"./input-time\";\r\n\r\nexport const RadiusPopup = ({ radius, onChangeRadius, onClickSelect, onChangeMode, time, onChangeTime, mode }) => {\r\n    const [stateMode, setMode] = useState(mode);\r\n    const handleChangeMode = useCallback(\r\n        (e) => {\r\n            setMode(e.target.value);\r\n            onChangeMode(e);\r\n        },\r\n        [onChangeMode],\r\n    );\r\n    const [stateRadius, setRadius] = useState(radius);\r\n    const handleChangeRadius = useCallback(\r\n        (e) => {\r\n            setRadius(e.target.value);\r\n            onChangeRadius(e);\r\n        },\r\n        [onChangeRadius],\r\n    );\r\n    const [stateTime, setTime] = useState(time);\r\n    const handleChangeTime = useCallback(\r\n        (e) => {\r\n            setTime(e.target.value);\r\n            onChangeTime(e);\r\n        },\r\n        [onChangeTime],\r\n    );\r\n    return (\r\n        <Popup>\r\n            <RadiusMode mode={stateMode} onChangeMode={handleChangeMode} />\r\n            {stateMode === RadiusModes.time && <InputTime time={stateTime} onChange={handleChangeTime} />}\r\n            {stateMode === RadiusModes.distance && <InputRadius radius={stateRadius} onChange={handleChangeRadius} />}\r\n            <div className={POPUP_CONTROLS_CLASS_NAME}>\r\n                <PopupButton text=\"Select\" onClick={onClickSelect} />\r\n            </div>\r\n        </Popup>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RadiusPopup } from \"../componets/radius-popup\";\r\n\r\nexport const MarkerLayerEvents = {\r\n    dragend: \"dragend\",\r\n    radiusChanged: \"radiusChanged\",\r\n    buttonClick: \"buttonClick\",\r\n    modeChanged: \"modeChanged\",\r\n    timeChanged: \"timeChanged\",\r\n};\r\n\r\nexport class MarkerLayer extends mapboxgl.Evented {\r\n    radiusInputId = \"marker-input-radius\";\r\n    radiusButtonId = \"marker-button-radius\";\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    constructor(map) {\r\n        super();\r\n        this.map = map;\r\n\r\n        this.marker = new mapboxgl.Marker({\r\n            draggable: true,\r\n        });\r\n\r\n        this.popupContainer = document.createElement(\"div\");\r\n        this.popup = new mapboxgl.Popup({ closeButton: true, closeOnClick: true, closeOnMove: false }).setDOMContent(\r\n            this.popupContainer,\r\n        );\r\n    }\r\n\r\n    remove() {\r\n        if (this.marker) this.marker.remove();\r\n        if (this.popup) this.popup.remove();\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.LngLat} coor\r\n     */\r\n    init(coor, initData) {\r\n        this.marker.setLngLat(coor.toArray());\r\n        this.marker.setPopup(this.popup);\r\n        this.marker.addTo(this.map);\r\n        this.marker.togglePopup();\r\n        this.marker.on(\"dragend\", this.onDragEnd);\r\n        ReactDOM.render(\r\n            <RadiusPopup\r\n                radius={initData.radius}\r\n                time={initData.time}\r\n                mode={initData.mode}\r\n                onChangeRadius={this.onRadiusChange}\r\n                onClickSelect={this.onButtonClick}\r\n                onChangeMode={this.onChangeMode}\r\n                onChangeTime={this.onTimeChange}\r\n            />,\r\n            this.popupContainer,\r\n        );\r\n    }\r\n\r\n    onChangeMode = (e) => {\r\n        this.fire(MarkerLayerEvents.modeChanged, { mode: e.target.value });\r\n    };\r\n\r\n    onTimeChange = (e) => {\r\n        this.fire(MarkerLayerEvents.timeChanged, { time: Number(e.target.value) });\r\n    };\r\n\r\n    onRadiusChange = (e) => {\r\n        this.fire(MarkerLayerEvents.radiusChanged, { radius: Number(e.target.value) });\r\n    };\r\n\r\n    onDragEnd = () => {\r\n        const lngLat = this.marker.getLngLat();\r\n        this.fire(MarkerLayerEvents.dragend, { lngLat });\r\n    };\r\n\r\n    onButtonClick = () => {\r\n        this.fire(MarkerLayerEvents.buttonClick);\r\n    };\r\n}\r\n","import * as turf from \"@turf/turf\";\r\nimport { DEFAULT_ZONE_LAYER_COLOR, DEFAULT_RADIUS, DEFAULT_TIME, DEFAULT_MODE } from \"./constants\";\r\n\r\nexport function generateUniqueId() {\r\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\r\n}\r\n\r\nexport function getDefaultZone() {\r\n    return {\r\n        name: \"\",\r\n        color: DEFAULT_ZONE_LAYER_COLOR,\r\n        id: null,\r\n        coordinates: [],\r\n    };\r\n}\r\n\r\nexport function getDefaultUserData() {\r\n    return {\r\n        lngLat: null,\r\n        radius: DEFAULT_RADIUS,\r\n        time: DEFAULT_TIME,\r\n        mode: DEFAULT_MODE,\r\n        zones: [],\r\n    };\r\n}\r\n\r\nexport function getCenterZoneByCoordinates(coordinates) {\r\n    const simlified = getDrawingLine(coordinates);\r\n    if (!simlified) return;\r\n    const center = turf.center(simlified);\r\n    return center;\r\n}\r\n\r\nexport function getCenterZoneCoorByCoordinates(coordinates) {\r\n    const center = getCenterZoneByCoordinates(coordinates);\r\n    if (!center) return;\r\n    const coor = turf.getCoord(center);\r\n    return coor;\r\n}\r\n\r\nexport function getZonePolygonByCoordinates(coordinates, id) {\r\n    const line = getDrawingLine(coordinates, id);\r\n    if (!line || line.geometry.coordinates.length < 4) return;\r\n    let polygon = turf.lineToPolygon(line);\r\n    const kinks = turf.kinks(polygon);\r\n    if (kinks.features.length) {\r\n        polygon = turf.unkinkPolygon(polygon);\r\n    }\r\n    return polygon;\r\n}\r\n\r\nexport function getZoneLineByCoordinates(coordinates, id) {\r\n    const simlified = getDrawingLine(coordinates, id);\r\n    if (!simlified || simlified.geometry.coordinates.length < 4) return;\r\n    const polygon = turf.lineToPolygon(simlified);\r\n    const polygonedLine = turf.polygonToLine(polygon);\r\n    return polygonedLine;\r\n}\r\n\r\nexport function getDrawingLine(coordinates, id) {\r\n    if (coordinates.length < 2) return;\r\n    const line = turf.lineString(coordinates, { id });\r\n    const simlified = turf.cleanCoords(turf.simplify(line, { tolerance: 0.00001, highQuality: true }));\r\n    return simlified;\r\n}\r\n\r\nexport function getCircleByRadius(center, radius) {\r\n    return turf.circle(center.toArray(), radius);\r\n}\r\n\r\nexport function getLineByRadius(center, radius) {\r\n    if (!center || !radius) return;\r\n    const circle = turf.circle(center.toArray(), radius);\r\n    return turf.polygonToLine(circle);\r\n}\r\n\r\nexport function getLineByPolygonData(polygonData) {\r\n    const coords = turf.coordAll(polygonData);\r\n    return turf.lineString(coords);\r\n}\r\n\r\nexport function isZoneIntersectedRadius(radius, center, zoneCoordinates) {\r\n    if (zoneCoordinates.length < 2) return;\r\n    const line = turf.lineString(zoneCoordinates);\r\n    const point = turf.point(center.toArray());\r\n    const distance = turf.pointToLineDistance(point, line);\r\n    return distance <= radius;\r\n}\r\n\r\nexport function isZoneIntersectedTime(timePolygon, zoneCoordinates) {\r\n    if (!timePolygon || !zoneCoordinates) return;\r\n    const polygon = getZonePolygonByCoordinates(zoneCoordinates);\r\n    const timeFeature = timePolygon.features[0];\r\n    const points = turf.explode(polygon);\r\n    if (!points || !points.features.length) return;\r\n\r\n    for (let i = 0; i < points.features.length; i++) {\r\n        const point = points.features[i];\r\n        if (turf.booleanPointInPolygon(point, timeFeature)) return true;\r\n    }\r\n}\r\n","import { DEFAULT_RADIUS_LAYER_COLOR, DEFAULT_ZONE_LAYER_OPACITY } from \"./constants\";\r\n\r\nexport function enableMapInteraction(map) {\r\n    if (!map) return;\r\n    map.dragPan.enable();\r\n    map.boxZoom.enable();\r\n    map.scrollZoom.enable();\r\n    map.dragRotate.enable();\r\n    map.doubleClickZoom.enable();\r\n    map.touchZoomRotate.enable();\r\n    map.touchPitch.enable();\r\n}\r\n\r\nexport function disableMapInteraction(map) {\r\n    if (!map) return;\r\n    map.dragPan.disable();\r\n    map.boxZoom.disable();\r\n    map.scrollZoom.disable();\r\n    map.dragRotate.disable();\r\n    map.doubleClickZoom.disable();\r\n    map.touchZoomRotate.disable();\r\n    map.touchPitch.disable();\r\n}\r\n\r\nexport function setDefaultCursor(map) {\r\n    if (!map) return;\r\n    map.getCanvas().style.cursor = \"default\";\r\n}\r\n\r\nexport function resetCursor(map) {\r\n    if (!map) return;\r\n    map.getCanvas().style.cursor = \"\";\r\n}\r\n\r\nexport function getZoneLineLayout() {\r\n    return {\r\n        \"line-join\": \"round\",\r\n        \"line-cap\": \"round\",\r\n    };\r\n}\r\n\r\nexport function getZoneLinePaint(color) {\r\n    return {\r\n        \"line-color\": color,\r\n        \"line-width\": [\"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 5, 1, 16, 6],\r\n    };\r\n}\r\n\r\nexport function getZonePolygonPaint(color) {\r\n    return {\r\n        \"fill-color\": color,\r\n        \"fill-opacity\": DEFAULT_ZONE_LAYER_OPACITY,\r\n        \"fill-outline-color\": \"transparent\",\r\n    };\r\n}\r\n\r\nexport function getRadiusPolygonPaint() {\r\n    return {\r\n        \"fill-color\": DEFAULT_RADIUS_LAYER_COLOR,\r\n        \"fill-opacity\": 0.3,\r\n    };\r\n}\r\n\r\nexport function getRadiusLineLayout() {\r\n    return {\r\n        \"line-join\": \"round\",\r\n        \"line-cap\": \"round\",\r\n    };\r\n}\r\n\r\nexport function getRadiusLinePaint() {\r\n    return {\r\n        \"line-color\": DEFAULT_RADIUS_LAYER_COLOR,\r\n        \"line-width\": [\"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 5, 1, 16, 6],\r\n        \"line-dasharray\": [5, 3],\r\n    };\r\n}\r\n","import { getLineByRadius } from \"../utils/zone-helpers\";\r\nimport { getRadiusLineLayout, getRadiusLinePaint } from \"../utils/map-helpers\";\r\n\r\nexport class RadiusStrokeLayer {\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map) {\r\n        this.map = map;\r\n        this.layerId = `radius-stroke-layer`;\r\n        this.sourceId = `radius-stroke-source`;\r\n    }\r\n\r\n    update(radius, coor) {\r\n        this.addSource(radius, coor);\r\n        this.addLayer();\r\n    }\r\n\r\n    addSource(radius, coor) {\r\n        const data = getLineByRadius(coor, radius);\r\n        if (!data) return;\r\n\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"line\",\r\n            layout: getRadiusLineLayout(),\r\n            paint: getRadiusLinePaint(),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import { getCircleByRadius } from \"../utils/zone-helpers\";\r\nimport { RadiusStrokeLayer } from \"./radius-stroke-layer\";\r\nimport { getRadiusPolygonPaint } from \"../utils/map-helpers\";\r\n\r\nexport class RadiusLayer {\r\n    layerId = \"radius-layer\";\r\n    sourceId = \"radius-source\";\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    constructor(map) {\r\n        this.map = map;\r\n        this.strokeLayer = new RadiusStrokeLayer(map);\r\n    }\r\n\r\n    update(radius, coor) {\r\n        if (radius > 0) {\r\n            this.addSource(radius, coor);\r\n            this.addLayer();\r\n            this.strokeLayer.update(radius, coor);\r\n        } else {\r\n            this.remove();\r\n        }\r\n    }\r\n\r\n    addSource(radius, coor) {\r\n        const source = this.getSource();\r\n        const data = getCircleByRadius(coor, radius);\r\n        if (source) {\r\n            source.setData(data);\r\n        } else {\r\n            this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n        }\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"fill\",\r\n            paint: getRadiusPolygonPaint(),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n        this.strokeLayer.remove();\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","/** This is dummy function to simulate a delay in response from api  */\r\nexport async function delay() {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve();\r\n        }, 100);\r\n    });\r\n}\r\n","import { delay } from \"../utils/api-helpers\";\r\n\r\nexport class UserApi {\r\n    async sendInfoAboutIncludedZones(info) {\r\n        await delay();\r\n        console.log(info);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { TABLE_BASE_CLASS_NAME, TABLE_TITLE_CLASS_NAME, TABLE_ZONES_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const ZoneTable = ({ zones, itHasPoint }) => {\r\n    const getContent = () => {\r\n        if (!itHasPoint) {\r\n            return <span className={TABLE_TITLE_CLASS_NAME}>Set point on the map</span>;\r\n        }\r\n        if (!zones.length) {\r\n            return <span className={TABLE_TITLE_CLASS_NAME}>No zones in the radius</span>;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <span className={TABLE_TITLE_CLASS_NAME}>You have selected the following zones:</span>\r\n                <div className={TABLE_ZONES_CLASS_NAME}>\r\n                    {zones.map((zone) => (\r\n                        <span key={zone.id}>{zone.name}</span>\r\n                    ))}\r\n                </div>\r\n            </>\r\n        );\r\n    };\r\n\r\n    return <div className={TABLE_BASE_CLASS_NAME}>{getContent()}</div>;\r\n};\r\n","import mapboxgl from \"mapbox-gl\";\r\nimport axios from \"axios\";\r\n\r\nconst CancelToken = axios.CancelToken;\r\nlet cancelFetch = null;\r\n\r\nexport class MapboxApi {\r\n    cancelIsochroneFetch() {\r\n        if (cancelFetch) cancelFetch();\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.LngLat} coor\r\n     * @param {number} minutes\r\n     */\r\n    async getIsochrone(coor, minutes) {\r\n        this.cancelIsochroneFetch();\r\n        const url = `https://api.mapbox.com/isochrone/v1/mapbox/driving/${coor.lng},${coor.lat}?contours_minutes=${minutes}&polygons=true&access_token=${mapboxgl.accessToken}`;\r\n        try {\r\n            const { data } = await axios.get(url, {\r\n                cancelToken: new CancelToken((c) => {\r\n                    cancelFetch = c;\r\n                }),\r\n            });\r\n            return data;\r\n        } catch (error) {\r\n            console.error(error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n","import { getLineByPolygonData } from \"../utils/zone-helpers\";\r\nimport { getRadiusLineLayout, getRadiusLinePaint } from \"../utils/map-helpers\";\r\n\r\nexport class IsochroneStrokeLayer {\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map) {\r\n        this.map = map;\r\n        this.layerId = `isochrone-stroke-layer`;\r\n        this.sourceId = `isochrone-stroke-source`;\r\n    }\r\n\r\n    update(polygonData) {\r\n        this.addSource(polygonData);\r\n        this.addLayer();\r\n    }\r\n\r\n    addSource(polygonData) {\r\n        if (!polygonData) return;\r\n        const data = getLineByPolygonData(polygonData);\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"line\",\r\n            layout: getRadiusLineLayout(),\r\n            paint: getRadiusLinePaint(),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import { MapboxApi } from \"../api/mapbox-api\";\r\nimport { IsochroneStrokeLayer } from \"./isochrone-stroke-layer\";\r\nimport { getRadiusPolygonPaint } from \"../utils/map-helpers\";\r\n\r\nexport class IsochroneLayer {\r\n    layerId = \"isochrone-layer\";\r\n    sourceId = \"isochrone-source\";\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    constructor(map) {\r\n        this.map = map;\r\n        this.strokeLayer = new IsochroneStrokeLayer(map);\r\n        this.mapboxApi = new MapboxApi();\r\n    }\r\n\r\n    async update(time, coor) {\r\n        if (time > 0) {\r\n            await this.addSource(time, coor);\r\n            this.addLayer();\r\n            this.strokeLayer.update(this.data);\r\n        } else {\r\n            this.remove();\r\n        }\r\n    }\r\n\r\n    async addSource(time, coor) {\r\n        const source = this.getSource();\r\n        try {\r\n            this.data = await this.mapboxApi.getIsochrone(coor, time);\r\n            if (source) {\r\n                source.setData(this.data);\r\n            } else {\r\n                this.map.addSource(this.sourceId, { type: \"geojson\", data: this.data });\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    getFeatureCollection() {\r\n        return this.data;\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"fill\",\r\n            paint: getRadiusPolygonPaint(),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        this.mapboxApi.cancelIsochroneFetch();\r\n        this.data = null;\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n        if (this.strokeLayer) this.strokeLayer.remove();\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { MarkerLayer, MarkerLayerEvents } from \"../layers/marker-layer\";\r\nimport { RadiusLayer } from \"../layers/radius-layer\";\r\nimport { getDefaultUserData, isZoneIntersectedRadius, isZoneIntersectedTime } from \"../utils/zone-helpers\";\r\nimport { UserApi } from \"../api/user-api\";\r\nimport { MAP_ID, RadiusModes } from \"../utils/constants\";\r\nimport { ZoneTable } from \"../componets/zone-table\";\r\nimport { IsochroneLayer } from \"../layers/isochrone-layer\";\r\n\r\nexport class UserControll {\r\n    data = getDefaultUserData();\r\n    radiusMode = RadiusModes.time;\r\n    itHasPoint = false;\r\n\r\n    /**\r\n     * @param {import('./zone-controll').ZoneControll} zoneControll\r\n     */\r\n    constructor(zoneControll) {\r\n        this.zoneControll = zoneControll;\r\n        this.userApi = new UserApi();\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    onAdd(map) {\r\n        this.map = map;\r\n        this.container = document.createElement(\"div\");\r\n        this.container.className = \"mapboxgl-ctrl\";\r\n        this.table = document.createElement(\"div\");\r\n        const mapElement = document.getElementById(MAP_ID);\r\n        if (mapElement) mapElement.appendChild(this.table);\r\n        this.enableUserMode();\r\n        return this.container;\r\n    }\r\n\r\n    onRemove() {\r\n        this.disableUserMode();\r\n        if (this.table) this.table.parentNode.removeChild(this.table);\r\n        if (this.container) this.container.parentNode.removeChild(this.container);\r\n        this.data = getDefaultUserData();\r\n        this.itHasPoint = false;\r\n        this.map = undefined;\r\n    }\r\n\r\n    disableUserMode() {\r\n        if (this.markerLayer) this.markerLayer.remove();\r\n        if (this.radiusLayer) this.radiusLayer.remove();\r\n        if (this.isochroneLayer) this.isochroneLayer.remove();\r\n        if (this.map) this.map.off(\"click\", this.onMapClick);\r\n        this.removeUserTable();\r\n    }\r\n\r\n    updateUserTable() {\r\n        ReactDOM.render(<ZoneTable itHasPoint={this.itHasPoint} zones={this.data.zones} />, this.table);\r\n    }\r\n\r\n    removeUserTable() {\r\n        if (this.table) ReactDOM.unmountComponentAtNode(this.table);\r\n    }\r\n\r\n    enableUserMode() {\r\n        this.markerLayer = new MarkerLayer(this.map);\r\n        this.radiusLayer = new RadiusLayer(this.map);\r\n        this.isochroneLayer = new IsochroneLayer(this.map);\r\n        this.markerLayer.on(MarkerLayerEvents.dragend, this.onDragEndMarker);\r\n        this.markerLayer.on(MarkerLayerEvents.radiusChanged, this.onRadiusChanged);\r\n        this.markerLayer.on(MarkerLayerEvents.buttonClick, this.onButtonClick);\r\n        this.markerLayer.on(MarkerLayerEvents.modeChanged, this.onModeChanged);\r\n        this.markerLayer.on(MarkerLayerEvents.timeChanged, this.onTimeChanged);\r\n        this.map.once(\"click\", this.onMapClick);\r\n        this.updateUserTable();\r\n    }\r\n\r\n    onTimeChanged = ({ time }) => {\r\n        this.data.time = time;\r\n        this.updateRadiusLayer();\r\n    };\r\n\r\n    onModeChanged = ({ mode }) => {\r\n        this.data.mode = mode;\r\n        this.updateRadiusLayer();\r\n    };\r\n\r\n    onButtonClick = async () => {\r\n        await this.userApi.sendInfoAboutIncludedZones(this.data);\r\n    };\r\n\r\n    onRadiusChanged = ({ radius }) => {\r\n        this.data.radius = radius;\r\n        this.updateRadiusLayer();\r\n    };\r\n\r\n    onDragEndMarker = ({ lngLat }) => {\r\n        this.data.lngLat = lngLat;\r\n        this.updateRadiusLayer();\r\n    };\r\n\r\n    findZonesInRadius() {\r\n        const isTimeMode = this.data.mode === RadiusModes.time;\r\n        const isDistanceMode = this.data.mode === RadiusModes.distance;\r\n        const hasRadius = isDistanceMode && this.data.radius > 0;\r\n        const hasTime = isTimeMode && this.data.time > 0;\r\n\r\n        if (!this.data.lngLat || (!hasRadius && !hasTime)) {\r\n            this.data.zones = [];\r\n            this.updateUserTable();\r\n            return;\r\n        }\r\n\r\n        const zones = this.zoneControll.getZoneList();\r\n        const polygonData = this.isochroneLayer.getFeatureCollection();\r\n\r\n        const intersectedZones = zones.filter((zone) => {\r\n            if (isDistanceMode) return isZoneIntersectedRadius(this.data.radius, this.data.lngLat, zone.coordinates);\r\n            return isZoneIntersectedTime(polygonData, zone.coordinates);\r\n        });\r\n\r\n        this.data.zones = intersectedZones.map((el) => ({ name: el.name, id: el.id }));\r\n\r\n        this.updateUserTable();\r\n    }\r\n\r\n    async updateRadiusLayer() {\r\n        if (!this.data.lngLat) return;\r\n\r\n        if (this.data.mode === RadiusModes.time) {\r\n            if (this.radiusLayer) this.radiusLayer.remove();\r\n            await this.isochroneLayer.update(this.data.time, this.data.lngLat);\r\n        } else {\r\n            if (this.isochroneLayer) this.isochroneLayer.remove();\r\n            this.radiusLayer.update(this.data.radius, this.data.lngLat);\r\n        }\r\n\r\n        this.findZonesInRadius();\r\n    }\r\n\r\n    onMapClick = (e) => {\r\n        this.markerLayer.init(e.lngLat, this.data);\r\n        this.data.lngLat = e.lngLat;\r\n        this.itHasPoint = true;\r\n        this.updateRadiusLayer();\r\n        this.updateUserTable();\r\n    };\r\n}\r\n","import { DEFAULT_ZONE_LAYER_COLOR } from \"../utils/constants\";\r\nimport { getZoneLineByCoordinates } from \"../utils/zone-helpers\";\r\nimport { getZoneLineLayout, getZoneLinePaint } from \"../utils/map-helpers\";\r\n\r\nexport class ZoneStrokeLayer {\r\n    /**\r\n     *\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map, id, options) {\r\n        const color = (options && options.color) || DEFAULT_ZONE_LAYER_COLOR;\r\n        this.map = map;\r\n        this.layerId = `zone-stroke-layer-${id}`;\r\n        this.sourceId = `zone-stroke-source-${id}`;\r\n        this.id = id;\r\n        this.color = color;\r\n    }\r\n\r\n    update(coordinates) {\r\n        this.addSource(coordinates);\r\n        this.addLayer();\r\n    }\r\n\r\n    setColor(color) {\r\n        this.color = color;\r\n        this.map.setPaintProperty(this.layerId, \"line-color\", color);\r\n    }\r\n\r\n    addSource(coordinates) {\r\n        const data = getZoneLineByCoordinates(coordinates, this.id);\r\n        if (!data) return;\r\n\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"line\",\r\n            layout: getZoneLineLayout(),\r\n            paint: getZoneLinePaint(this.color),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import { getCenterZoneByCoordinates } from \"../utils/zone-helpers\";\r\n\r\nexport class ZoneNameLayer {\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map, id, options) {\r\n        this.name = options && options.name ? options.name : \" \";\r\n        this.map = map;\r\n        this.layerId = `zone-name-layer-${id}`;\r\n        this.sourceId = `zone-name-source-${id}`;\r\n        this.id = id;\r\n    }\r\n\r\n    updateName(name) {\r\n        this.name = name;\r\n        this.map.setLayoutProperty(this.layerId, \"text-field\", name);\r\n    }\r\n\r\n    update(coordinates) {\r\n        this.addSource(coordinates);\r\n        this.addLayer();\r\n    }\r\n\r\n    addSource(coordinates) {\r\n        const data = getCenterZoneByCoordinates(coordinates);\r\n        if (!data) return;\r\n\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            minzoom: 12,\r\n            type: \"symbol\",\r\n            layout: {\r\n                \"text-field\": this.name,\r\n                \"text-size\": [\"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 12, 12, 18, 46],\r\n            },\r\n            paint: {\r\n                \"text-color\": \"white\",\r\n            },\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import { getZonePolygonByCoordinates } from \"../utils/zone-helpers\";\r\nimport {\r\n    DEFAULT_ZONE_LAYER_COLOR,\r\n    HIGHLIGHTED_ZONE_LAYER_OPACITY,\r\n    DEFAULT_ZONE_LAYER_OPACITY,\r\n} from \"../utils/constants\";\r\nimport { ZoneStrokeLayer } from \"./zone-stroke-layer\";\r\nimport { ZoneNameLayer } from \"./zone-name-layer\";\r\nimport { getZonePolygonPaint } from \"../utils/map-helpers\";\r\n\r\nexport class ZoneLayer {\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map, id, options) {\r\n        this.map = map;\r\n        this.layerId = `zone-layer-${id}`;\r\n        this.sourceId = `zone-source-${id}`;\r\n        this.id = id;\r\n        this.color = (options && options.color) || DEFAULT_ZONE_LAYER_COLOR;\r\n        this.strokeLayer = new ZoneStrokeLayer(map, id, options);\r\n        this.nameLayer = new ZoneNameLayer(map, id, options);\r\n    }\r\n\r\n    update(coordinates, isEdit = false) {\r\n        this.addSource(coordinates);\r\n        this.addLayer();\r\n        this.strokeLayer.update(coordinates);\r\n        if (!isEdit) this.nameLayer.update(coordinates);\r\n    }\r\n\r\n    updateName(name) {\r\n        this.nameLayer.updateName(name);\r\n    }\r\n\r\n    setColor(color) {\r\n        this.color = color;\r\n        this.map.setPaintProperty(this.layerId, \"fill-color\", color);\r\n        this.strokeLayer.setColor(color);\r\n    }\r\n\r\n    addHighlight() {\r\n        this.map.setPaintProperty(this.layerId, \"fill-opacity\", HIGHLIGHTED_ZONE_LAYER_OPACITY);\r\n    }\r\n\r\n    removeHighlight() {\r\n        this.map.setPaintProperty(this.layerId, \"fill-opacity\", DEFAULT_ZONE_LAYER_OPACITY);\r\n    }\r\n\r\n    addSource(coordinates) {\r\n        const data = getZonePolygonByCoordinates(coordinates, this.id);\r\n        if (!data) return;\r\n\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"fill\",\r\n            paint: getZonePolygonPaint(this.color),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n        this.strokeLayer.remove();\r\n        this.nameLayer.remove();\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import { CONTROL_BUTTON_CLASS_NAME, CONTROL_BUTTON_ACTIVE_CLASS_NAME } from \"./constants\";\r\n\r\nexport function createControllButton(content, callback) {\r\n    const button = document.createElement(\"button\");\r\n    button.className = CONTROL_BUTTON_CLASS_NAME;\r\n    button.innerHTML = content;\r\n    button.addEventListener(\"click\", callback);\r\n    return button;\r\n}\r\n\r\nexport function removeActiveClassForButton(button) {\r\n    if (button.classList.contains(CONTROL_BUTTON_ACTIVE_CLASS_NAME)) {\r\n        button.classList.remove(CONTROL_BUTTON_ACTIVE_CLASS_NAME);\r\n    }\r\n}\r\n\r\nexport function addActiveClassForButton(button) {\r\n    if (!button.classList.contains(CONTROL_BUTTON_ACTIVE_CLASS_NAME)) {\r\n        button.classList.add(CONTROL_BUTTON_ACTIVE_CLASS_NAME);\r\n    }\r\n}\r\n","import localForage from \"localforage\";\r\n\r\nexport class ZoneApi {\r\n    localStoragekey = \"mapZones\";\r\n\r\n    constructor() {\r\n        localForage.config({\r\n            driver: localForage.INDEXEDDB,\r\n            name: \"mapZones\",\r\n            version: 1.0,\r\n            storeName: this.localStoragekey,\r\n        });\r\n    }\r\n\r\n    async getZoneList() {\r\n        try {\r\n            const zones = await localForage.getItem(this.localStoragekey);\r\n            return zones;\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    async addZone(zone) {\r\n        try {\r\n            let newZones = [];\r\n            const zones = await this.getZoneList();\r\n            if (zones) newZones = [...zones];\r\n            newZones.push(zone);\r\n            await localForage.setItem(this.localStoragekey, newZones);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    async updateZone(zone) {\r\n        try {\r\n            const zones = await this.getZoneList();\r\n            if (!zones) return;\r\n            const newZones = zones.map((el) => {\r\n                if (el.id === zone.id) return zone;\r\n                return el;\r\n            });\r\n            await localForage.setItem(this.localStoragekey, newZones);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    async deleteZone(id) {\r\n        try {\r\n            const zones = await this.getZoneList();\r\n            if (!zones) return;\r\n            const newZones = zones.filter((el) => el.id !== id);\r\n            await localForage.setItem(this.localStoragekey, newZones);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { POPUP_LABEL_CLASS_NAME, POPUP_INPUT_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const InputName = ({ name, onChange }) => {\r\n    return (\r\n        <>\r\n            <label htmlFor=\"popup-input-name\" className={POPUP_LABEL_CLASS_NAME}>\r\n                Enter zone name:\r\n            </label>\r\n            <br />\r\n            <input\r\n                type=\"text\"\r\n                id=\"popup-input-name\"\r\n                defaultValue={name || \" \"}\r\n                className={POPUP_INPUT_CLASS_NAME}\r\n                onChange={onChange}\r\n            />\r\n            <br />\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { POPUP_COLOR_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport class ColorPicker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            displayColorPicker: false,\r\n            color: props.color,\r\n        };\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.setState({ displayColorPicker: !this.state.displayColorPicker });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ displayColorPicker: false });\r\n    };\r\n\r\n    handleChange = (color) => {\r\n        const { onChange } = this.props;\r\n        this.setState({ color: color.hex });\r\n        onChange(color);\r\n    };\r\n\r\n    render() {\r\n        const { color } = this.state;\r\n\r\n        return (\r\n            <div className={`${POPUP_COLOR_CLASS_NAME}__picker`}>\r\n                <div className={`${POPUP_COLOR_CLASS_NAME}__swatch`} onClick={this.handleClick}>\r\n                    <div className={`${POPUP_COLOR_CLASS_NAME}__select`} style={{ backgroundColor: color }} />\r\n                </div>\r\n                {this.state.displayColorPicker ? (\r\n                    <div className={`${POPUP_COLOR_CLASS_NAME}__popover`}>\r\n                        <div className={`${POPUP_COLOR_CLASS_NAME}__cover`} onClick={this.handleClose} />\r\n                        <SketchPicker color={color} onChange={this.handleChange} />\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { POPUP_COLOR_CLASS_NAME, POPUP_LABEL_CLASS_NAME, DEFAULT_ZONE_LAYER_COLOR } from \"../utils/constants\";\r\nimport { ColorPicker } from \"./color-picker\";\r\n\r\nexport const InputColor = ({ color, onChange }) => {\r\n    return (\r\n        <div className={POPUP_COLOR_CLASS_NAME}>\r\n            <label htmlFor=\"popup-input-color\" className={POPUP_LABEL_CLASS_NAME}>\r\n                Select zone color:\r\n            </label>\r\n            <ColorPicker color={color || DEFAULT_ZONE_LAYER_COLOR} onChange={onChange} />\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Popup } from \"./popup\";\r\nimport { InputName } from \"./input-name\";\r\nimport { InputColor } from \"./input-color\";\r\nimport { POPUP_CONTROLS_CLASS_NAME } from \"../utils/constants\";\r\nimport { PopupButton } from \"./popup-button\";\r\n\r\nexport const EditPopup = ({ name, onChangeName, color, onChangeColor, onClickEdit, onClickSave, onClickCancel }) => {\r\n    return (\r\n        <Popup>\r\n            <InputName name={name} onChange={onChangeName} />\r\n            <InputColor color={color} onChange={onChangeColor} />\r\n            <PopupButton text=\"Edit Geometry\" onClick={onClickEdit} />\r\n            <div className={POPUP_CONTROLS_CLASS_NAME}>\r\n                <PopupButton text=\"Cancel\" onClick={onClickCancel} />\r\n                <PopupButton text=\"Save\" onClick={onClickSave} />\r\n            </div>\r\n        </Popup>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Popup } from \"./popup\";\r\nimport { InputName } from \"./input-name\";\r\nimport { InputColor } from \"./input-color\";\r\nimport { POPUP_CONTROLS_CLASS_NAME } from \"../utils/constants\";\r\nimport { PopupButton } from \"./popup-button\";\r\n\r\nexport const CreatePopup = ({ name, color, onChangeName, onChangeColor, onClickCancel, onClickSave }) => {\r\n    return (\r\n        <Popup>\r\n            <InputName name={name} onChange={onChangeName} />\r\n            <InputColor color={color} onChange={onChangeColor} />\r\n            <div className={POPUP_CONTROLS_CLASS_NAME}>\r\n                <PopupButton text=\"Cancel\" onClick={onClickCancel} />\r\n                <PopupButton text=\"Save\" onClick={onClickSave} />\r\n            </div>\r\n        </Popup>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { POPUP_TITLE_CLASS_NAME } from \"../utils/constants\";\r\n\r\nexport const PopupTitle = ({ title }) => {\r\n    return <span className={POPUP_TITLE_CLASS_NAME}>{title || \" \"}</span>;\r\n};\r\n","import React from \"react\";\r\nimport { PopupTitle } from \"./popup-title\";\r\nimport { POPUP_CONTROLS_CLASS_NAME } from \"../utils/constants\";\r\nimport { Popup } from \"./popup\";\r\nimport { PopupButton } from \"./popup-button\";\r\n\r\nexport const DeletePopup = ({ name, onClickDelete, onClickCancel }) => {\r\n    return (\r\n        <Popup>\r\n            <PopupTitle title={`Do you want to delete a zone ${name}?`} />\r\n            <div className={POPUP_CONTROLS_CLASS_NAME}>\r\n                <PopupButton text=\"Cancel\" onClick={onClickCancel} />\r\n                <PopupButton text=\"Delete\" onClick={onClickDelete} />\r\n            </div>\r\n        </Popup>\r\n    );\r\n};\r\n","import { DEFAULT_ZONE_LAYER_COLOR } from \"../utils/constants\";\r\nimport { getDrawingLine } from \"../utils/zone-helpers\";\r\nimport { getZoneLineLayout, getZoneLinePaint } from \"../utils/map-helpers\";\r\n\r\nexport class DrawLayer {\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     * @param {string} id\r\n     */\r\n    constructor(map, id, options) {\r\n        const color = (options && options.color) || DEFAULT_ZONE_LAYER_COLOR;\r\n        this.map = map;\r\n        this.layerId = `zone-stroke-layer-${id}`;\r\n        this.sourceId = `zone-stroke-source-${id}`;\r\n        this.id = id;\r\n        this.color = color;\r\n    }\r\n\r\n    update(coordinates) {\r\n        this.addSource(coordinates);\r\n        this.addLayer();\r\n    }\r\n\r\n    addSource(coordinates) {\r\n        const data = getDrawingLine(coordinates, this.id);\r\n        if (!data) return;\r\n\r\n        const source = this.getSource();\r\n        if (source) {\r\n            return source.setData(data);\r\n        }\r\n\r\n        this.map.addSource(this.sourceId, { type: \"geojson\", data });\r\n    }\r\n\r\n    addLayer() {\r\n        if (this.gerLayer() || !this.getSource()) return;\r\n\r\n        this.map.addLayer({\r\n            id: this.layerId,\r\n            source: this.sourceId,\r\n            type: \"line\",\r\n            layout: getZoneLineLayout(),\r\n            paint: getZoneLinePaint(this.color),\r\n        });\r\n    }\r\n\r\n    remove() {\r\n        if (this.gerLayer()) this.map.removeLayer(this.layerId);\r\n        if (this.getSource()) this.map.removeSource(this.sourceId);\r\n    }\r\n\r\n    getSource() {\r\n        return this.map.getSource(this.sourceId);\r\n    }\r\n\r\n    gerLayer() {\r\n        return this.map.getLayer(this.layerId);\r\n    }\r\n}\r\n","import mapboxgl from \"mapbox-gl\";\r\nimport ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { ZoneLayer } from \"../layers/zone-layer\";\r\nimport { generateUniqueId, getDefaultZone, getCenterZoneCoorByCoordinates } from \"../utils/zone-helpers\";\r\nimport { getPlusIconSvg, getEditIconSvg, getDeleteIconSvg } from \"../utils/svg-helpers\";\r\nimport { enableMapInteraction, disableMapInteraction, setDefaultCursor, resetCursor } from \"../utils/map-helpers\";\r\nimport { createControllButton, removeActiveClassForButton, addActiveClassForButton } from \"../utils/dom-helpers\";\r\nimport { ZoneApi } from \"../api/zone-api\";\r\nimport { EditPopup } from \"../componets/edit-popup\";\r\nimport { CreatePopup } from \"../componets/create-popup\";\r\nimport { DeletePopup } from \"../componets/delete-popup\";\r\nimport { DrawLayer } from \"../layers/draw-layer\";\r\n\r\nexport class AdminControll {\r\n    isCreateMode = false;\r\n    isEditMode = false;\r\n    isDeleteMode = false;\r\n    isEditGeometryMode = false;\r\n    deleteZoneId = null;\r\n    editZoneId = null;\r\n    cacheZone = null;\r\n    newZone = getDefaultZone();\r\n    zoneLayerPatternId = /zone-layer-\\w/i;\r\n\r\n    /**\r\n     * @param {import('./zone-controll').ZoneControll} zoneControll\r\n     */\r\n    constructor(zoneControll) {\r\n        this.zoneControll = zoneControll;\r\n        this.zoneApi = new ZoneApi();\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    onAdd(map) {\r\n        this.map = map;\r\n        this.container = document.createElement(\"div\");\r\n        this.container.className = \"mapboxgl-ctrl mapboxgl-ctrl-group\";\r\n        this.createButton = createControllButton(getPlusIconSvg(), this.onClickCreateButton);\r\n        this.deleteButton = createControllButton(getDeleteIconSvg(), this.onClickDeleteButton);\r\n        this.editButton = createControllButton(getEditIconSvg(), this.onClickEditButton);\r\n        this.container.appendChild(this.createButton);\r\n        this.container.appendChild(this.deleteButton);\r\n        this.container.appendChild(this.editButton);\r\n        return this.container;\r\n    }\r\n\r\n    onRemove() {\r\n        this.container.parentNode.removeChild(this.container);\r\n        this.disableAllModes();\r\n        this.map = undefined;\r\n    }\r\n\r\n    //#region Edit zone\r\n\r\n    onClickEditButton = () => {\r\n        if (this.isEditMode) return this.disableEditMode();\r\n        this.disableAllModes();\r\n        this.enableEditMode();\r\n    };\r\n\r\n    enableEditMode = () => {\r\n        addActiveClassForButton(this.editButton);\r\n        this.addCursorPointerListener();\r\n        if (this.map) this.map.on(\"click\", this.onClickEdit);\r\n        this.isEditMode = true;\r\n    };\r\n\r\n    disableEditMode = () => {\r\n        removeActiveClassForButton(this.editButton);\r\n        this.removeCursorPointerListener();\r\n        if (this.map) this.map.off(\"click\", this.onClickEdit);\r\n        this.cancelEditZone();\r\n        this.editZone = null;\r\n        this.isEditMode = false;\r\n        this.isEditGeometryMode = false;\r\n    };\r\n\r\n    updateEditZoneLayer() {\r\n        if (!this.editZone || this.editZone.coordinates.length < 4) return;\r\n        this.drawEditLayer.update(this.editZone.coordinates);\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.MapMouseEvent & mapboxgl.EventData} e\r\n     */\r\n    onMouseUpEdit = (e) => {\r\n        if (this.map) this.map.off(\"mousemove\", this.onMouseMoveEdit);\r\n        if (this.editZone) this.showEditPopup(this.editZone.id);\r\n        this.drawEditLayer.remove();\r\n        if (this.editZone && this.editZone.coordinates.length > 4) {\r\n            this.zoneControll.updateZoneCoordinates(this.editZone.id, this.editZone.coordinates);\r\n        }\r\n        this.isEditGeometryMode = false;\r\n        enableMapInteraction(this.map);\r\n        resetCursor(this.map);\r\n        this.addCursorPointerListener();\r\n    };\r\n\r\n    /**\r\n     * @param {mapboxgl.MapMouseEvent & mapboxgl.EventData} e\r\n     */\r\n    onMouseMoveEdit = (e) => {\r\n        if (!this.editZone) return;\r\n        this.editZone.coordinates.push(e.lngLat.toArray());\r\n        this.updateEditZoneLayer();\r\n    };\r\n\r\n    /**\r\n     * @param {mapboxgl.MapMouseEvent & mapboxgl.EventData} e\r\n     */\r\n    onMouseDownEdit = (e) => {\r\n        if (this.map) this.map.on(\"mousemove\", this.onMouseMoveEdit);\r\n        if (this.map) this.map.once(\"mouseup\", this.onMouseUpEdit);\r\n    };\r\n\r\n    onGeometryEdit = () => {\r\n        this.isEditGeometryMode = true;\r\n        if (this.editPopup) this.editPopup.remove();\r\n        disableMapInteraction(this.map);\r\n        this.removeCursorPointerListener();\r\n        setDefaultCursor(this.map);\r\n        this.drawEditLayer = new DrawLayer(this.map, this.editZone.id, { color: this.editZone.color });\r\n        this.zoneControll.removeZoneLayer(this.editZone.id);\r\n        this.editZone.coordinates = [];\r\n        if (this.map) this.map.once(\"mousedown\", this.onMouseDownEdit);\r\n    };\r\n\r\n    onSaveEdit = async () => {\r\n        await this.zoneControll.updateZone(this.editZone);\r\n        if (this.editPopup) this.editPopup.remove();\r\n        this.editZone = null;\r\n    };\r\n\r\n    editZoneColor = (color) => {\r\n        const hex = color.hex;\r\n        this.editZone.color = hex;\r\n        this.zoneControll.updateZoneColor(this.editZone.id, hex);\r\n    };\r\n\r\n    editZoneName = (e) => {\r\n        this.editZone.name = e.target.value;\r\n    };\r\n\r\n    cancelEditZone = () => {\r\n        if (this.editPopup) this.editPopup.remove();\r\n    };\r\n\r\n    onClosePopup = () => {\r\n        this.zoneControll.drawZones();\r\n        if (!this.isEditGeometryMode) this.editZone = null;\r\n    };\r\n\r\n    showEditPopup() {\r\n        const coor = getCenterZoneCoorByCoordinates(this.editZone.coordinates);\r\n        if (!coor) return;\r\n\r\n        const popupContainer = document.createElement(\"div\");\r\n\r\n        this.editPopup = new mapboxgl.Popup({\r\n            closeButton: true,\r\n            closeOnClick: true,\r\n            closeOnMove: false,\r\n        })\r\n            .setLngLat(coor)\r\n            .setDOMContent(popupContainer)\r\n            .addTo(this.map);\r\n\r\n        this.editPopup.on(\"close\", () => this.onClosePopup());\r\n\r\n        ReactDOM.render(\r\n            <EditPopup\r\n                color={this.editZone.color}\r\n                name={this.editZone.name}\r\n                onChangeName={this.editZoneName}\r\n                onChangeColor={this.editZoneColor}\r\n                onClickCancel={this.cancelEditZone}\r\n                onClickSave={this.onSaveEdit}\r\n                onClickEdit={this.onGeometryEdit}\r\n            />,\r\n            popupContainer,\r\n        );\r\n    }\r\n\r\n    onClickEdit = (e) => {\r\n        const feature = this.getZoneFeatureByEvent(e);\r\n        if (!feature) return;\r\n        const zoneId = feature.properties.id;\r\n        if (this.editZone && zoneId === this.editZone.id) return;\r\n        // if (this.editPopup) this.editPopup.remove();\r\n        const zone = this.zoneControll.getZoneById(zoneId);\r\n        this.editZone = _.cloneDeep(zone);\r\n        this.showEditPopup();\r\n    };\r\n\r\n    //#endregion\r\n\r\n    //#region Create zone\r\n\r\n    onClickCreateButton = () => {\r\n        if (this.isCreateMode) return this.disableCreateMode();\r\n        this.disableAllModes();\r\n        this.enableCreateMode();\r\n    };\r\n\r\n    enableCreateMode() {\r\n        this.newZone = getDefaultZone();\r\n        const id = generateUniqueId();\r\n        this.newZone.id = id;\r\n        if (this.map) this.drawlayer = new DrawLayer(this.map, id);\r\n        this.newZonelayer = new ZoneLayer(this.map, id);\r\n        if (this.map) this.map.once(\"mousedown\", this.onMouseDownCreate);\r\n        addActiveClassForButton(this.createButton);\r\n        disableMapInteraction(this.map);\r\n        setDefaultCursor(this.map);\r\n        this.isCreateMode = true;\r\n    }\r\n\r\n    disableCreateMode = (isAutoClose = false) => {\r\n        this.newZone = getDefaultZone();\r\n        if (this.createPopup && !isAutoClose) this.createPopup.remove();\r\n        if (this.newZonelayer) this.newZonelayer.remove();\r\n        if (this.drawlayer) this.drawlayer.remove();\r\n        removeActiveClassForButton(this.createButton);\r\n        enableMapInteraction(this.map);\r\n        resetCursor(this.map);\r\n        this.isCreateMode = false;\r\n    };\r\n\r\n    setNewZoneName = (e) => {\r\n        this.newZone.name = e.target.value;\r\n    };\r\n\r\n    setNewZoneColor = (color) => {\r\n        const hex = color.hex;\r\n        this.newZone.color = hex;\r\n        this.updateColorInNewZone();\r\n    };\r\n\r\n    createZone = () => {\r\n        const zone = _.cloneDeep(this.newZone);\r\n        this.zoneControll.createZone(zone);\r\n        this.onClickCreateButton();\r\n        this.createPopup.remove();\r\n        this.newZonelayer.remove();\r\n        this.drawlayer.remove();\r\n        this.newZone = getDefaultZone();\r\n    };\r\n\r\n    updateColorInNewZone() {\r\n        this.newZonelayer.setColor(this.newZone.color);\r\n    }\r\n\r\n    showCreatePopup() {\r\n        const coor = getCenterZoneCoorByCoordinates(this.newZone.coordinates);\r\n        if (!coor) return;\r\n        const popupContainer = document.createElement(\"div\");\r\n        this.createPopup = new mapboxgl.Popup({\r\n            closeButton: true,\r\n            closeOnClick: false,\r\n            closeOnMove: false,\r\n        })\r\n            .setLngLat(coor)\r\n            .setDOMContent(popupContainer)\r\n            .addTo(this.map);\r\n        this.createPopup.on(\"close\", () => this.disableCreateMode(true));\r\n        const name = this.zoneControll.getNewZoneName();\r\n        this.newZone.name = name;\r\n        ReactDOM.render(\r\n            <CreatePopup\r\n                name={name}\r\n                color={null}\r\n                onChangeName={this.setNewZoneName}\r\n                onChangeColor={this.setNewZoneColor}\r\n                onClickCancel={() => this.disableCreateMode()}\r\n                onClickSave={this.createZone}\r\n            />,\r\n            popupContainer,\r\n        );\r\n    }\r\n\r\n    updateNewZoneLayer() {\r\n        if (this.newZone.coordinates.length < 4) return;\r\n        this.drawlayer.update(this.newZone.coordinates, true);\r\n    }\r\n\r\n    onMouseUpCreate = (e) => {\r\n        this.map.off(\"mousemove\", this.onMouseMoveCreate);\r\n        this.showCreatePopup();\r\n        if (this.drawlayer) this.drawlayer.remove();\r\n        if (this.newZonelayer) this.newZonelayer.update(this.newZone.coordinates, true);\r\n    };\r\n\r\n    onMouseMoveCreate = (e) => {\r\n        this.newZone.coordinates.push(e.lngLat.toArray());\r\n        this.updateNewZoneLayer();\r\n    };\r\n\r\n    onMouseDownCreate = (e) => {\r\n        this.newZone.coordinates.push(e.lngLat.toArray());\r\n        if (this.map) this.map.on(\"mousemove\", this.onMouseMoveCreate);\r\n        if (this.map) this.map.once(\"mouseup\", this.onMouseUpCreate);\r\n    };\r\n\r\n    //#endregion\r\n\r\n    //#region Delete zone\r\n\r\n    onClickDeleteButton = () => {\r\n        if (this.isDeleteMode) return this.disableDeleteMode();\r\n        this.disableAllModes();\r\n        this.enableDeletetingMode();\r\n    };\r\n\r\n    enableDeletetingMode() {\r\n        if (this.map) this.map.on(\"click\", this.onClickDeleteZone);\r\n        addActiveClassForButton(this.deleteButton);\r\n        this.addCursorPointerListener();\r\n        this.isDeleteMode = true;\r\n    }\r\n\r\n    disableDeleteMode() {\r\n        if (this.map) this.map.off(\"click\", this.onClickDeleteZone);\r\n        removeActiveClassForButton(this.deleteButton);\r\n\r\n        if (this.deletePopup) {\r\n            this.deletePopup.remove();\r\n            this.deletePopup = null;\r\n        }\r\n\r\n        this.removeCursorPointerListener();\r\n        this.isDeleteMode = false;\r\n        this.deleteZoneId = null;\r\n    }\r\n\r\n    onDeletePopupClose = () => {\r\n        this.deleteZoneId = null;\r\n    };\r\n\r\n    cancelDeleteZone = () => {\r\n        if (this.deletePopup) this.deletePopup.remove();\r\n    };\r\n\r\n    deleteZone = async () => {\r\n        await this.zoneControll.deleteZone(this.deleteZoneId);\r\n        this.deletePopup.remove();\r\n        this.deleteZoneId = null;\r\n    };\r\n\r\n    showDeletePopup(zoneId) {\r\n        const zone = this.zoneControll.getZoneById(zoneId);\r\n        if (!zone) return;\r\n        const coor = getCenterZoneCoorByCoordinates(zone.coordinates);\r\n        if (!coor) return;\r\n        const popupContainer = document.createElement(\"div\");\r\n        this.deletePopup = new mapboxgl.Popup({\r\n            closeButton: true,\r\n            closeOnClick: true,\r\n            closeOnMove: false,\r\n        })\r\n            .setLngLat(coor)\r\n            .setDOMContent(popupContainer)\r\n            .addTo(this.map);\r\n\r\n        this.deletePopup.on(\"close\", this.onDeletePopupClose);\r\n\r\n        ReactDOM.render(\r\n            <DeletePopup name={zone.name} onClickCancel={this.cancelDeleteZone} onClickDelete={this.deleteZone} />,\r\n            popupContainer,\r\n        );\r\n    }\r\n\r\n    onClickDeleteZone = (e) => {\r\n        const feature = this.getZoneFeatureByEvent(e);\r\n        if (!feature) return;\r\n        const zoneId = feature.properties.id;\r\n        if (zoneId === this.deleteZoneId) return;\r\n        if (this.deletePopup) this.deletePopup.remove();\r\n        this.showDeletePopup(zoneId);\r\n        this.deleteZoneId = zoneId;\r\n    };\r\n\r\n    //#endregion\r\n\r\n    //#region Utils\r\n\r\n    cursorListener = (e) => {\r\n        const feature = this.getZoneFeatureByEvent(e);\r\n        if (feature) {\r\n            this.map.getCanvas().style.cursor = \"pointer\";\r\n        } else {\r\n            this.map.getCanvas().style.cursor = \"\";\r\n        }\r\n    };\r\n\r\n    addCursorPointerListener() {\r\n        this.map.on(\"mousemove\", this.cursorListener);\r\n    }\r\n\r\n    removeCursorPointerListener() {\r\n        this.map.off(\"mousemove\", this.cursorListener);\r\n    }\r\n\r\n    disableAllModes() {\r\n        if (this.isEditMode) this.disableEditMode();\r\n        if (this.isDeleteMode) this.disableDeleteMode();\r\n        if (this.isCreateMode) this.disableCreateMode();\r\n    }\r\n\r\n    getZoneFeatureByEvent(e) {\r\n        const features = this.map.queryRenderedFeatures(e.point);\r\n        if (!features.length) return;\r\n        const feature = features.shift();\r\n        if (!feature) return;\r\n        if (feature.layer.id.match(this.zoneLayerPatternId)) return feature;\r\n    }\r\n\r\n    //#endregion\r\n}\r\n","export function getDeleteIconSvg() {\r\n    return `\r\n\t<svg version=\"1.1\" viewBox=\"0 0 384 384\">\r\n\t\t<path\r\n\t\td=\"M64,341.333C64,364.907,83.093,384,106.667,384h170.667C300.907,384,320,364.907,320,341.333v-256H64V341.333z\" />\r\n\t\t<polygon\r\n\t\tpoints=\"266.667,21.333 245.333,0 138.667,0 117.333,21.333 42.667,21.333 42.667,64 341.333,64 341.333,21.333 \t\t\t\" />\r\n\t</svg>\r\n\t`;\r\n}\r\n\r\nexport function getEditIconSvg() {\r\n    return `\r\n\t<svg version=\"1.1\" viewBox=\"0 0 383.947 383.947\">\r\n\t\t<polygon points=\"0,303.947 0,383.947 80,383.947 316.053,147.893 236.053,67.893\" />\r\n\t\t<path\r\n\t\td=\"M377.707,56.053L327.893,6.24c-8.32-8.32-21.867-8.32-30.187,0l-39.04,39.04l80,80l39.04-39.04C386.027,77.92,386.027,64.373,377.707,56.053z\" />\r\n\t</svg>\r\n\t`;\r\n}\r\n\r\nexport function getPlusIconSvg() {\r\n    return `\r\n\t<svg version=\"1.1\" viewBox=\"0 0 42 42\">\r\n\t\t<path d=\"M37.059,16H26V4.941C26,2.224,23.718,0,21,0s-5,2.224-5,4.941V16H4.941C2.224,16,0,18.282,0,21s2.224,5,4.941,5H16v11.059\r\n\t\tC16,39.776,18.282,42,21,42s5-2.224,5-4.941V26h11.059C39.776,26,42,23.718,42,21S39.776,16,37.059,16z\" />\r\n\t</svg>\r\n\t`;\r\n}\r\n","import { ZoneApi } from \"../api/zone-api\";\r\nimport { ZoneLayer } from \"../layers/zone-layer\";\r\n\r\nexport class ZoneControll {\r\n    zones = [];\r\n    selectedZones = [];\r\n    zoneApi = new ZoneApi();\r\n    layers = new Map();\r\n\r\n    constructor(selectedZones) {\r\n        this.selectedZones = selectedZones;\r\n    }\r\n\r\n    /**\r\n     * @param {mapboxgl.Map} map\r\n     */\r\n    onAdd(map) {\r\n        this.map = map;\r\n        this.container = document.createElement(\"div\");\r\n        this.container.className = \"mapboxgl-ctrl\";\r\n        map.on(\"load\", this.init);\r\n        return this.container;\r\n    }\r\n\r\n    onRemove() {\r\n        this.container.parentNode.removeChild(this.container);\r\n        this.map = undefined;\r\n    }\r\n\r\n    init = async () => {\r\n        const zones = await this.zoneApi.getZoneList();\r\n        if (!zones) return;\r\n        this.zones = zones;\r\n        this.drawZones();\r\n    };\r\n\r\n    updateSelectedZones(selectedZones) {\r\n        this.selectedZones = selectedZones;\r\n        this.drawZones();\r\n    }\r\n\r\n    async deleteZone(zoneId) {\r\n        await this.zoneApi.deleteZone(zoneId);\r\n        this.zones = this.zones.filter((zone) => zone.id !== zoneId);\r\n        const layer = this.layers.get(zoneId);\r\n        if (!layer) return;\r\n        layer.remove();\r\n        this.layers.delete(zoneId);\r\n    }\r\n\r\n    async updateZone(newZone) {\r\n        await this.zoneApi.updateZone(newZone);\r\n\r\n        this.zones = this.zones.map((el) => {\r\n            if (el.id === newZone.id) return newZone;\r\n            return el;\r\n        });\r\n\r\n        this.drawZones();\r\n    }\r\n\r\n    async createZone(newZone) {\r\n        await this.zoneApi.addZone(newZone);\r\n        this.zones.push(newZone);\r\n        this.drawZones();\r\n    }\r\n\r\n    getZoneList() {\r\n        return this.zones;\r\n    }\r\n\r\n    getZoneById(zoneId) {\r\n        return this.zones.find((el) => el.id === zoneId);\r\n    }\r\n\r\n    updateZoneColor(zoneId, color) {\r\n        const layer = this.layers.get(zoneId);\r\n        if (!layer) return;\r\n        layer.setColor(color);\r\n    }\r\n\r\n    updateZoneCoordinates(zoneId, coordinates) {\r\n        const layer = this.layers.get(zoneId);\r\n        if (!layer) return;\r\n        layer.update(coordinates, true);\r\n    }\r\n\r\n    removeZoneLayer(zoneId) {\r\n        const layer = this.layers.get(zoneId);\r\n        if (layer) layer.remove();\r\n    }\r\n\r\n    getNewZoneName() {\r\n        return `Zone ${this.zones.length + 1}`;\r\n    }\r\n\r\n    drawZones() {\r\n        this.zones.forEach((zone) => {\r\n            const existLayer = this.layers.get(zone.id);\r\n            if (existLayer) {\r\n                existLayer.update(zone.coordinates);\r\n                existLayer.setColor(zone.color);\r\n                existLayer.updateName(zone.name);\r\n                if (this.selectedZones.includes(zone.id)) {\r\n                    existLayer.addHighlight();\r\n                } else {\r\n                    existLayer.removeHighlight();\r\n                }\r\n            } else {\r\n                const layer = new ZoneLayer(this.map, zone.id, { color: zone.color, name: zone.name });\r\n                layer.update(zone.coordinates);\r\n                if (this.selectedZones.includes(zone.id)) layer.addHighlight();\r\n                this.layers.set(zone.id, layer);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport _ from \"lodash\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport { UserControll } from \"./controls/user-controll\";\r\nimport { AdminControll } from \"./controls/admin-controll\";\r\nimport { ZoneControll } from \"./controls/zone-controll\";\r\nimport { MAP_ID } from \"./utils/constants\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport \"./index.scss\";\r\n\r\n/** Collection of cities coordinates */\r\nexport const Cities = {\r\n    Bengaluru: new mapboxgl.LngLat(77.59094323372614, 12.975557791300176),\r\n};\r\n\r\n/**\r\n * Map with Zones Component\r\n *\r\n * @typedef {object} Props\r\n * @property {string} mapToken - Mapbox token (https://docs.mapbox.com/help/how-mapbox-works/access-tokens/)\r\n * @property {string} mapStyle - Mapbox map style (https://docs.mapbox.com/vector-tiles/reference/)\r\n * @property {boolean} isAdmin - Selecting the use mode Admin or User\r\n * @property {mapboxgl.LngLat} cityCoor - Сity coordinates\r\n * @property {Array<string>} selectedZones - Selected zones ID which will be highlighted on the map\r\n *\r\n * @extends {React.Component<Props>}\r\n */\r\nexport class MapWithZones extends React.Component {\r\n    componentDidMount() {\r\n        const { mapStyle, mapToken, isAdmin, cityCoor, selectedZones } = this.props;\r\n\r\n        mapboxgl.accessToken = mapToken;\r\n\r\n        this.map = new mapboxgl.Map({\r\n            container: MAP_ID,\r\n            style: mapStyle,\r\n            center: cityCoor,\r\n            zoom: 12,\r\n        });\r\n\r\n        this.zoneControll = new ZoneControll(selectedZones);\r\n        this.map.addControl(this.zoneControll);\r\n        this.userControll = new UserControll(this.zoneControll);\r\n        this.adminControll = new AdminControll(this.zoneControll);\r\n\r\n        if (isAdmin) {\r\n            this.map.addControl(this.adminControll);\r\n        } else {\r\n            this.map.addControl(this.userControll);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { isAdmin, selectedZones } = this.props;\r\n\r\n        if (isAdmin !== prevProps.isAdmin) {\r\n            if (!this.map) return;\r\n            if (isAdmin) {\r\n                this.map.removeControl(this.userControll);\r\n                this.map.addControl(this.adminControll);\r\n            } else {\r\n                this.map.removeControl(this.adminControll);\r\n                this.map.addControl(this.userControll);\r\n            }\r\n        }\r\n\r\n        if (!_.isEqual(selectedZones, prevProps.selectedZones)) {\r\n            this.zoneControll.updateSelectedZones(selectedZones);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div id={MAP_ID} />;\r\n    }\r\n}\r\n\r\nMapWithZones.defaultProps = {\r\n    mapStyle: \"mapbox://styles/mapbox/streets-v11\",\r\n    isAdmin: false,\r\n    cityCoor: Cities.Bengaluru,\r\n    selectedZones: [],\r\n};\r\n\r\nMapWithZones.propTypes = {\r\n    mapToken: PropTypes.string.isRequired,\r\n    mapStyle: PropTypes.string,\r\n    isAdmin: PropTypes.bool,\r\n    cityCoor: PropTypes.instanceOf(mapboxgl.LngLat),\r\n    selectedZones: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { ZoneApi } from \"../api/zone-api\";\r\n\r\nexport const ZonesList = ({ selectedZones, setSelectedZones }) => {\r\n    const [zones, setZones] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const zoneApi = new ZoneApi();\r\n        const getZones = async () => {\r\n            const zones = await zoneApi.getZoneList();\r\n            if (zones) setZones(zones);\r\n        };\r\n        getZones();\r\n    }, []);\r\n\r\n    const onChange = (e) => {\r\n        const id = e.target.value;\r\n        let newSelected = [];\r\n        if (selectedZones.includes(id)) {\r\n            newSelected = selectedZones.filter((el) => el !== id);\r\n        } else {\r\n            newSelected = [...selectedZones, id];\r\n        }\r\n        setSelectedZones(newSelected);\r\n    };\r\n\r\n    return (\r\n        <div className=\"test-zone-list\">\r\n            Zones list:\r\n            {zones.map((zone) => {\r\n                return (\r\n                    <label key={zone.id}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={selectedZones.includes(zone.id)}\r\n                            value={zone.id}\r\n                            onChange={onChange}\r\n                        ></input>\r\n                        {zone.name}\r\n                    </label>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\nimport { MapWithZones } from \"./map-with-zones\";\nimport \"./App.scss\";\nimport { ZonesList } from \"./map-with-zones/componets/zones-list\";\n\nconst App = () => {\n    const [mode, setMode] = useState(\"user\");\n    const [selectedZones, setSelectedZones] = useState([]);\n\n    return (\n        <div className=\"App\">\n            <div className=\"test-panel\">\n                <button\n                    onClick={() => setMode(\"admin\")}\n                    className={mode === \"admin\" ? \"test-panel__button-active\" : \"\"}\n                >\n                    ADMIN MODE\n                </button>\n                <button onClick={() => setMode(\"user\")} className={mode === \"user\" ? \"test-panel__button-active\" : \"\"}>\n                    USER MODE\n                </button>\n                <button\n                    onClick={() => setMode(\"highlight\")}\n                    className={mode === \"highlight\" ? \"test-panel__button-active\" : \"\"}\n                >\n                    HIGHLIGHT ZONE\n                </button>\n            </div>\n            {mode === \"highlight\" && <ZonesList selectedZones={selectedZones} setSelectedZones={setSelectedZones} />}\n            <MapWithZones\n                mapToken={process.env.REACT_APP_MAPBOX_TOKEN}\n                isAdmin={mode === \"admin\"}\n                selectedZones={selectedZones}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}