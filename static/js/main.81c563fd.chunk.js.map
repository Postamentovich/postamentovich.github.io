{"version":3,"sources":["api/index.js","components/map-area-popup/index.jsx","map-controls/area-control.js","components/map-grid-popup/index.jsx","map-controls/grid-control.js","components/map/index.jsx","pages/areas-map/index.jsx","pages/areas-identification/index.jsx","pages/grid-identification/index.jsx","pages/grid-map/index.jsx","App.js","serviceWorker.js","index.js"],"names":["searchArea","lat","lng","a","params","URLSearchParams","set","axios","get","data","searchGridCell","cachZones","getZones","baseClass","MapAreaPopup","onCancel","onSave","useState","zones","setZones","selectedZone","setSelectedZone","useEffect","console","error","fetchZones","className","value","onChange","e","Number","target","map","zone","key","id","title","type","onClick","AreaMapControl","activeModel","onCancelArea","popup","remove","layer","onSaveArea","zoneId","shape","coordinates","center","radius","geometry","model","length","popupTitle","find","el","on","onEditArea","onRemoveArea","bindPopup","showPopup","popupContainer","document","createElement","L","minWidth","closeOnClick","closeButton","setLatLng","setContent","openOn","ReactDOM","render","onCreateArea","includes","getCenter","getLatLngs","_latlng","_mRadius","area","getAreas","this","container","init","parentNode","removeChild","drawAreas","coor","circle","addTo","polygon","Control","MapGridPopup","columns","setColumns","rows","setRows","setTitle","htmlFor","autoFocus","GridMapControl","grids","Map","isGridShowing","onCancelGrid","onSaveGrid","numToAlpha","num","alpha","parseInt","String","fromCharCode","drawGridColumnsRows","latLngs","left","top","right","bottom","leftLine","turf","rightLine","topLine","bottomLine","rowLength","rowStep","columnLength","columnStep","layers","markers","i","offset","b","aCoor","bCoor","newLine","geoJSON","push","sideLine","j","secondLine","intersects","feature","features","columnName","opacity","getZoom","Marker","reverse","icon","DivIcon","html","status","bringToFront","onCreateGrid","onZoom","zoom","Array","from","forEach","setOpacity","getGrids","drawGrids","grid","withAreaControll","withGridControll","setView","accessToken","process","areaMapControl","gridMapControl","tileLayer","attribution","maxZoom","tileSize","zoomOffset","pm","addControls","position","drawMarker","drawCircleMarker","drawPolyline","cutPolygon","addControl","drawPolygon","drawCircle","editMode","dragMode","AreaMapPage","AreaIdentificationPage","setLat","setLng","areas","setAreas","isSearch","setIsSearch","fetch","includedAreas","processAreas","reduce","acc","val","GridIdentificationPage","cell","setCell","column","row","GridMapPage","routes","createRoute","url","component","App","to","activeClassName","path","Boolean","window","location","hostname","match","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.81c563fd.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport async function getAreas() {\r\n    const { data } = await axios.get(\"/api/area\");\r\n    return data;\r\n}\r\n\r\nexport async function getGrids() {\r\n    const { data } = await axios.get(\"/api/grid\");\r\n    return data;\r\n}\r\n\r\nexport async function createArea(area) {\r\n    const { data } = await axios.post(\"/api/area\", { area });\r\n    return data;\r\n}\r\n\r\nexport async function updateArea(area) {\r\n    const { data } = await axios.put(\"/api/area\", { area });\r\n    return data;\r\n}\r\n\r\nexport async function deleteArea(id) {\r\n    const { data } = await axios.delete(`/api/area/${id}`);\r\n    return data;\r\n}\r\n\r\nexport async function deleteGrid(id) {\r\n    const { data } = await axios.delete(`/api/grid/${id}`);\r\n    return data;\r\n}\r\n\r\nexport async function searchArea(lat, lng) {\r\n    const params = new URLSearchParams();\r\n    if (lat) params.set(\"lat\", lat);\r\n    if (lng) params.set(\"lng\", lng);\r\n    const { data } = await axios.get(`/api/area/search`, { params });\r\n    return data;\r\n}\r\n\r\nexport async function searchGridCell(lat, lng) {\r\n    const params = new URLSearchParams();\r\n    if (lat) params.set(\"lat\", lat);\r\n    if (lng) params.set(\"lng\", lng);\r\n    const { data } = await axios.get(`/api/grid/search`, { params });\r\n    return data;\r\n}\r\n\r\nexport async function createGrid(grid) {\r\n    const { data } = await axios.post(\"/api/grid\", { grid });\r\n    return data;\r\n}\r\n\r\nlet cachZones = null;\r\nexport async function getZones() {\r\n    if (cachZones) return cachZones;\r\n    const { data } = await axios.get(\"/api/zone\");\r\n    cachZones = data;\r\n    return data;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { getZones } from \"../../api\";\r\nimport \"./index.scss\";\r\n\r\nconst baseClass = \"map-area-popup\";\r\n\r\nexport const MapAreaPopup = ({ onCancel, onSave }) => {\r\n    const [zones, setZones] = useState([]);\r\n    const [selectedZone, setSelectedZone] = useState(1);\r\n\r\n    useEffect(() => {\r\n        const fetchZones = async () => {\r\n            try {\r\n                const data = await getZones();\r\n                setZones(data);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n        fetchZones();\r\n    }, []);\r\n\r\n    const handleChange = (e) => {\r\n        setSelectedZone(Number(e.target.value));\r\n    };\r\n\r\n    const handleClickSave = () => {\r\n        onSave(selectedZone);\r\n    };\r\n\r\n    return (\r\n        <div className={baseClass}>\r\n            <span className={`${baseClass}__label`}>Please, select zone:</span>\r\n            <select className={`${baseClass}__select`} value={selectedZone} onChange={handleChange}>\r\n                {zones.map((zone) => {\r\n                    return (\r\n                        <option className={`${baseClass}__option`} key={zone.id} value={zone.id}>\r\n                            {zone.title}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </select>\r\n            <div className={`${baseClass}__controls`}>\r\n                <button type=\"button\" className={`${baseClass}__button`} onClick={onCancel}>\r\n                    Cancel\r\n                </button>\r\n                <button type=\"button\" className={`${baseClass}__button`} onClick={handleClickSave}>\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport L from \"leaflet\";\r\nimport { MapAreaPopup } from \"../components/map-area-popup\";\r\n// import { getAreas, createArea, updateArea, deleteArea, getZones } from \"../api\";\r\n\r\nexport class AreaMapControl extends L.Control {\r\n    activeModel = null;\r\n    zones = [];\r\n    // constructor() {\r\n    //     super();\r\n    //     // this.getZones();\r\n    // }\r\n\r\n    // getZones = async () => {\r\n    //     try {\r\n    //         const zones = await getZones();\r\n    //         this.zones = zones;\r\n    //     } catch (error) {\r\n    //         console.error(error);\r\n    //     }\r\n    // };\r\n\r\n    onAdd(map) {\r\n        this.map = map;\r\n        this.container = document.createElement(\"div\");\r\n        this.init();\r\n        return this.container;\r\n    }\r\n\r\n    onRemove(map) {\r\n        if (this.container) {\r\n            this.container.parentNode.removeChild(this.container);\r\n        }\r\n    }\r\n\r\n    onCancelArea = () => {\r\n        this.popup.remove();\r\n        this.activeModel.layer.remove();\r\n        this.activeModel = null;\r\n    };\r\n\r\n    onSaveArea = async (zoneId) => {\r\n        const shape = this.activeModel.shape === \"Rectangle\" ? \"Polygon\" : this.activeModel.shape;\r\n        const coordinates =\r\n            this.activeModel.shape === \"Circle\"\r\n                ? [{ ...this.activeModel.center, radius: this.activeModel.radius }]\r\n                : this.activeModel.geometry;\r\n        const model = {\r\n            zoneId,\r\n            shape,\r\n            coordinates,\r\n        };\r\n        try {\r\n            // const area = await createArea(model);\r\n            this.popup.remove();\r\n            if (!this.zones.length) await this.getZones();\r\n            const popupTitle = this.zones.find((el) => el.id === model.zoneId).title;\r\n            this.activeModel.layer\r\n                .on(\"pm:edit\", (e) => this.onEditArea(model, e))\r\n                .on(\"pm:remove\", (e) => this.onRemoveArea(model.id, e))\r\n                .bindPopup(popupTitle);\r\n            this.activeModel = null;\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    showPopup = (center) => {\r\n        const popupContainer = document.createElement(\"div\");\r\n        this.popup = L.popup({ minWidth: 200, closeOnClick: false, closeButton: false })\r\n            .setLatLng(center)\r\n            .setContent(popupContainer)\r\n            .openOn(this.map);\r\n        ReactDOM.render(<MapAreaPopup onCancel={this.onCancelArea} onSave={this.onSaveArea} />, popupContainer);\r\n    };\r\n\r\n    onCreateArea = (e) => {\r\n        const permissionShapes = [\"Rectangle\", \"Polygon\", \"Circle\"];\r\n        if (!permissionShapes.includes(e.shape)) return;\r\n        this.activeModel = { geometry: null, radius: null, layer: null, center: null, shape: null };\r\n        if (e.shape === \"Rectangle\" || e.shape === \"Polygon\") {\r\n            this.activeModel.center = e.layer.getCenter();\r\n            this.activeModel.geometry = e.layer.getLatLngs()[0];\r\n        } else if (e.shape === \"Circle\") {\r\n            const center = e.layer._latlng;\r\n            this.activeModel.center = center;\r\n            this.activeModel.radius = e.layer._mRadius;\r\n        }\r\n        this.activeModel.layer = e.layer;\r\n        this.activeModel.shape = e.shape;\r\n        this.showPopup(this.activeModel.center);\r\n    };\r\n\r\n    onEditArea = async (area, e) => {\r\n        const newModel = {\r\n            ...area,\r\n            coordinates:\r\n                area.shape === \"Circle\" ? [{ ...e.layer._latlng, radius: e.layer._mRadius }] : e.layer.getLatLngs()[0],\r\n        };\r\n        try {\r\n            // await updateArea(newModel);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    onRemoveArea = async (id) => {\r\n        try {\r\n            // await deleteArea(id);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    init() {\r\n        this.map.on(\"pm:create\", this.onCreateArea);\r\n        this.drawAreas();\r\n    }\r\n\r\n    getAreas = async () => {\r\n        try {\r\n            // const areas = await getAreas();\r\n            // return areas;\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    async drawAreas() {\r\n        // const areas = await this.getAreas();\r\n        // if (!Array.isArray(areas)) return;\r\n        // areas.forEach((area) => {\r\n        //     if (area.shape === \"Polygon\") {\r\n        //         this.drawPolygon(area);\r\n        //     }\r\n        //     if (area.shape === \"Circle\") {\r\n        //         this.drawCircle(area);\r\n        //     }\r\n        // });\r\n    }\r\n\r\n    async drawCircle(area) {\r\n        const coor = area.coordinates[0];\r\n        if (!coor) return;\r\n        const radius = coor.radius;\r\n        if (!this.zones.length) await this.getZones();\r\n        const popupTitle = this.zones.find((el) => el.id === area.zoneId).title;\r\n        L.circle(coor, { radius })\r\n            .addTo(this.map)\r\n            .on(\"pm:edit\", (e) => this.onEditArea(area, e))\r\n            .on(\"pm:remove\", (e) => this.onRemoveArea(area.id, e))\r\n            .bindPopup(popupTitle);\r\n    }\r\n\r\n    async drawPolygon(area) {\r\n        if (!this.zones.length) await this.getZones();\r\n        const popupTitle = this.zones.find((el) => el.id === area.zoneId).title;\r\n        L.polygon(area.coordinates)\r\n            .addTo(this.map)\r\n            .on(\"pm:edit\", (e) => this.onEditArea(area, e))\r\n            .on(\"pm:remove\", (e) => this.onRemoveArea(area.id, e))\r\n            .bindPopup(popupTitle);\r\n    }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./index.scss\";\r\n\r\nconst baseClass = \"map-grid-popup\";\r\n\r\nexport const MapGridPopup = ({ onCancel, onSave }) => {\r\n    const [columns, setColumns] = useState(10);\r\n    const [rows, setRows] = useState(10);\r\n    const [title, setTitle] = useState(\"\");\r\n\r\n    const handleClickSave = () => {\r\n        onSave({ columns, rows, title });\r\n    };\r\n\r\n    return (\r\n        <div className={baseClass}>\r\n            <label className={`${baseClass}__label`} htmlFor=\"title\">\r\n                Title\r\n            </label>\r\n            <input\r\n                className={`${baseClass}__input`}\r\n                type=\"text\"\r\n                id=\"title\"\r\n                value={title}\r\n                onChange={(e) => setTitle(e.target.value)}\r\n                autoFocus\r\n            />\r\n            <label className={`${baseClass}__label`} htmlFor=\"columns\">\r\n                Columns\r\n            </label>\r\n            <input\r\n                className={`${baseClass}__input`}\r\n                type=\"number\"\r\n                id=\"columns\"\r\n                value={columns}\r\n                onChange={(e) => setColumns(e.target.value)}\r\n            />\r\n            <label className={`${baseClass}__label`} htmlFor=\"rows\">\r\n                Rows\r\n            </label>\r\n            <input\r\n                className={`${baseClass}__input`}\r\n                type=\"number\"\r\n                id=\"rows\"\r\n                value={rows}\r\n                onChange={(e) => setRows(e.target.value)}\r\n            />\r\n            <div className={`${baseClass}__controls`}>\r\n                <button type=\"button\" className={`${baseClass}__button`} onClick={onCancel}>\r\n                    Cancel\r\n                </button>\r\n                <button type=\"button\" className={`${baseClass}__button`} onClick={handleClickSave}>\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","/* eslint-disable array-callback-return */\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport L from \"leaflet\";\r\nimport * as turf from \"@turf/turf\";\r\nimport { MapGridPopup } from \"../components/map-grid-popup\";\r\n// import { createGrid, getGrids, deleteGrid } from \"../api\";\r\n\r\nexport class GridMapControl extends L.Control {\r\n    grids = new Map();\r\n    isGridShowing = false;\r\n\r\n    onAdd(map) {\r\n        this.map = map;\r\n        this.container = document.createElement(\"div\");\r\n        this.init();\r\n        return this.container;\r\n    }\r\n\r\n    onRemove(map) {\r\n        if (this.container) {\r\n            this.container.parentNode.removeChild(this.container);\r\n        }\r\n    }\r\n\r\n    onCancelGrid = () => {\r\n        this.popup.remove();\r\n        this.activeModel.layer.remove();\r\n        this.activeModel = null;\r\n    };\r\n\r\n    showPopup = (center) => {\r\n        const popupContainer = document.createElement(\"div\");\r\n        this.popup = L.popup({ minWidth: 200, closeOnClick: false, closeButton: false })\r\n            .setLatLng(center)\r\n            .setContent(popupContainer)\r\n            .openOn(this.map);\r\n        ReactDOM.render(<MapGridPopup onCancel={this.onCancelGrid} onSave={this.onSaveGrid} />, popupContainer);\r\n    };\r\n\r\n    numToAlpha = (num) => {\r\n        let alpha = \"\";\r\n        for (; num >= 0; num = parseInt(num / 26, 10) - 1) {\r\n            alpha = String.fromCharCode((num % 26) + 0x41) + alpha;\r\n        }\r\n        return alpha;\r\n    };\r\n\r\n    drawGridColumnsRows = async ({ coordinates, columns, rows, id }) => {\r\n        const latLngs = coordinates.map((el) => [el.lng, el.lat]);\r\n        const left = [latLngs[1], latLngs[0]];\r\n        const top = [latLngs[1], latLngs[2]];\r\n        const right = [latLngs[2], latLngs[3]];\r\n        const bottom = [latLngs[0], latLngs[3]];\r\n        const leftLine = turf.lineString(left);\r\n        const rightLine = turf.lineString(right);\r\n        const topLine = turf.lineString(top);\r\n        const bottomLine = turf.lineString(bottom);\r\n        const rowLength = turf.length(leftLine);\r\n        const rowStep = rowLength / rows;\r\n        const columnLength = turf.length(topLine);\r\n        const columnStep = columnLength / columns;\r\n        const layers = [];\r\n        const markers = [];\r\n\r\n        for (let i = 1; i < rows; i++) {\r\n            const offset = rowStep * i;\r\n            const a = turf.along(leftLine, offset);\r\n            const b = turf.along(rightLine, offset);\r\n            const aCoor = turf.getCoord(a);\r\n            const bCoor = turf.getCoord(b);\r\n            const newLine = turf.lineString([aCoor, bCoor]);\r\n            const layer = L.geoJSON(newLine).addTo(this.map);\r\n            layers.push(layer);\r\n        }\r\n\r\n        for (let i = 1; i < columns; i++) {\r\n            const offset = columnStep * i;\r\n            const a = turf.along(topLine, offset);\r\n            const b = turf.along(bottomLine, offset);\r\n            const aCoor = turf.getCoord(a);\r\n            const bCoor = turf.getCoord(b);\r\n            const newLine = turf.lineString([aCoor, bCoor]);\r\n            const layer = L.geoJSON(newLine).addTo(this.map);\r\n            layers.push(layer);\r\n        }\r\n\r\n        for (let i = 1; i <= rows; i++) {\r\n            const offset = rowStep * i - rowStep / 2;\r\n            const a = turf.along(leftLine, offset);\r\n            const b = turf.along(rightLine, offset);\r\n            const aCoor = turf.getCoord(a);\r\n            const bCoor = turf.getCoord(b);\r\n            const sideLine = turf.lineString([aCoor, bCoor]);\r\n\r\n            for (let j = 1; j <= columns; j++) {\r\n                const offset = columnStep * j - columnStep / 2;\r\n                const a = turf.along(topLine, offset);\r\n                const b = turf.along(bottomLine, offset);\r\n                const aCoor = turf.getCoord(a);\r\n                const bCoor = turf.getCoord(b);\r\n\r\n                const secondLine = turf.lineString([aCoor, bCoor]);\r\n\r\n                const intersects = turf.lineIntersect(secondLine, sideLine);\r\n                const feature = intersects.features[0];\r\n\r\n                if (!feature) continue;\r\n                const columnName = this.numToAlpha(j - 1);\r\n                const coor = turf.getCoord(feature);\r\n                const opacity = this.map.getZoom() >= 15 ? 1 : 0;\r\n                const layer = new L.Marker(coor.reverse(), {\r\n                    icon: new L.DivIcon({\r\n                        className: \"icon-grid-cell\",\r\n                        html: `<span>${columnName}${i}</span>`,\r\n                    }),\r\n                    opacity,\r\n                }).addTo(this.map);\r\n\r\n                markers.push(layer);\r\n            }\r\n        }\r\n\r\n        this.grids.set(id, { layers, markers });\r\n    };\r\n\r\n    onSaveGrid = async ({ columns, rows, title }) => {\r\n        const coordinates = this.activeModel.geometry;\r\n        const model = {\r\n            coordinates,\r\n            columns,\r\n            rows,\r\n            title,\r\n            status: \"Active\",\r\n        };\r\n        try {\r\n            // const grid = await createGrid(model);\r\n            this.drawGridColumnsRows(model);\r\n            this.activeModel.layer.on(\"pm:remove\", (e) => this.onRemoveArea(model.id, e));\r\n            this.activeModel.layer.bringToFront();\r\n            this.popup.remove();\r\n            this.activeModel = null;\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    onCreateGrid = (e) => {\r\n        const { layer, shape } = e;\r\n        const permissionShapes = [\"Rectangle\"];\r\n        if (!permissionShapes.includes(shape)) return;\r\n        this.activeModel = { geometry: null, layer: null, columns: 10, rows: 10 };\r\n        this.activeModel.center = layer.getCenter();\r\n        this.activeModel.geometry = layer.getLatLngs()[0];\r\n        this.activeModel.layer = layer;\r\n        this.showPopup(this.activeModel.center);\r\n    };\r\n\r\n    init() {\r\n        this.map.on(\"pm:create\", this.onCreateGrid);\r\n        this.map.on(\"zoom\", this.onZoom);\r\n        this.drawGrids();\r\n    }\r\n\r\n    onZoom = (e) => {\r\n        const zoom = this.map.getZoom();\r\n        if (zoom >= 15 && !this.isGridShowing) {\r\n            Array.from(this.grids, ([key, grid]) => {\r\n                const { markers } = grid;\r\n                markers.forEach((el) => el.setOpacity(1));\r\n            });\r\n\r\n            this.isGridShowing = true;\r\n        } else if (this.isGridShowing && zoom < 15) {\r\n            Array.from(this.grids, ([key, grid]) => {\r\n                const { markers } = grid;\r\n                markers.forEach((el) => el.setOpacity(0));\r\n            });\r\n            this.isGridShowing = false;\r\n        }\r\n    };\r\n\r\n    getGrids = async () => {\r\n        try {\r\n            // const grid = await getGrids();\r\n            // return grid;\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    async drawGrids() {\r\n        // const grids = await this.getGrids();\r\n        // if (!Array.isArray(grids)) return;\r\n        // grids.forEach((area) => {\r\n        //     this.drawPolygon(area);\r\n        // });\r\n    }\r\n\r\n    onRemoveArea = async (id) => {\r\n        try {\r\n            const { layers, markers } = this.grids.get(id);\r\n            if (layers) layers.forEach((layer) => layer.remove());\r\n            if (markers) markers.forEach((layer) => layer.remove());\r\n            // await deleteGrid(id);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    async drawPolygon(grid) {\r\n        const { coordinates } = grid;\r\n        if (!coordinates.length) return;\r\n        L.polygon(coordinates)\r\n            .addTo(this.map)\r\n            .on(\"pm:remove\", (e) => this.onRemoveArea(grid.id, e));\r\n        this.drawGridColumnsRows(grid);\r\n    }\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport L from \"leaflet\";\r\nimport { AreaMapControl } from \"../../map-controls/area-control\";\r\nimport { GridMapControl } from \"../../map-controls/grid-control\";\r\nimport \"@geoman-io/leaflet-geoman-free\";\r\nimport \"@geoman-io/leaflet-geoman-free/dist/leaflet-geoman.css\";\r\nimport \"./index.scss\";\r\n\r\nconst mapId = \"leaflet-map-id\";\r\n\r\nexport const Map = ({ withAreaControll = false, withGridControll = false }) => {\r\n    useEffect(() => {\r\n        const map = L.map(mapId).setView([-33.90461600836232, 151.17805480957028], 12);\r\n        const accessToken = process.env.REACT_APP_MAPBOX_TOKEN;\r\n        const areaMapControl = new AreaMapControl();\r\n        const gridMapControl = new GridMapControl();\r\n        L.tileLayer(`https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=${accessToken}`, {\r\n            attribution:\r\n                'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n            maxZoom: 18,\r\n            id: \"mapbox/streets-v11\",\r\n            tileSize: 512,\r\n            zoomOffset: -1,\r\n            accessToken,\r\n        }).addTo(map);\r\n        if (withAreaControll) {\r\n            map.pm.addControls({\r\n                position: \"topleft\",\r\n                drawMarker: false,\r\n                drawCircleMarker: false,\r\n                drawPolyline: false,\r\n                cutPolygon: false,\r\n            });\r\n            map.addControl(areaMapControl);\r\n        }\r\n        if (withGridControll) {\r\n            map.pm.addControls({\r\n                position: \"topleft\",\r\n                drawMarker: false,\r\n                drawCircleMarker: false,\r\n                drawPolyline: false,\r\n                cutPolygon: false,\r\n                drawPolygon: false,\r\n                drawCircle: false,\r\n                editMode: false,\r\n                dragMode: false,\r\n            });\r\n            map.addControl(gridMapControl);\r\n        }\r\n    }, [withAreaControll, withGridControll]);\r\n\r\n    return <div id={mapId} />;\r\n};\r\n","import React from \"react\";\r\nimport { Map } from \"../../components/map\";\r\nimport \"./index.scss\";\r\n\r\nexport const AreaMapPage = () => {\r\n    return (\r\n        <div className=\"page\">\r\n            <Map withAreaControll />\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { searchArea, getZones } from \"../../api\";\r\nimport { useEffect } from \"react\";\r\nimport \"./index.scss\";\r\n\r\nconst baseClass = \"identification-page\";\r\nexport const AreaIdentificationPage = () => {\r\n    const [lat, setLat] = useState(0);\r\n    const [lng, setLng] = useState(0);\r\n    const [zones, setZones] = useState([]);\r\n    const [areas, setAreas] = useState([]);\r\n    const [isSearch, setIsSearch] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            try {\r\n                const zones = await getZones();\r\n                setZones(zones);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n        fetch();\r\n    }, []);\r\n\r\n    const onClick = async () => {\r\n        try {\r\n            setAreas([]);\r\n            const areas = await searchArea(lat, lng);\r\n            const includedAreas = [];\r\n            const processAreas = areas.reduce((acc, val) => {\r\n                if (!includedAreas.includes(val.zoneId)) {\r\n                    acc.push(val);\r\n                    includedAreas.push(val.zoneId);\r\n                }\r\n                return acc;\r\n            }, []);\r\n            setIsSearch(true);\r\n            setAreas(processAreas);\r\n        } catch (error) {\r\n            setAreas([]);\r\n            setIsSearch(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={baseClass}>\r\n            <h3>Please enter coordinates:</h3>\r\n            <label className={`${baseClass}__label`} htmlFor=\"lng\">\r\n                Longitude\r\n            </label>\r\n            <input\r\n                className={`${baseClass}__input`}\r\n                type=\"number\"\r\n                id=\"lng\"\r\n                value={lng}\r\n                onChange={(e) => setLng(e.target.value)}\r\n            />\r\n            <label className={`${baseClass}__label`} htmlFor=\"lat\">\r\n                Latitude\r\n            </label>\r\n            <input\r\n                className={`${baseClass}__input`}\r\n                type=\"number\"\r\n                id=\"lat\"\r\n                value={lat}\r\n                onChange={(e) => setLat(e.target.value)}\r\n            />\r\n            <button type=\"button\" onClick={onClick} className={`${baseClass}__button`}>\r\n                Find zones\r\n            </button>\r\n            {isSearch &&\r\n                (areas.length ? (\r\n                    <>\r\n                        <div className={`${baseClass}__zone-title`}>Found zones:</div>\r\n                        {areas.map((area) => {\r\n                            const zone = zones.find((el) => area.zoneId === el.id);\r\n                            if (!zone) return null;\r\n                            return (\r\n                                <div className={`${baseClass}__zone`} key={area.zoneId}>\r\n                                    {zone.title}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </>\r\n                ) : (\r\n                    <div className={`${baseClass}__zone-title`}>Zones not found</div>\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { searchGridCell } from \"../../api\";\r\n\r\nconst baseClass = \"identification-page\";\r\nexport const GridIdentificationPage = () => {\r\n    const [lat, setLat] = useState(0);\r\n    const [lng, setLng] = useState(0);\r\n    const [cell, setCell] = useState(null);\r\n    const [isSearch, setIsSearch] = useState(false);\r\n\r\n    const onClick = async () => {\r\n        try {\r\n            setCell(null);\r\n            const cell = await searchGridCell(lat, lng);\r\n            setCell(cell);\r\n            setIsSearch(true);\r\n        } catch (error) {\r\n            setIsSearch(true);\r\n            setCell(null);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={baseClass}>\r\n            <h3>Please enter coordinates:</h3>\r\n            <label className={`${baseClass}__label`} htmlFor=\"lng\">\r\n                Longitude\r\n            </label>\r\n            <input\r\n                className={`${baseClass}__input`}\r\n                type=\"number\"\r\n                id=\"lng\"\r\n                value={lng}\r\n                onChange={(e) => setLng(e.target.value)}\r\n            />\r\n            <label className={`${baseClass}__label`} htmlFor=\"lat\">\r\n                Latitude\r\n            </label>\r\n            <input\r\n                className={`${baseClass}__input`}\r\n                type=\"number\"\r\n                id=\"lat\"\r\n                value={lat}\r\n                onChange={(e) => setLat(e.target.value)}\r\n            />\r\n            <button type=\"button\" onClick={onClick} className={`${baseClass}__button`}>\r\n                Find Cell\r\n            </button>\r\n            {isSearch &&\r\n                (cell ? (\r\n                    <div className={`${baseClass}__zone-title`}>\r\n                        Found cell: {cell.column}\r\n                        {cell.row}\r\n                    </div>\r\n                ) : (\r\n                    <div className={`${baseClass}__zone-title`}>Cell not found</div>\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Map } from \"../../components/map\";\r\n\r\nexport const GridMapPage = () => {\r\n    return (\r\n        <div className=\"page\">\r\n            <Map withGridControll />\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, NavLink as Link, Redirect } from \"react-router-dom\";\nimport { AreaMapPage } from \"./pages/areas-map\";\nimport { AreaIdentificationPage } from \"./pages/areas-identification\";\nimport { GridIdentificationPage } from \"./pages/grid-identification\";\nimport { GridMapPage } from \"./pages/grid-map\";\nimport \"./app.scss\";\n\nconst routes = [];\n\nconst createRoute = (url, title, component) => {\n    routes.push({\n        url,\n        title,\n        component,\n    });\n};\n\ncreateRoute(\"/area-map\", \"Area Map\", <AreaMapPage />);\ncreateRoute(\"/area-identification\", \"Area Identification\", <AreaIdentificationPage />);\ncreateRoute(\"/grid-map\", \"Grid Map\", <GridMapPage />);\ncreateRoute(\"/grid-identification\", \"Grid Identification\", <GridIdentificationPage />);\n\nconst baseClass = \"app\";\n\nexport const App = () => {\n    return (\n        <Router>\n            <div className={baseClass}>\n                <nav className={`${baseClass}__nav`}>\n                    <ul className={`${baseClass}__nav-list`}>\n                        {routes.map(({ url, title }) => {\n                            return (\n                                <li key={url}>\n                                    <Link\n                                        to={url}\n                                        className={`${baseClass}__nav-item`}\n                                        activeClassName={`${baseClass}__nav-item_active`}\n                                    >\n                                        {title}\n                                    </Link>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </nav>\n                <div className={`${baseClass}__page`}>\n                    <Switch>\n                        {routes.map(({ url, component }) => {\n                            return (\n                                <Route key={url} path={url}>\n                                    {component}\n                                </Route>\n                            );\n                        })}\n                        <Redirect to=\"/area-map\" />\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}